CMAKE_MINIMUM_REQUIRED(VERSION 2.8 FATAL_ERROR)
SET(UPDATE_TYPE git)
MESSAGE("================================================================================\n")
SET(CMAKE_CACHEFILE "${CMAKE_CACHEFILE_DIR}/CMakeCache.txt")
IF(WIN32)
  STRING(REPLACE "/" "\\" CMAKE_CACHEFILE ${CMAKE_CACHEFILE})
ENDIF()
SET(ERROR_MESSAGE "No generator previously specified.  Run:\n")
IF(UNIX)
  SET(ERROR_MESSAGE "${ERROR_MESSAGE}\trm ${CMAKE_CACHEFILE}\n")
  SET(ERROR_MESSAGE "${ERROR_MESSAGE}then run e.g:\n\tcmake ../.. -G\"CodeBlocks - Unix Makefiles\"\n\n")
ELSE(UNIX)
  SET(ERROR_MESSAGE "${ERROR_MESSAGE}\tdel ${CMAKE_CACHEFILE}\n")
  SET(ERROR_MESSAGE "${ERROR_MESSAGE}then run e.g:\n\tcmake ../.. -G\"CodeBlocks - MinGW Makefiles\"\n\n")
ENDIF(UNIX)
SET(ERROR_MESSAGE "${ERROR_MESSAGE}To see a full list of generators, run:\n\tcmake ../.. --help\n")
SET(CMAKE_GEN ${CMAKE_GENERATOR} CACHE INTERNAL "" FORCE)
IF(NOT ${CMAKE_C_COMPILER_WORKS})
  MESSAGE(FATAL_ERROR ${ERROR_MESSAGE})
ENDIF()

FIND_PROGRAM(GITCOMMAND git PATHS ENV ProgramFiles PATH_SUFFIXES "Git/bin")
SET(UPDATE_TYPE git)
SET(UPDATE_COMMAND "${GITCOMMAND}")

IF(NOT CMAKE_BUILD_TYPE)
  SET(CMAKE_BUILD_TYPE "Release" CACHE INTERNAL "Choose the type of build, options are: Debug Release RelWithDebInfo MinSizeRel." FORCE)
ENDIF(NOT CMAKE_BUILD_TYPE)
PROJECT(PD)
IF(NOT MAIDSAFE_TEST_TYPE)
  SET(MAIDSAFE_TEST_TYPE "BEH" CACHE INTERNAL "Choose the type of TEST, options are: _ BEH FUNC" FORCE)
ENDIF(NOT MAIDSAFE_TEST_TYPE)

IF(UNIX)
  EXECUTE_PROCESS(COMMAND date +%a%d%m%y OUTPUT_VARIABLE pddate OUTPUT_STRIP_TRAILING_WHITESPACE)
ELSE(UNIX)
  EXECUTE_PROCESS(COMMAND CMD /C DATE /T OUTPUT_VARIABLE pddate OUTPUT_STRIP_TRAILING_WHITESPACE)
  STRING(REPLACE "/" "" pddate ${pddate})
  STRING(SUBSTRING ${pddate} 0 4 pddateddmm)
  STRING(SUBSTRING ${pddate} 6 2 pddateyy)
  SET(pddate ${pddateddmm}${pddateyy})
ENDIF(UNIX)

###################################################################################################
# Set default include and library directories                                                     #
###################################################################################################
SET(SOURCE_DIR ${PD_SOURCE_DIR}/src)
IF(WIN32)
  IF(MSVC)
    SET(INCLUDE_DIR c:/msvc/include)
    SET(LIB_DIR c:/msvc/lib)
    SET(DOC_LIB_DIR " - e.g. \"c:\\lib\"")
  ELSE(MSVC)
#    SET(INCLUDE_DIR c:/usr/include)
#    SET(LIB_DIR c:/usr/lib)
#    SET(DOC_LIB_DIR " - e.g. \"c:\\usr\\lib\"")
#    LINK_DIRECTORIES(c:/MinGW/lib/ c:/MinGW/mingw32/lib/ c:/usr/lib/ c:/Qt/4.5.0/lib)
  ENDIF(MSVC)
ELSE(WIN32)
#  SET(INCLUDE_DIR /usr/include /usr/local/include /opt/local/var/macports/software/macfuse/1.7_0/opt/local/include)
#  SET(LIB_DIR /usr/lib /usr/local/lib)
  IF(APPLE)
    SET(CMAKE_OSX_SYSROOT "/")
  ENDIF(APPLE)
ENDIF(WIN32)
SET(CMAKE_REQUIRED_INCLUDES ${INCLUDE_DIR})

IF(CMAKE_BUILD_TYPE MATCHES "Release")
  MESSAGE("Building a package which is OK to release.")
  MESSAGE("------------------------------------------")
  SET(EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR}/Release/bin/)
  SET(LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}/Release/lib)
ELSE()
  MESSAGE("Building a package which is NOT OK to release.")
  MESSAGE("----------------------------------------------")
  SET(EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR}/Debug/bin/)
  SET(LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}/Debug/lib)
 	SET(pddate "DEVELOPER_${pddate}")
ENDIF()

###################################################################################################
# Boost libraries search                                                                          #
###################################################################################################
SET(REQUIRED_BOOST_COMPONENTS date_time filesystem regex system thread)
SET(COPY_OF_LIST REQUIRED_BOOST_COMPONENTS)
FOREACH(COMPONENT ${REQUIRED_BOOST_COMPONENTS})
  LIST(LENGTH ${COPY_OF_LIST} LEN)
  MATH(EXPR LEN ${LEN}-1)
  LIST(FIND ${COPY_OF_LIST} ${COMPONENT} POSITION)
  IF(${POSITION} EQUAL 0)
    SET(REQUIRED_BOOST_LIST \"${COMPONENT}\")
  ELSEIF(${POSITION} EQUAL LEN)
    SET(REQUIRED_BOOST_LIST "${REQUIRED_BOOST_LIST} and \"${COMPONENT}\"")
  ELSE()
    SET(REQUIRED_BOOST_LIST "${REQUIRED_BOOST_LIST}, \"${COMPONENT}\"")
  ENDIF()
  STRING(TOUPPER ${COMPONENT} COMP)
  UNSET(Boost_${COMP}_FOUND CACHE)
ENDFOREACH()
FOREACH(VER_NUM RANGE 40 99)
  SET(Boost_ADDITIONAL_VERSIONS ${Boost_ADDITIONAL_VERSIONS} "1.${VER_NUM}" "1.${VER_NUM}.0")
  SET(BOOST_TRY_VERSIONS ${BOOST_TRY_VERSIONS} "boost-1_${VER_NUM}")
ENDFOREACH()
UNSET(Boost_INCLUDE_DIR CACHE)
UNSET(BOOST_LIBRARY_DIRS CACHE)
UNSET(TRY_BOOST_INC_DIR CACHE)
IF(DEFINED BOOST_LIB_DIR)
  SET(BOOST_LIB_DIR ${BOOST_LIB_DIR} CACHE INTERNAL "Path to Boost libraries directory" FORCE)
  SET(BOOST_LIBRARYDIR ${BOOST_LIB_DIR} CACHE INTERNAL "Path to Boost libraries directory" FORCE)
ELSE()
  IF(WIN32)
    SET(BOOST_LIBRARYDIR ${LIB_DIR})
  ELSE()
    LIST(GET ${LIB_DIR} 0 BOOST_LIBRARYDIR)
  ENDIF()
ENDIF()
IF(DEFINED BOOST_INC_DIR)
  SET(BOOST_INC_DIR ${BOOST_INC_DIR} CACHE INTERNAL "Path to Boost include directory" FORCE)
  SET(Boost_INCLUDE_DIR ${BOOST_INC_DIR} CACHE INTERNAL "Path to Boost include directory" FORCE)
ELSE()
  LIST(REVERSE BOOST_TRY_VERSIONS)
  FOREACH(TRY_VERSION ${BOOST_TRY_VERSIONS})
    FOREACH(INC_OPTION ${INCLUDE_DIR})
      FIND_FILE(TRY_BOOST_INC_DIR ${TRY_VERSION} ${INC_OPTION})
      IF(NOT TRY_BOOST_INC_DIR MATCHES TRY_BOOST_INC_DIR-NOTFOUND)
        SET(Boost_INCLUDE_DIR ${TRY_BOOST_INC_DIR})
        BREAK()
      ENDIF()
    ENDFOREACH()
    IF(NOT TRY_BOOST_INC_DIR MATCHES TRY_BOOST_INC_DIR-NOTFOUND)
      BREAK()
    ENDIF()
  ENDFOREACH()
ENDIF()
SET(Boost_USE_STATIC_LIBS ON)
SET(Boost_USE_MULTITHREADED ON)
SET(BOOST_LIB_DIAGNOSTIC OFF)
#ADD_DEFINITIONS(-DBOOST_ALL_DYN_LINK)

FIND_PACKAGE(Boost 1.40 COMPONENTS ${REQUIRED_BOOST_COMPONENTS})
FOREACH(COMPONENT ${REQUIRED_BOOST_COMPONENTS})
  STRING(TOUPPER ${COMPONENT} COMP)
  IF(NOT DEFINED Boost_${COMP}_FOUND)
    IF(DEFINED Boost_LIB_VERSION)
      SET(ERROR_VERSION "version ${Boost_LIB_VERSION} ")
    ENDIF()
    SET(ERROR_MESSAGE "\nFound Boost headers at ${Boost_INCLUDE_DIR} but could not find ")
    SET(ERROR_MESSAGE "${ERROR_MESSAGE}Boost \"${COMPONENT}\" library.\n")
    SET(ERROR_MESSAGE "${ERROR_MESSAGE}Required Boost libraries are ${REQUIRED_BOOST_LIST}.\n")
    SET(ERROR_MESSAGE "${ERROR_MESSAGE}You can download Boost libraries at http://www.boost.org\n")
    SET(ERROR_MESSAGE "${ERROR_MESSAGE}If the required Boost libraries are already installed, run:\n")
    SET(ERROR_MESSAGE "${ERROR_MESSAGE}cmake ../.. -DBOOST_LIB_DIR=<Path to Boost library directory> and/or\n")
    SET(ERROR_MESSAGE "${ERROR_MESSAGE}cmake ../.. -DBOOST_INC_DIR=<Path to Boost include directory>")
    MESSAGE(FATAL_ERROR "${ERROR_MESSAGE}")
  ENDIF()
ENDFOREACH()
IF(NOT Boost_FOUND)
  SET(ERROR_MESSAGE "\nCould not find Boost libraries.\n")
  SET(ERROR_MESSAGE "${ERROR_MESSAGE}Required Boost libraries are ${REQUIRED_BOOST_LIST}.\n")
  SET(ERROR_MESSAGE "${ERROR_MESSAGE}You can download Boost libraries at http://www.boost.org\n")
  SET(ERROR_MESSAGE "${ERROR_MESSAGE}If the required Boost libraries are already installed, run:\n")
  SET(ERROR_MESSAGE "${ERROR_MESSAGE}cmake ../.. -DBOOST_LIB_DIR=<Path to Boost library directory> and/or\n")
  SET(ERROR_MESSAGE "${ERROR_MESSAGE}cmake ../.. -DBOOST_INC_DIR=<Path to Boost include directory>")
  MESSAGE(FATAL_ERROR "${ERROR_MESSAGE}")
ENDIF()

###################################################################################################
# QT library search                                                                               #
###################################################################################################
UNSET(QMAKE_EXE CACHE)
UNSET(QT_LIBRARIES CACHE)
UNSET(QT_LIBRARY_DIR CACHE)
UNSET(QT_MOC_EXECUTABLE CACHE)
UNSET(QT_INCLUDE_DIR CACHE)
UNSET(QT_INCLUDES CACHE)
IF(QT_ROOT_PATH)
  SET(QT_ROOT_PATH ${QT_ROOT_PATH} CACHE INTERNAL "Path to Qt root directory" FORCE)
  SET(QT_ROOT_DIR ${QT_ROOT_PATH})
ELSE()
  IF(WIN32)
    SET(QT_ROOT_DIR "c:\\Qt\\4.6.2" CACHE INTERNAL "Path to Qt root directory" FORCE)
  ELSE()
#    SET(QT_ROOT_DIR "/usr/local/Trolltech/Qt-4.5.3" CACHE INTERNAL "Path to Qt root directory" FORCE)
  ENDIF(WIN32)
ENDIF()
FIND_PROGRAM(QMAKE_EXE NAMES qmake qmake4 qmake-qt4 PATHS ${QT_ROOT_DIR}/bin)
IF(NOT QMAKE_EXE)
  SET(ERROR_MESSAGE "\nCould not find Qt.  NO QMAKE EXECUTABLE ")
  IF(WIN32)
    SET(ERROR_MESSAGE "${ERROR_MESSAGE}(Tried to find qmake.exe in ${QT_ROOT_DIR}\\bin)")
  ELSE()
    SET(ERROR_MESSAGE "${ERROR_MESSAGE}(Tried to find qmake in ${QT_ROOT_DIR}/bin)")
  ENDIF()
  SET(ERROR_MESSAGE "${ERROR_MESSAGE}\nYou can download Qt at http://qt.nokia.com/downloads\n")
  SET(ERROR_MESSAGE "${ERROR_MESSAGE}If Qt is already installed, run:\n")
  SET(ERROR_MESSAGE "${ERROR_MESSAGE}cmake ../.. -DQT_ROOT_PATH=<Path to Qt root directory>")
  IF(WIN32)
    SET(ERROR_MESSAGE "${ERROR_MESSAGE}\n(such that qmake.exe is in \"<Path to Qt root directory>\\bin\").")
  ELSE()
    SET(ERROR_MESSAGE "${ERROR_MESSAGE}\n(such that qmake is in \"<Path to Qt root directory>/bin\").")
  ENDIF()
  MESSAGE(FATAL_ERROR "${ERROR_MESSAGE}")
ENDIF()
IF(QT_LIBRARY_PATH)
  SET(QT_LIBRARY_PATH ${QT_LIBRARY_PATH} CACHE INTERNAL "Path to Qt library directory" FORCE)
  SET(QT_LIB_DIR ${QT_LIBRARY_PATH})
ELSE()
  SET(QT_LIB_DIR "${QT_ROOT_DIR}/lib")
ENDIF()
IF(QT_INCLUDE_PATH)
  SET(QT_INCLUDE_PATH ${QT_INCLUDE_PATH} CACHE INTERNAL "Path to Qt include directory" FORCE)
  SET(QT_INCLUDE_DIR ${QT_INCLUDE_PATH} CACHE INTERNAL "Path to Qt include directory" FORCE)
ELSE()
  SET(QT_INCLUDE_DIR "${QT_ROOT_DIR}/include" CACHE INTERNAL "Path to Qt include directory" FORCE)
ENDIF()
FIND_LIBRARY(QT_QTCORE_LIBRARY NAMES libQtCore4.a PATHS ${QT_LIB_DIR} DOC "Path to Qt qtcore library")
SET(ENV{QTDIR} ${QT_ROOT_DIR})
SET(QT_STATIC 1)
FIND_PACKAGE(Qt4 COMPONENTS QtCore QtGui REQUIRED)
INCLUDE(CheckIncludeFileCXX)
INCLUDE(${QT_USE_FILE})
CHECK_INCLUDE_FILE_CXX(Qt/qcoreapplication.h QT_INCLUDES)
IF(NOT QT_QTCORE_FOUND)
  SET(ERROR_MESSAGE "\nCould not find Qt.  NO QT CORE LIBRARY - ")
  SET(ERROR_MESSAGE "${ERROR_MESSAGE}You can download Qt at http://qt.nokia.com/downloads\n")
  SET(ERROR_MESSAGE "${ERROR_MESSAGE}If Qt is already installed, run:\n")
  SET(ERROR_MESSAGE "${ERROR_MESSAGE}cmake ../.. -DQT_ROOT_PATH=<Path to Qt root directory>")
  MESSAGE(FATAL_ERROR "${ERROR_MESSAGE}")
ENDIF()
IF(QT_LIBRARIES)
  IF(NOT QT_INCLUDES)
    SET(ERROR_MESSAGE "\nCould not find Qt.  AT LEAST ONE HEADER FILE IS MISSING - ")
    SET(ERROR_MESSAGE "${ERROR_MESSAGE}You can download Qt at http://qt.nokia.com/downloads\n")
    SET(ERROR_MESSAGE "${ERROR_MESSAGE}If Qt is already installed, run:\n")
    SET(ERROR_MESSAGE "${ERROR_MESSAGE}cmake ../.. -DQT_INCLUDE_PATH=<Path to Qt include directory>")
    MESSAGE(FATAL_ERROR "${ERROR_MESSAGE}")
  ENDIF()
ELSE(QT_LIBRARIES)
  SET(ERROR_MESSAGE "\nCould not find Qt.  NO QT LIBRARIES - ")
  SET(ERROR_MESSAGE "${ERROR_MESSAGE}You can download Qt at http://qt.nokia.com/downloads\n")
  SET(ERROR_MESSAGE "${ERROR_MESSAGE}If Qt is already installed, run:\n")
  SET(ERROR_MESSAGE "${ERROR_MESSAGE}cmake ../.. -DQT_LIBRARY_PATH=<Path to Qt library directory>")
  MESSAGE(FATAL_ERROR "${ERROR_MESSAGE}")
ENDIF(QT_LIBRARIES)

###################################################################################################
# Google Test library search                                                                      #
###################################################################################################
UNSET(GTEST_LIBRARY CACHE)
UNSET(GTEST_MAIN_LIBRARY CACHE)
UNSET(GTEST_INCLUDE_DIR CACHE)
UNSET(GTEST_INCLUDE CACHE)
IF(GTEST_ROOT_PATH)
  SET(GTEST_ROOT_PATH ${GTEST_ROOT_PATH} CACHE INTERNAL "Path to Google Test library directory" FORCE)
  SET(ENV{GTEST_ROOT} ${GTEST_ROOT_PATH})
ELSE()
  SET(ENV{GTEST_ROOT} ${LIB_DIR})
ENDIF()
IF(GTEST_INCLUDE_PATH)
  SET(GTEST_INCLUDE_PATH ${GTEST_INCLUDE_PATH} CACHE INTERNAL "Path to Google Test include directory" FORCE)
  SET(GTEST_INCLUDE_DIR ${GTEST_INCLUDE_PATH} CACHE INTERNAL "Path to Google Test include directory" FORCE)
ELSE()
  FOREACH(INC_OPTION ${INCLUDE_DIR})
    SET(GTEST_INCLUDE_DIR ${GTEST_INCLUDE_DIR} ${INC_OPTION}/gtest CACHE INTERNAL "Path to Google Test include directory" FORCE)
  ENDFOREACH()
ENDIF()
INCLUDE(FindGTest)
IF(MSVC)
  SET(GTEST_MSVC_SEARCH MT)
ENDIF()
FIND_PACKAGE(GTest)
FIND_PATH(GTEST_INCLUDE gtest/gtest.h ${GTEST_INCLUDE_DIR} ${GTEST_INCLUDE_DIRS} ${GTEST_ROOT_PATH}/include)
IF(GTEST_LIBRARY)
  IF(NOT GTEST_INCLUDE)
    SET(ERROR_MESSAGE "\nCould not find Google Test.  NO GTEST.H - ")
    SET(ERROR_MESSAGE "${ERROR_MESSAGE}You can download it at http://code.google.com/p/googletest\n")
    SET(ERROR_MESSAGE "${ERROR_MESSAGE}If Google Test is already installed, run:\n")
    SET(ERROR_MESSAGE "${ERROR_MESSAGE}cmake ../.. -DGTEST_INCLUDE_PATH=<Path to gtest include directory> or")
    SET(ERROR_MESSAGE "${ERROR_MESSAGE}\ncmake ../.. -DGTEST_ROOT_PATH=<Path to gtest root directory>")
    MESSAGE(FATAL_ERROR "${ERROR_MESSAGE}")
  ENDIF()
ELSE(GTEST_LIBRARY)
  SET(ERROR_MESSAGE "\nCould not find Google Test.  NO GTEST LIBRARY - ")
  SET(ERROR_MESSAGE "${ERROR_MESSAGE}You can download it at http://code.google.com/p/googletest\n")
  SET(ERROR_MESSAGE "${ERROR_MESSAGE}If Google Test is already installed, run:\n")
  SET(ERROR_MESSAGE "${ERROR_MESSAGE}cmake ../.. -DGTEST_ROOT_PATH=<Path to gtest library directory>")
  MESSAGE(FATAL_ERROR "${ERROR_MESSAGE}")
ENDIF(GTEST_LIBRARY)

###################################################################################################
# Protocol Buffers library search                                                                 #
###################################################################################################
FUNCTION(GENERATE_PROTO_FILES PROTO_FILE CACHE_NAME)
  FILE(STRINGS ${SOURCE_DIR}/${PROTO_FILE} PROTO_STRING)
  UNSET(NEW_${ARGV1} CACHE)
  SET(NEW_${ARGV1} ${PROTO_STRING} CACHE STRING "Google Protocol Buffers - new file contents for ${ARGV1}")
  IF((${FORCE_PROTOC_COMPILE}) OR (NOT "${NEW_${ARGV1}}" STREQUAL "${${ARGV1}}"))
    GET_FILENAME_COMPONENT(PROTO_FILE_ROOT ${SOURCE_DIR}/${PROTO_FILE} PATH)
    GET_FILENAME_COMPONENT(PROTO_FILE_NAME ${SOURCE_DIR}/${PROTO_FILE} NAME)
    EXECUTE_PROCESS(COMMAND ${PROTOBUF_PROTOC_EXECUTABLE} --proto_path=${PROTO_FILE_ROOT} --cpp_out=${PROTO_FILE_ROOT} ${SOURCE_DIR}/${PROTO_FILE} RESULT_VARIABLE PROTO_RES ERROR_VARIABLE PROTO_ERR)
    UNSET(${ARGV1} CACHE)
    IF(NOT ${PROTO_RES})
      MESSAGE("--   Generated files from ${PROTO_FILE_NAME}")
      SET(${ARGV1} ${PROTO_STRING} CACHE STRING "Google Protocol Buffers - file contents for ${PROTO_FILE}")
    ELSE()
      MESSAGE(FATAL_ERROR "Failed trying to generate files from ${PROTO_FILE_NAME}\n${PROTO_ERR}")
    ENDIF()
  ENDIF()
  UNSET(NEW_${ARGV1} CACHE)
ENDFUNCTION()

UNSET(PROTOBUF_PROTOC_EXECUTABLE CACHE)
UNSET(PROTOBUF_INCLUDE CACHE)
UNSET(Protobuf_LIBRARY_RELEASE CACHE)
UNSET(Protobuf_LIBRARY_DEBUG CACHE)
UNSET(PROTOBUF_LIBRARY CACHE)

INCLUDE(CheckLibraryExists)
IF(MSVC)
  FIND_PROGRAM(PROTOBUF_PROTOC_EXECUTABLE "protoc.exe" PATHS "C:\\Program Files" "C:\\Program Files (x86)")
ELSE(MSVC)
  FIND_PROGRAM(PROTOBUF_PROTOC_EXECUTABLE "protoc")
ENDIF(MSVC)

IF(NOT PROTOBUF_PROTOC_EXECUTABLE)
  MESSAGE(FATAL "No Protocol Buffers package found. Get it here: http://code.google.com/apis/protocolbuffers")
ELSE(NOT PROTOBUF_PROTOC_EXECUTABLE)
  MESSAGE(STATUS "Found Protocol Buffers compiler: ${PROTOBUF_PROTOC_EXECUTABLE}")
  EXECUTE_PROCESS(COMMAND ${PROTOBUF_PROTOC_EXECUTABLE} --version OUTPUT_VARIABLE CURRENT_PROTOC_VERSION OUTPUT_STRIP_TRAILING_WHITESPACE)
  IF(NOT "${PROTOC_VERSION}" STREQUAL "${CURRENT_PROTOC_VERSION}")
    SET(FORCE_PROTOC_COMPILE TRUE)
    UNSET(PROTOC_VERSION CACHE)
    SET(PROTOC_VERSION ${CURRENT_PROTOC_VERSION} CACHE STRING "Google Protocol Buffer Compiler Version")
  ENDIF()
ENDIF(NOT PROTOBUF_PROTOC_EXECUTABLE)

IF(MSVC)
  FIND_PATH(PROTOBUF_INCLUDE google/protobuf/message.h
    DOC "Google Protocol Buffers include files"
    PATHS ${PROTOBUF_ROOT}/src/ INCLUDE )
  SET(CMAKE_LIBRARY_PATH_BK  ${CMAKE_LIBRARY_PATH})
  IF(CMAKE_CL_64)
    FIND_LIBRARY(Protobuf_LIBRARY_RELEASE libprotobuf.lib
      DOC "Protocol Buffers C++ libprotobuf (release)"
      PATHS ${PROTOBUF_ROOT}/vsprojects/x64/Release LIB NO_DEFAULT_PATH )
    FIND_LIBRARY(Protobuf_LIBRARY_DEBUG libprotobuf.lib
      DOC "Protocol Buffers C++ libprotobuf (debug)"
      PATHS ${PROTOBUF_ROOT}/vsprojects/x64/Debug LIB NO_DEFAULT_PATH )
  ELSE(CMAKE_CL_64)
    FIND_LIBRARY(Protobuf_LIBRARY_RELEASE libprotobuf.lib
      DOC "Protocol Buffers C++ libprotobuf (release)"
      PATHS ${PROTOBUF_ROOT}/vsprojects/Release LIB NO_DEFAULT_PATH )
#    FIND_LIBRARY(Protobuf_LIBRARY_DEBUG libprotobuf.lib
#      DOC "Protocol Buffers C++ libprotobuf (debug)"
#      PATHS ${PROTOBUF_ROOT}/vsprojects/Debug LIB NO_DEFAULT_PATH )
  ENDIF(CMAKE_CL_64)
  SET(PROTOBUF_LIBRARY optimized ${Protobuf_LIBRARY_RELEASE} debug ${Protobuf_LIBRARY_DEBUG} CACHE STRING "Google Protocol Buffers library" )
ELSE(MSVC)
  FIND_PATH(PROTOBUF_INCLUDE google/protobuf/message.h
    DOC "Google Protocol Buffers include files"
    PATHS ${PROTOBUF_ROOT}/src/ INCLUDE ${INCLUDE_DIR})
  FIND_LIBRARY(PROTOBUF_LIBRARY protobuf DOC "libprotobuf"
    PATHS "/usr/lib" "/usr/lib64" "/usr/local/lib" LIB )
ENDIF(MSVC)
IF(NOT PROTOBUF_INCLUDE OR NOT PROTOBUF_LIBRARY)
  SET(ERROR_MESSAGE "\nCould not find Protocol Buffers.  AT LEAST ONE HEADER or LIBRARY FILE IS MISSING - ")
  SET(ERROR_MESSAGE "${ERROR_MESSAGE}You can download it at http://code.google.com/p/protobuf\n")
  SET(ERROR_MESSAGE "${ERROR_MESSAGE}If Protocol Buffers is already installed, run:\n")
  SET(ERROR_MESSAGE "${ERROR_MESSAGE}cmake ../.. -DPROTOBUF_ROOT=<Path to (compiled) protobuf root directory>")
  MESSAGE(FATAL_ERROR "${ERROR_MESSAGE} ${LIB_ERROR_MESSAGE}")
ELSE(NOT PROTOBUF_INCLUDE OR NOT PROTOBUF_LIBRARY)
  MESSAGE(STATUS "Found Protocol Buffers runtime: " ${PROTOBUF_INCLUDE})
  FILE(GLOB PROTO_FILES RELATIVE ${SOURCE_DIR} "${SOURCE_DIR}/protobuf/*.proto")
  FOREACH(PROTO_FILE ${PROTO_FILES})
    STRING(REGEX REPLACE "[\\/.]" "_" PROTO_CACHE_NAME ${PROTO_FILE})
    GENERATE_PROTO_FILES(${PROTO_FILE} ${PROTO_CACHE_NAME})
  ENDFOREACH()
ENDIF(NOT PROTOBUF_INCLUDE OR NOT PROTOBUF_LIBRARY)

###################################################################################################
# Python library search                                                                           #
###################################################################################################
UNSET(PYTHON_EXECUTABLE CACHE)
INCLUDE(FindPythonInterp)
FIND_PACKAGE(PythonInterp)
IF(PYTHONINTERP_FOUND)
  MESSAGE("-- Found python executable: style checking enabled.")
ELSE(PYTHONINTERP_FOUND)
  MESSAGE("-- Didn't find python executable: style checking disabled.")
ENDIF(PYTHONINTERP_FOUND)

###################################################################################################
# maidsafe-dht library search                                                                     #
###################################################################################################
UNSET(MAIDSAFE_DHT_LIBRARY CACHE)
UNSET(MAIDSAFE_DHT_INCLUDE_DIR CACHE)
UNSET(MAIDSAFE_DHT_CONFIG CACHE)
UNSET(MAIDSAFE_DOT_H CACHE)
IF(MAIDSAFE_DHT_LIBRARY_PATH)
  SET(MAIDSAFE_DHT_LIBRARY_PATH ${MAIDSAFE_DHT_LIBRARY_PATH} CACHE INTERNAL "Path to maidsafe-dht library directory" FORCE)
  SET(MAIDSAFE_DHT_LIB_DIR ${MAIDSAFE_DHT_LIBRARY_PATH})
ELSE()
  SET(MAIDSAFE_DHT_LIB_DIR ${LIB_DIR})
ENDIF()
IF(MAIDSAFE_DHT_INCLUDE_PATH)
  SET(MAIDSAFE_DHT_INCLUDE_PATH ${MAIDSAFE_DHT_INCLUDE_PATH} CACHE INTERNAL "Path to maidsafe-dht include directory" FORCE)
  SET(MAIDSAFE_DHT_INCLUDE_DIR ${MAIDSAFE_DHT_INCLUDE_PATH} CACHE INTERNAL "Path to maidsafe-dht include directory" FORCE)
ELSE()
  FOREACH(INC_OPTION ${INCLUDE_DIR})
    SET(MAIDSAFE_DHT_INCLUDE_DIR ${MAIDSAFE_DHT_INCLUDE_DIR} ${INC_OPTION}/maidsafe CACHE INTERNAL "Path to maidsafe-dht include directory" FORCE)
  ENDFOREACH()
ENDIF()
FIND_LIBRARY(MAIDSAFE_DHT_LIBRARY NAMES libmaidsafe maidsafe_static PATHS ${MAIDSAFE_DHT_LIB_DIR})
IF(NOT MAIDSAFE_DHT_LIBRARY)
  SET(ERROR_MESSAGE "\nCould not find maidsafe-dht library.\n")
  SET(ERROR_MESSAGE "${ERROR_MESSAGE}You can download it at http://code.google.com/p/maidsafe-dht\n")
  SET(ERROR_MESSAGE "${ERROR_MESSAGE}If maidsafe-dht is already installed, run:\n")
  SET(ERROR_MESSAGE "${ERROR_MESSAGE}cmake ../.. -DMAIDSAFE_DHT_LIBRARY_PATH=<Path to maidsafe-dht library directory>")
  MESSAGE(FATAL_ERROR "${ERROR_MESSAGE}")
ENDIF()
FIND_FILE(MAIDSAFE_DHT_CONFIG maidsafe/maidsafe-dht_config.h ${MAIDSAFE_DHT_INCLUDE_DIR})
IF(NOT MAIDSAFE_DHT_CONFIG)
  SET(ERROR_MESSAGE "\nCould not find maidsafe-dht_config.h\n")
  SET(ERROR_MESSAGE "${ERROR_MESSAGE}You can download maidsafe-dht at http://code.google.com/p/maidsafe-dht\n")
  SET(ERROR_MESSAGE "${ERROR_MESSAGE}If maidsafe-dht is already installed, run:\n")
  SET(ERROR_MESSAGE "${ERROR_MESSAGE}cmake ../.. -DMAIDSAFE_DHT_INCLUDE_PATH=<Path to maidsafe-dht include directory>")
  MESSAGE(FATAL_ERROR "${ERROR_MESSAGE}")
ENDIF()
FILE(STRINGS ${MAIDSAFE_DHT_CONFIG} VERSION_LINE REGEX "MAIDSAFE_DHT_VERSION")
STRING(REPLACE "#define MAIDSAFE_DHT_VERSION " "" INSTALLED_DHT_VERSION ${VERSION_LINE})
FIND_FILE(MAIDSAFE_DOT_H /maidsafe/maidsafe.h ${SOURCE_DIR})
FILE(STRINGS ${MAIDSAFE_DOT_H} VERSION_LINE REGEX "#define THIS_MAIDSAFE_DHT_VERSION")
STRING(REPLACE "#define THIS_MAIDSAFE_DHT_VERSION " "" THIS_DHT_VERSION ${VERSION_LINE})
IF(NOT ${THIS_DHT_VERSION} MATCHES ${INSTALLED_DHT_VERSION})
  SET(ERROR_MESSAGE "\nInstalled version of maidsafe-dht has MAIDSAFE_DHT_VERSION == ${INSTALLED_DHT_VERSION}\n")
  SET(ERROR_MESSAGE "${ERROR_MESSAGE}This project has MAIDSAFE_DHT_VERSION == ${THIS_DHT_VERSION}\n")
  IF(${THIS_DHT_VERSION} LESS ${INSTALLED_DHT_VERSION})
    SET(ERROR_MESSAGE "${ERROR_MESSAGE}Please update ${MAIDSAFE_DOT_H}\n")
  ELSE()
    SET(ERROR_MESSAGE "${ERROR_MESSAGE}Please update maidsafe-dht.\n")
    SET(ERROR_MESSAGE "${ERROR_MESSAGE}You can download maidsafe-dht at http://code.google.com/p/maidsafe-dht\n")
  ENDIF()
  MESSAGE(FATAL_ERROR "${ERROR_MESSAGE}")
ELSE()
  MESSAGE("-- Found library ${MAIDSAFE_DHT_LIBRARY}")
ENDIF()

###################################################################################################
# cryptopp library search                                                                         #
###################################################################################################
UNSET(CRYPTOPP_LIBRARY CACHE)
UNSET(CRYPTOPP_INCLUDE_DIR CACHE)
IF(CRYPTOPP_LIBRARY_PATH)
  SET(CRYPTOPP_LIBRARY_PATH ${CRYPTOPP_LIBRARY_PATH} CACHE INTERNAL "Path to cryptopp library directory" FORCE)
  SET(CRYPTOPP_LIB_DIR ${CRYPTOPP_LIBRARY_PATH})
ELSE()
  SET(CRYPTOPP_LIB_DIR ${LIB_DIR})
ENDIF()
IF(CRYPTOPP_INCLUDE_PATH)
  SET(CRYPTOPP_INCLUDE_PATH ${CRYPTOPP_INCLUDE_PATH} CACHE INTERNAL "Path to cryptopp include directory" FORCE)
  SET(CRYPTOPP_INCLUDE_DIR ${CRYPTOPP_INCLUDE_PATH} CACHE INTERNAL "Path to cryptopp include directory" FORCE)
ELSE()
  FOREACH(INC_OPTION ${INCLUDE_DIR})
    SET(CRYPTOPP_INCLUDE_DIR ${CRYPTOPP_INCLUDE_DIR} CACHE INTERNAL "Path to cryptopp include directory" FORCE)
  ENDFOREACH()
ENDIF()
FIND_LIBRARY(CRYPTOPP_LIBRARY NAMES libcryptopp cryptopp_static PATHS ${CRYPTOPP_LIB_DIR})
IF(NOT CRYPTOPP_LIBRARY)
  SET(ERROR_MESSAGE "\nCould not find cryptopp library.\n")
  SET(ERROR_MESSAGE "${ERROR_MESSAGE}You can download it at http://code.google.com/p/maidsafe-dht\n")
  SET(ERROR_MESSAGE "${ERROR_MESSAGE}If cryptopp is already installed, run:\n")
  SET(ERROR_MESSAGE "${ERROR_MESSAGE}cmake ../.. -DCRYPTOPP_LIBRARY_PATH=<Path to cryptopp library directory>")
  MESSAGE(FATAL_ERROR "${ERROR_MESSAGE}")
ELSE()
  MESSAGE("-- Found library ${CRYPTOPP_LIBRARY}")
ENDIF()

###################################################################################################
# udt library search                                                                              #
###################################################################################################
UNSET(UDT_LIBRARY CACHE)
UNSET(UDT_INCLUDE_DIR CACHE)
IF(UDT_LIBRARY_PATH)
  SET(UDT_LIBRARY_PATH ${UDT_LIBRARY_PATH} CACHE INTERNAL "Path to udt library directory" FORCE)
  SET(UDT_LIB_DIR ${UDT_LIBRARY_PATH})
ELSE()
  SET(UDT_LIB_DIR ${LIB_DIR})
ENDIF()
IF(UDT_INCLUDE_PATH)
  SET(UDT_INCLUDE_PATH ${UDT_INCLUDE_PATH} CACHE INTERNAL "Path to udt include directory" FORCE)
  SET(UDT_INCLUDE_DIR ${UDT_INCLUDE_PATH} CACHE INTERNAL "Path to udt include directory" FORCE)
ELSE()
  FOREACH(INC_OPTION ${INCLUDE_DIR})
    SET(UDT_INCLUDE_DIR ${UDT_INCLUDE_DIR} CACHE INTERNAL "Path to udt include directory" FORCE)
  ENDFOREACH()
ENDIF()
FIND_LIBRARY(UDT_LIBRARY NAMES libudt udt_static PATHS ${UDT_LIB_DIR})
IF(NOT UDT_LIBRARY)
  SET(ERROR_MESSAGE "\nCould not find udt library.\n")
  SET(ERROR_MESSAGE "${ERROR_MESSAGE}You can download it at http://code.google.com/p/maidsafe-dht\n")
  SET(ERROR_MESSAGE "${ERROR_MESSAGE}If udt is already installed, run:\n")
  SET(ERROR_MESSAGE "${ERROR_MESSAGE}cmake ../.. -DUDT_LIBRARY_PATH=<Path to udt library directory>")
  MESSAGE(FATAL_ERROR "${ERROR_MESSAGE}")
ELSE()
  MESSAGE("-- Found library ${UDT_LIBRARY}")
ENDIF()

###################################################################################################
# All other libraries search                                                                      #
###################################################################################################
IF(UNIX)
  SET(SYS_LIB libsqlite3.a libfuse.a)
  IF(NOT APPLE)
    SET(SYS_LIB rt c ${SYS_LIB})
  ENDIF()
  FOREACH(library ${SYS_LIB})
    FIND_LIBRARY(CURRENT_LIB ${library} ${LIB_DIR})
    IF(CURRENT_LIB)
      MESSAGE("-- Found library ${CURRENT_LIB}")
    ELSE(CURRENT_LIB)
      MESSAGE(FATAL_ERROR "\nCouldn't find library ${library}")
    ENDIF(CURRENT_LIB)
    UNSET(CURRENT_LIB CACHE)
  ENDFOREACH()
ELSEIF(WIN32)
  UNSET(DOKAN_H CACHE)
  SET(SYS_LIBS dokan advapi32 kernel32 ws2_32 iphlpapi mswsock)
  IF(MSVC)
    SET(SYS_LIBS sqlite3 ${SYS_LIBS})
  ELSE()
    SET(SYS_LIBS libsqlite3 ${SYS_LIBS})
  ENDIF()
  FOREACH(library ${SYS_LIBS})
    FIND_LIBRARY(CURRENT_LIB NAMES ${library} PATHS ${LIB_DIR} "C:/Program Files/Microsoft SDKs/Windows/v7.0/Lib")
    IF(CURRENT_LIB)
      MESSAGE("-- Found library ${CURRENT_LIB}")
      IF(${CURRENT_LIB} MATCHES dll$ OR ${CURRENT_LIB} MATCHES DLL$)
        SET(SYS_LIB ${SYS_LIB} -l${library})
      ELSE()
        SET(SYS_LIB ${SYS_LIB} ${CURRENT_LIB})
      ENDIF()
    ELSE(CURRENT_LIB)
      MESSAGE(FATAL_ERROR "\nCouldn't find library ${library}")
    ENDIF(CURRENT_LIB)
    UNSET(CURRENT_LIB CACHE)
  ENDFOREACH()
  FIND_FILE(DOKAN_H dokan.h ${INCLUDE_DIR})
  IF(NOT DOKAN_H)
    MESSAGE(FATAL_ERROR "\nCouldn't find dokan.h in ${INCLUDE_DIR}")
  ENDIF()
ENDIF(UNIX)

MESSAGE("================================================================================")

###################################################################################################
# Cleanup of temporary test folders                                                               #
###################################################################################################
IF(WIN32)
  IF(NOT CLEAN_TEMP)
    SET(CLEAN_TEMP "OFF" CACHE INTERNAL "Cleanup of temp test folders, options are: ONCE, OFF, ALWAYS" FORCE)
  ENDIF(NOT CLEAN_TEMP)
  EXECUTE_PROCESS(COMMAND CMD /C ECHO %TEMP% OUTPUT_VARIABLE temp_path OUTPUT_STRIP_TRAILING_WHITESPACE)
  STRING(REPLACE "\\" "/" temp_path ${temp_path})
  FILE(GLOB temp_dirs ${temp_path}/maidsafe_Test*)
  LIST(LENGTH temp_dirs temp_dir_count)
  IF(NOT ${temp_dir_count} EQUAL 0)
    MESSAGE("")
    IF(CLEAN_TEMP MATCHES ONCE OR CLEAN_TEMP MATCHES ALWAYS)
      MESSAGE("Cleaning up temporary test folders.\n")
      FOREACH(temp_dir ${temp_dirs})
        FILE(REMOVE_RECURSE ${temp_dir})
        MESSAGE("-- Removed ${temp_dir}")
      ENDFOREACH()
    ELSE()
      MESSAGE("The following temporary test folders could be cleaned up:\n")
      FOREACH(temp_dir ${temp_dirs})
        MESSAGE("-- Found ${temp_dir}")
      ENDFOREACH()
      MESSAGE("")
      MESSAGE("To cleanup, run cmake ../.. -DCLEAN_TEMP=ONCE or cmake ../.. -DCLEAN_TEMP=ALWAYS")
    ENDIF()
    MESSAGE("================================================================================")
  ENDIF()
  IF(NOT CLEAN_TEMP MATCHES ALWAYS)
    SET(CLEAN_TEMP "OFF" CACHE INTERNAL "Cleanup of temp test folders, options are: ONCE, OFF, ALWAYS" FORCE)
  ENDIF()
ENDIF(WIN32)

SET(SYS_LIB ${SYS_LIB} ${Boost_LIBRARIES} ${PROTOBUF_LIBRARY} ${CRYPTOPP_LIBRARY})
INCLUDE_DIRECTORIES(${SOURCE_DIR} ${INCLUDE_DIR} ${GTEST_INCLUDE} ${PROTOBUF_INCLUDE} ${Boost_INCLUDE_DIRS} ${MAIDSAFE_DHT_INCLUDE_DIR} ${CMAKE_BINARY_DIR} C:/msvc/SQLite3/SQLite3)
LINK_DIRECTORIES(${PD_BINARY_DIR})

###################################################################################################
# Set up all files as GLOBs                                                                       #
###################################################################################################
FILE(GLOB M_QT_C "${SOURCE_DIR}/qt/*.c*")
FILE(GLOB M_QT_H "${SOURCE_DIR}/qt/*.h*")
FILE(GLOB M_QT_WIDGETS_C "${SOURCE_DIR}/qt/widgets/*.c*")
FILE(GLOB M_QT_WIDGETS_H "${SOURCE_DIR}/qt/widgets/*.h*")
FILE(GLOB M_QT_CLIENT_C "${SOURCE_DIR}/qt/client/*.c*")
FILE(GLOB M_QT_CLIENT_H "${SOURCE_DIR}/qt/client/*.h*")
FILE(GLOB M_QT_UI "${SOURCE_DIR}/qt/ui/*.ui")
FILE(GLOB M_QT_QRC "${SOURCE_DIR}/qt/resources/*.qrc")
LIST(APPEND M_QT_C ${M_QT_WIDGETS_C} ${M_QT_CLIENT_C})
LIST(APPEND M_QT_H ${M_QT_WIDGETS_H} ${M_QT_CLIENT_H})
LIST(APPEND M_QT_DIR ${M_QT_C} ${M_QT_H})
FILE(GLOB M_PROTOBUF_C "${SOURCE_DIR}/protobuf/*.c*")
FILE(GLOB M_PROTOBUF_H "${SOURCE_DIR}/protobuf/*.h*")
LIST(APPEND M_PROTOBUF_DIR ${M_PROTOBUF_C} ${M_PROTOBUF_H})
FILE(GLOB M_MAIDSAFE_C "${SOURCE_DIR}/maidsafe/*.c*")
FILE(GLOB M_MAIDSAFE_H "${SOURCE_DIR}/maidsafe/*.h*")
LIST(APPEND M_MAIDSAFE_DIR ${M_MAIDSAFE_C} ${M_MAIDSAFE_H})
LIST(APPEND STYLE_MAIDSAFE ${M_MAIDSAFE_C} ${M_MAIDSAFE_H})
FILE(GLOB M_MSCLIENT_C "${SOURCE_DIR}/maidsafe/client/*.c*")
FILE(GLOB M_MSCLIENT_H "${SOURCE_DIR}/maidsafe/client/*.h*")
LIST(APPEND M_MSCLIENT_DIR ${M_MSCLIENT_C} ${M_MSCLIENT_H})
LIST(APPEND STYLE_MSCLIENT ${M_MSCLIENT_C} ${M_MSCLIENT_H})
FILE(GLOB M_MSVAULT_C "${SOURCE_DIR}/maidsafe/vault/*.c*")
FILE(GLOB M_MSVAULT_H "${SOURCE_DIR}/maidsafe/vault/*.h*")
LIST(APPEND M_MSVAULT_DIR ${M_MSVAULT_C} ${M_MSVAULT_H})
LIST(REMOVE_ITEM M_MSVAULT_DIR "${SOURCE_DIR}/maidsafe/vault/main.cc")
LIST(REMOVE_ITEM M_MSVAULT_DIR "${SOURCE_DIR}/maidsafe/vault/win_service.cc")
LIST(REMOVE_ITEM M_MSVAULT_DIR "${SOURCE_DIR}/maidsafe/vault/unix_deamon.cc")
LIST(APPEND STYLE_MSVAULT ${M_MSVAULT_C} ${M_MSVAULT_H})
FILE(GLOB T_MAIDSAFE_C "${SOURCE_DIR}/tests/maidsafe/*.c*")
FILE(GLOB T_MAIDSAFE_H "${SOURCE_DIR}/tests/maidsafe/*.h*")
LIST(APPEND T_MAIDSAFE_DIR ${T_MAIDSAFE_C} ${T_MAIDSAFE_H})
LIST(REMOVE_ITEM T_MAIDSAFE_DIR "${SOURCE_DIR}/tests/maidsafe/testfuse.cc")
LIST(REMOVE_ITEM T_MAIDSAFE_DIR "${SOURCE_DIR}/tests/maidsafe/functionaltestclientcontroller.cc")
LIST(REMOVE_ITEM T_MAIDSAFE_DIR "${SOURCE_DIR}/tests/maidsafe/functionaltestauthentication.cc")
LIST(REMOVE_ITEM T_MAIDSAFE_DIR "${SOURCE_DIR}/tests/maidsafe/testclientcontroller.cc")
LIST(REMOVE_ITEM T_MAIDSAFE_DIR "${SOURCE_DIR}/tests/maidsafe/testpdvault.cc")
LIST(REMOVE_ITEM T_MAIDSAFE_DIR "${SOURCE_DIR}/tests/maidsafe/testbufferpackethandlerfunc.cc")
FILE(GLOB T_MAIN  "${SOURCE_DIR}/tests/main.cc")
FILE(GLOB T_FS  "${SOURCE_DIR}/tests/fs/*.c*")
QT4_ADD_RESOURCES(M_QT_C ${M_QT_QRC})
QT4_WRAP_UI(M_QT_UI ${M_QT_UI})
QT4_WRAP_CPP(M_QT_C ${M_QT_H})
LIST(APPEND M_QT_C ${M_QT_H} ${M_QT_UI} ${M_QT_QRC})
IF(APPLE)
  SET(FS_SOURCE_FILE ${SOURCE_DIR}/fs/l_fuse/fslinux.cc ${SOURCE_DIR}/fs/l_fuse/fusecpp.h)
ELSEIF(UNIX AND NOT APPLE)
  SET(FS_SOURCE_FILE ${SOURCE_DIR}/fs/l_fuse/fslinux.cc ${SOURCE_DIR}/fs/l_fuse/fusecpp.h)
ELSEIF(WIN32)
  SET(FS_SOURCE_FILE ${SOURCE_DIR}/fs/w_fuse/fswin.cc ${SOURCE_DIR}/fs/w_fuse/fswin.h)
ENDIF(APPLE)

###################################################################################################
# All Platforms:  Add exes and Create all PD libs                                                 #
###################################################################################################
IF(APPLE)
  ADD_EXECUTABLE(perpetualdata MACOSX_BUNDLE ${M_QT_C})
  ADD_EXECUTABLE(pdlocal MACOSX_BUNDLE  ${M_QT_C})
ELSEIF(UNIX AND NOT APPLE)
  ADD_EXECUTABLE(perpetualdata ${M_QT_C})
  ADD_EXECUTABLE(pdlocal ${M_QT_C})
ELSEIF(WIN32)
  ADD_EXECUTABLE(perpetualdata WIN32 ${M_QT_C})
  ADD_EXECUTABLE(pdlocal WIN32 ${M_QT_C})
ENDIF(APPLE)
#ADD_EXECUTABLE(TESTfuse "${SOURCE_DIR}/tests/maidsafe/testfuse.cc")
ADD_EXECUTABLE(TESTnetworkclientcontroller "${SOURCE_DIR}/tests/maidsafe/functionaltestclientcontroller.cc")
ADD_EXECUTABLE(TESTfuncauth "${SOURCE_DIR}/tests/maidsafe/functionaltestauthentication.cc")
ADD_EXECUTABLE(TESTlocalclientcontroller "${SOURCE_DIR}/tests/maidsafe/testclientcontroller.cc")
ADD_EXECUTABLE(TESTpdvault "${SOURCE_DIR}/tests/maidsafe/testpdvault.cc")
ADD_EXECUTABLE(TESTbph "${SOURCE_DIR}/tests/maidsafe/testbufferpackethandlerfunc.cc")
ADD_EXECUTABLE(TESTmaidsafe ${T_MAIDSAFE_DIR})
ADD_EXECUTABLE(TESTfs ${T_MAIN} ${T_FS})
ADD_EXECUTABLE(testvault "${SOURCE_DIR}/maidsafe/vault/main.cc")
IF(WIN32)
  ADD_EXECUTABLE(vault "${SOURCE_DIR}/maidsafe/vault/win_service.cc")
ELSE()
  ADD_EXECUTABLE(vault "${SOURCE_DIR}/maidsafe/vault/unix_deamon.cc")
ENDIF()

ADD_LIBRARY(PDmaidsafelib STATIC ${M_MAIDSAFE_DIR})
ADD_LIBRARY(PDmsclientlib STATIC ${M_MSCLIENT_DIR})
ADD_LIBRARY(PDmsvaultlib STATIC ${M_MSVAULT_DIR})
ADD_LIBRARY(PDTESTmsclientlib STATIC ${M_MSCLIENT_DIR})
ADD_LIBRARY(PDfslib STATIC ${SOURCE_DIR}/fs/filesystem.cc ${FS_SOURCE_FILE})
ADD_LIBRARY(PDpbmsgslib STATIC ${M_PROTOBUF_DIR})

###################################################################################################
# Builds                                                                                          #
###################################################################################################
TARGET_LINK_LIBRARIES(perpetualdata PDmsclientlib PDmaidsafelib PDfslib PDpbmsgslib ${QT_LIBRARIES} ${MAIDSAFE_DHT_LIBRARY} ${UDT_LIBRARY} ${SYS_LIB})
TARGET_LINK_LIBRARIES(pdlocal PDTESTmsclientlib PDmaidsafelib PDfslib PDpbmsgslib ${QT_LIBRARIES} ${MAIDSAFE_DHT_LIBRARY} ${SYS_LIB})
TARGET_LINK_LIBRARIES(TESTmaidsafe PDmsclientlib PDmaidsafelib PDmsvaultlib PDfslib PDpbmsgslib ${QT_LIBRARIES} ${GTEST_LIBRARY} gmock ${MAIDSAFE_DHT_LIBRARY} ${UDT_LIBRARY} ${SYS_LIB})
TARGET_LINK_LIBRARIES(TESTpdvault PDmsclientlib PDmsvaultlib PDmaidsafelib PDfslib PDpbmsgslib ${QT_LIBRARIES} ${GTEST_LIBRARY} ${MAIDSAFE_DHT_LIBRARY} ${UDT_LIBRARY} ${SYS_LIB})
TARGET_LINK_LIBRARIES(TESTbph PDfslib PDmsclientlib PDmsvaultlib PDmaidsafelib PDpbmsgslib ${QT_LIBRARIES} ${GTEST_LIBRARY} ${MAIDSAFE_DHT_LIBRARY} ${UDT_LIBRARY} ${SYS_LIB})
TARGET_LINK_LIBRARIES(TESTnetworkclientcontroller PDmsclientlib  PDmsvaultlib PDmaidsafelib PDfslib PDpbmsgslib ${QT_LIBRARIES} ${GTEST_LIBRARY} ${MAIDSAFE_DHT_LIBRARY} ${UDT_LIBRARY} ${SYS_LIB})
TARGET_LINK_LIBRARIES(TESTfuncauth PDmsclientlib  PDmsvaultlib PDmaidsafelib PDfslib PDpbmsgslib ${QT_LIBRARIES} ${GTEST_LIBRARY} ${MAIDSAFE_DHT_LIBRARY} ${UDT_LIBRARY} ${SYS_LIB})
TARGET_LINK_LIBRARIES(TESTlocalclientcontroller PDTESTmsclientlib PDmaidsafelib PDfslib PDpbmsgslib ${QT_LIBRARIES} ${GTEST_LIBRARY} ${MAIDSAFE_DHT_LIBRARY} ${UDT_LIBRARY} ${SYS_LIB})
#TARGET_LINK_LIBRARIES(TESTfuse PDmsclientlib PDmaidsafelib PDmsvaultlib PDfslib PDpbmsgslib ${QT_LIBRARIES} ${GTEST_LIBRARY} ${MAIDSAFE_DHT_LIBRARY} ${UDT_LIBRARY} ${SYS_LIB})
TARGET_LINK_LIBRARIES(TESTfs PDmaidsafelib PDfslib ${QT_LIBRARIES} ${GTEST_LIBRARY} ${MAIDSAFE_DHT_LIBRARY} ${UDT_LIBRARY} ${SYS_LIB})
TARGET_LINK_LIBRARIES(testvault PDmsclientlib PDmsvaultlib PDmaidsafelib PDfslib PDpbmsgslib ${QT_LIBRARIES} ${MAIDSAFE_DHT_LIBRARY} ${UDT_LIBRARY} ${SYS_LIB})
TARGET_LINK_LIBRARIES(vault PDmsvaultlib PDmaidsafelib PDfslib PDpbmsgslib ${QT_LIBRARIES} ${MAIDSAFE_DHT_LIBRARY} ${UDT_LIBRARY} ${SYS_LIB})
#IF(WIN32)
#  SET(TARGET_PROPERTIES vault testvault TESTmaidsafe COMPILE_FLAGS ${CMAKE_CXX_FLAGS} --Wl,-subsystem,console)
#ENDIF(WIN32)

###################################################################################################
# Compiler and linker flags - after all targets declared                                          #
###################################################################################################
SET_TARGET_PROPERTIES(PDTESTmsclientlib PROPERTIES COMPILE_FLAGS -DLOCAL_PDVAULT)
SET_TARGET_PROPERTIES(TESTlocalclientcontroller PROPERTIES COMPILE_FLAGS -DLOCAL_PDVAULT)
SET(BUILD_SHARED_LIBS OFF)
IF(APPLE)
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DMAIDSAFE_APPLE -D_FORTIFY_SOURCE=2 -DOSX -DBSD -D__FreeBSD__=10 -D_FILE_OFFSET_BITS=64")
  SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -DDEBUG -pg -fprofile-arcs -ftest-coverage")
  SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -O2 -Wuninitialized")
ELSEIF(UNIX AND NOT APPLE)
  SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -DDEBUG -pg -fprofile-arcs -ftest-coverage")
  SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -O2 -Wuninitialized")
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DMAIDSAFE_POSIX -Wextra -Wall  -Wfloat-equal -Wlong-long -Wstrict-overflow=5 -Wredundant-decls -Wunused-function -Wunused-label -Wunused-parameter -Wunused-value -Wunused-variable -std=c++98 -ansi -D_FORTIFY_SOURCE=2 -fno-stack-protector -D_FILE_OFFSET_BITS=64")
  ##put libs in here that will have no chance of passing tests - 3rd party ONLY !!
  SET_TARGET_PROPERTIES(pdlocal perpetualdata PROPERTIES COMPILE_FLAGS -w)
ELSEIF(WIN32)
  IF(MSVC)
#    SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -DDEBUG") # -g -pg -fprofile-arcs -ftest-coverage")
#    SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -O2 -Wuninitialized")
#    SET(CMAKE_CXX_FLAGS -static -mthreads -D_GLIBCXX_USE_WCHAR_T -D_BIND_TO_CURRENT_VCLIBS_VERSION=1")

    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /DUNICODE /D_UNICODE /D_WIN32_WINDOWS /D_CONSOLE /D__MSVC__ /D__WIN32__ /DWIN32 /DMAIDSAFE_WIN32")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /DWIN32_LEAN_AND_MEAN /D_WIN32_WINNT=0x0501 /DNOMINMAX")
    # warning 4503 disabled due to excessive generation through use of Boost multi_index
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /wd4503")
    SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS} /DDEBUG")
  ELSE(MSVC)
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra -Wfloat-equal -Wlong-long -Wstrict-overflow=5 -D_FORTIFY_SOURCE=2 -fno-stack-protector -D_FILE_OFFSET_BITS=64")
    SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -DDEBUG") # -g -pg -fprofile-arcs -ftest-coverage")
    SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -O2 -Wuninitialized")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -I c:/usr/include -DMAIDSAFE_WIN32 -D_FORTIFY_SOURCE=2 -DWIN32_LEAN_AND_MEAN -D__MINGW__ -L c:/MinGW/lib/ -L c:/MinGW/mingw32/lib/ -static -mthreads -D_GLIBCXX_USE_WCHAR_T -DUNICODE -D_UNICODE -DWIN32 -D_WIN32_WINNT=0x0501")
    SET(CMAKE_EXE_LINKER_FLAGS "-Wl,--enable-auto-import")
    # SET(CMAKE_EXE_LINKER_FLAGS_DEBUG "${CMAKE_EXE_LINKER_FLAGS_DEBUG} -fprofile-arcs -ftest-coverage")
    SET_TARGET_PROPERTIES(pdlocal perpetualdata PROPERTIES COMPILE_FLAGS -w)
  ENDIF(MSVC)
ENDIF(APPLE)

###################################################################################################
# Tests                                                                                           #
###################################################################################################
INCLUDE(CTest)
SET(CTEST_CUSTOM_MAXIMUM_PASSED_TEST_OUTPUT_SIZE 50000)
SET(CTEST_CUSTOM_MAXIMUM_FAILED_TEST_OUTPUT_SIZE 50000)
SET(CTEST_CONTINUOUS_DURATION 600)
SET(CTEST_CONTINUOUS_MINIMUM_INTERVAL 60)
SET(CTEST_START_WITH_EMPTY_BINARY_DIRECTORY true)
IF(NOT ${MAIDSAFE_TEST_TYPE} MATCHES "BEH")
  ADD_TEST(Testnetworkclientcontroller ${EXECUTABLE_OUTPUT_PATH}/TESTnetworkclientcontroller)
  ADD_TEST(Testlocalclientcontroller ${EXECUTABLE_OUTPUT_PATH}/TESTlocalclientcontroller)
  ADD_TEST(Testpdvault ${EXECUTABLE_OUTPUT_PATH}/TESTpdvault)
  ADD_TEST(Testbph ${EXECUTABLE_OUTPUT_PATH}/TESTbph)
  ADD_TEST(Testnetworkauthentication ${EXECUTABLE_OUTPUT_PATH}/TESTfuncauth)
  SET_PROPERTY(TEST Testnetworkclientcontroller PROPERTY TIMEOUT 7201)
  SET_PROPERTY(TEST Testlocalclientcontroller PROPERTY TIMEOUT 7201)
  SET_PROPERTY(TEST Testpdvault PROPERTY TIMEOUT 3600)
  SET_PROPERTY(TEST Testbph PROPERTY TIMEOUT 3600)
  SET_PROPERTY(TEST Testnetworkauthentication PROPERTY TIMEOUT 3600)
  SET_PROPERTY(TEST Testnetworkclientcontroller PROPERTY LABELS Functional ClientController Network)
  SET_PROPERTY(TEST Testlocalclientcontroller PROPERTY LABELS Functional ClientController Local)
  SET_PROPERTY(TEST Testpdvault PROPERTY LABELS Functional PdVault)
  SET_PROPERTY(TEST Testbph PROPERTY LABELS Functional BufferPacketHandler)
  SET_PROPERTY(TEST Testnetworkauthentication PROPERTY LABELS Functional Authentication)
  IF(PYTHONINTERP_FOUND)
    IF(UNIX)
      ADD_TEST(STYLE_CHECK ${SOURCE_DIR}/cpplint.py ${STYLE_MAIDSAFE})
      SET_PROPERTY(TEST STYLE_CHECK PROPERTY LABELS Functional CodingStyle)
    ELSE(UNIX)
      ADD_TEST(STYLE_CHECK finderrorsall.bat)
      SET_PROPERTY(TEST STYLE_CHECK PROPERTY LABELS Functional CodingStyle)
    ENDIF(UNIX)
  ENDIF(PYTHONINTERP_FOUND)
ENDIF()

IF(UNIX)
	SET(MAID_TEST_PATH ${EXECUTABLE_OUTPUT_PATH}TESTmaidsafe)
ELSE(UNIX)
	SET(MAID_TEST_PATH ${EXECUTABLE_OUTPUT_PATH}TESTmaidsafe.exe)
ENDIF(UNIX)

IF(EXISTS ${MAID_TEST_PATH})
  FOREACH(TEST_EXECUTABLE TESTmaidsafe)
    EXECUTE_PROCESS(COMMAND ${EXECUTABLE_OUTPUT_PATH}/${TEST_EXECUTABLE} --gtest_list_tests OUTPUT_VARIABLE maid_tests)
    STRING(REPLACE "\n" "" test_string "${maid_tests}")
    IF(CACHED_MAID_TESTS)
      IF (test_string MATCHES ${CACHED_MAID_TESTS})
        SET(RUN_DUPLICATE_CHECK OFF)
      ELSE()
        SET(RUN_DUPLICATE_CHECK ON)
        SET(CACHED_MAID_TESTS "${test_string}" CACHE INTERNAL "All Tests" FORCE)
      ENDIF()
    ELSE()
      SET(RUN_DUPLICATE_CHECK ON)
      SET(CACHED_MAID_TESTS "${test_string}" CACHE INTERNAL "All Tests" FORCE)
    ENDIF()
    IF(WIN32)
      STRING(REPLACE "\n" ";" maid_tests "${maid_tests}")
      STRING(REPLACE " " "" maid_tests "${maid_tests}")
    ELSE(WIN32)
      STRING(REPLACE "\n" ";" maid_tests "${maid_tests}")
      STRING(REPLACE " " "" maid_tests "${maid_tests}")
      STRING(REPLACE " " ";" TEST_EXECUTABLE "${TEST_EXECUTABLE}")
    ENDIF(WIN32)
    FOREACH(tst ${maid_tests})
      IF(NOT "${tst}" MATCHES [_])
        STRING(REGEX REPLACE "Test" "" label_name ${tst})
        STRING(REPLACE "." "" label_name ${label_name})
      ENDIF()
      IF(NOT "${tst}" MATCHES "(profiling).+" AND NOT "${tst}" MATCHES "Mergemismatchforsummaries+")
        IF(NOT "${tst}" MATCHES "(\\.$)")
          IF("${tst}" MATCHES "(${MAIDSAFE_TEST_TYPE}).+")
            SET(copy_of_all_tests all_tests)
            LIST(FIND ${copy_of_all_tests} ${tst} repeat)
            IF(NOT ${repeat} EQUAL -1)
              SET(repeated_tests ${repeated_tests} ${tst})
            ENDIF()
            SET(all_tests ${all_tests} ${tst})
            ADD_TEST(${tst}    ${EXECUTABLE_OUTPUT_PATH}/${TEST_EXECUTABLE}   --gtest_filter=*${tst}*)
            IF("${tst}" MATCHES "^FUNC_" OR "${tst}" MATCHES "^DISABLED_FUNC_")
              SET_PROPERTY(TEST ${tst} PROPERTY LABELS Functional ${label_name})
              SET_PROPERTY(TEST ${tst} PROPERTY TIMEOUT 600)
            ELSEIF("${tst}" MATCHES "^BEH_" OR "${tst}" MATCHES "^DISABLED_BEH_")
              SET_PROPERTY(TEST ${tst} PROPERTY LABELS Behavioural ${label_name})
              SET_PROPERTY(TEST ${tst} PROPERTY TIMEOUT 60)
            ELSE()
              MESSAGE("")
              MESSAGE("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
              MESSAGE("")
              MESSAGE(AUTHOR_WARNING "${tst} should be named \"BEH_...\" or \"FUNC_...\" (with an optional \"DISABLED_\" prepended).")
              MESSAGE("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
            ENDIF()
            #MESSAGE("${tst}   ${TEST_EXECUTABLE}   --gtest_filter=*${tst}*   ${label_name}")
#            SET(check_for_repeats_list ${check_for_repeats_list} ${tst})
            IF(${RUN_DUPLICATE_CHECK})
              UNSET(repeated_tests CACHE)
              EXECUTE_PROCESS(COMMAND ${EXECUTABLE_OUTPUT_PATH}/${TEST_EXECUTABLE} --gtest_list_tests --gtest_filter=*${tst}* OUTPUT_VARIABLE repeateds)
              STRING(REGEX MATCHALL "\n" repeats ${repeateds})
              LIST(LENGTH repeats count)
              IF(count GREATER 2)
                SET(repeated_tests ${repeated_tests} ${tst})
              ENDIF()
            ENDIF()
          ENDIF()
        ENDIF()
      ENDIF()
    ENDFOREACH()
#    FOREACH(current_check ${check_for_repeats_list})
#      FOREACH(check_for_repeats ${check_for_repeats_list})
#        STRING(REGEX MATCH ${current_check} check_for_repeats_result ${check_for_repeats})
#        IF((NOT ${current_check} MATCHES ${check_for_repeats}) AND (check_for_repeats_result))
#          SET(repeated_tests ${repeated_tests} ${current_check})
#        ENDIF()
#      ENDFOREACH()
#    ENDFOREACH()
  ENDFOREACH()
ELSE()
  MESSAGE("")
  MESSAGE("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
  MESSAGE("")
  MESSAGE(WARNING "Cannot find ${MAID_TEST_PATH}\nRun cmake again after make to pick up tests.")
  MESSAGE("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
ENDIF()

#ADD_TEST(Testfuse ${EXECUTABLE_OUTPUT_PATH}/TESTfuse)
IF(NOT CMAKE_SUPPRESS_DEVELOPER_WARNINGS)
  IF(DEFINED repeated_tests)
    UNSET(CACHED_MAID_TESTS CACHE)
    SET(WARNING_MESSAGE "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
    FOREACH(var ${repeated_tests})
      SET(WARNING_MESSAGE "${WARNING_MESSAGE}\nRepeated test name - ${var}")
    ENDFOREACH()
    SET(WARNING_MESSAGE "${WARNING_MESSAGE}\n!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
    MESSAGE(AUTHOR_WARNING ${WARNING_MESSAGE})
  MESSAGE("================================================================================")
  ENDIF()
ENDIF()

SET(DART_TESTING_TIMEOUT 2400 CACHE INTERNAL "Maximum time allowed before CTest will kill the test.")
IF(UNIX)
  SET(MEMORYCHECK_COMMAND "/usr/bin/valgrind --show-reachable=no")
ENDIF(UNIX)

###################################################################################################
# Adding the install targets                                                                      #
###################################################################################################
MESSAGE("")
MESSAGE("Package version is set to \"${pddate}\"")
MESSAGE("================================================================================")
MESSAGE("")
MESSAGE("Tests included: \"${MAIDSAFE_TEST_TYPE}\"")
MESSAGE("")
MESSAGE("    To include all tests,                     cmake ../.. -DMAIDSAFE_TEST_TYPE=_")
MESSAGE("    To include behavioural tests,           cmake ../.. -DMAIDSAFE_TEST_TYPE=BEH")
MESSAGE("    To include functional tests,           cmake ../.. -DMAIDSAFE_TEST_TYPE=FUNC")
MESSAGE("================================================================================")
MESSAGE("")
MESSAGE("Build type is set to \"${CMAKE_BUILD_TYPE}\"")
MESSAGE("")
MESSAGE("    To alter this (e.g. to Debug),          cmake ../.. -DCMAKE_BUILD_TYPE=Debug")
MESSAGE("    Options are Release, Debug, RelWithDebInfo, MinSizeRel")
MESSAGE("================================================================================")
MESSAGE("")

# BitRock InstallBuilder
IF(APPLE)
  add_custom_target(installer ALL "/Applications/BitRock\ InstallBuilder\ Enterprise\ 6.2.6/autoupdate/bin/.customize.app/Contents/MacOS/installbuilder.sh" build ${SOURCE_DIR}/installerfiles/autoup.xml
                    COMMAND "/Applications/BitRock\ InstallBuilder\ Enterprise\ 6.2.6/bin/Builder.app/Contents/MacOS/installbuilder.sh" build ${SOURCE_DIR}/installerfiles/pd.xml
                    DEPENDS perpetualdata vault)
ENDIF(APPLE)
IF(WIN32)
  add_custom_target(installer ALL "/Applications/BitRock\ InstallBuilder\ Enterprise\ 6.2.6/autoupdate/bin/.customize.app/Contents/MacOS/installbuilder.sh" build ${SOURCE_DIR}/installerfiles/autoup.xml
                    COMMAND "c:/Program Files/InstallBuilder/bin/builder.exe" ${SOURCE_DIR}/pd.xml
                    DEPENDS perpetualdata vault)
ENDIF(WIN32)
IF(UNIX AND NOT APPLE)
  add_custom_target(installer "~/installbuilder-6.3.0/autoupdate/bin/customize.bin" build ${SOURCE_DIR}/installerfiles/autoup.xml
                    COMMAND ALL "~/installbuilder-6.3.0/bin/builder" build ${SOURCE_DIR}/pd.xml
                    DEPENDS perpetualdata vault)
ENDIF(UNIX AND NOT APPLE)
