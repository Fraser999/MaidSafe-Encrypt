#LyX 1.6.7 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass IEEEtran
\use_default_options false
\language british
\inputencoding default
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_title "Autonomous Network"
\pdf_author "David Irvine, Fraser Hutchison, Steve Mücklisch"
\pdf_subject "Autonomous Network"
\pdf_keywords "security, freedom, privacy, authentication, encryption, autonomous"
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder true
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry false
\use_amsmath 0
\use_esint 0
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 2
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Title
Autonomous Network
\end_layout

\begin_layout Author
David Irvine, email: david.irvine@maidsafe.net, LifeStuff: David, Fraser Hutchison
, Steve Mücklisch
\end_layout

\begin_layout Right Address
maidsafe.net limited (registered in Scotland Sc 297540)
\end_layout

\begin_layout Date
September, 2010
\end_layout

\begin_layout Abstract
Autonomous networks are self-healing, self-managing and most importantly
 independent of human interference.
 Such networks will be able to be developed in a way that avoids wasting
 effort on maintaining even simple mechanisms such as storage, scalability
 and data retention.
 Systems like these will quickly extend to providing a method of highly
 scalable platforms that can accommodate real time transactional logic.
 A working example of an autonomous network is outlined in this paper.
\end_layout

\begin_layout Keywords
security, freedom, privacy, authentication, encryption, autonomous
\end_layout

\begin_layout MarkBoth
maidsafe.net limited company confidential Version 0.1
\begin_inset ERT
status open

\begin_layout Plain Layout

}{
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset FloatList table

\end_inset


\end_layout

\begin_layout Standard
\begin_inset FloatList figure

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
PARstart{C}{omputing}
\end_layout

\end_inset

 capability has dramatically increased in recent years, particularly in
 terms of processing power and available inter-connectivity of devices via
 the Internet.
 This has allowed the creation of remarkable technology that would have
 been considered 
\begin_inset Quotes eld
\end_inset

space age
\begin_inset Quotes erd
\end_inset

 or the works of a science fiction writer until comparatively recently.
 Devices and applications that allow world mapping, video conferencing on
 the move, instant recording and sharing of nearly any type of information
 from text to high definition video, the ability to know where you are anywhere
 in the world and to locate friends, information and tools to help calculate
 results of questions is all without doubt amazing.
 
\end_layout

\begin_layout Standard
There is a huge downside though; and that is the ability to store such data
 in secure, accessible and reliable locations without the requirement for
 human organization.
 Today's cloud computing paradigm is an attempt to deliver such a system,
 but does so in a manner that is more hype than fact.
 Actually, today's cloud computing is the antithesis of actual or true cloud
 computing and is merely a marketing attempt to persuade us that an autonomous
 network has been created.
 
\end_layout

\begin_layout Standard
This paper delivers a true platform for cloud computing, that ensures human
 intervention is forbidden and in fact circumvents any attempts to manipulate
 data or processes.
\end_layout

\begin_layout Standard
 
\end_layout

\begin_layout Subsection
Prerequisites 
\end_layout

\begin_layout Standard
Prior to reading this paper, it is highly advisable that the reader fully
 understand 
\emph on
Self Encrypting Data 
\begin_inset CommandInset citation
LatexCommand cite
key "1"

\end_inset

 
\emph default
and
\emph on
 Peer to Peer Public Key Infrastructure 
\begin_inset CommandInset citation
LatexCommand cite
key "2"

\end_inset

.
 
\emph default
These papers detail some components that will be used with the system presented
 in this paper; in fact the Public Key Infrastructure (PKI) described in
 
\emph on
Peer to Peer Public Key Infrastructure 
\begin_inset CommandInset citation
LatexCommand cite
key "2"

\end_inset

 
\emph default
is a fundamental requirement of the autonomous network presented here.
\end_layout

\begin_layout Subsection
General Conventions
\end_layout

\begin_layout Standard
There is scope for confusion when using the term 
\begin_inset Quotes eld
\end_inset

key
\begin_inset Quotes erd
\end_inset

, as sometimes it refers to a cryptographic key, and at other times it is
 in respect to the key of a DHT 
\begin_inset Quotes eld
\end_inset

key, value
\begin_inset Quotes erd
\end_inset

 pair.
 In order to avoid confusion, cryptographic private and public keys will
 be referred to as 
\begin_inset Formula $\mathsf{K_{priv}}$
\end_inset

 and 
\begin_inset Formula $\mathsf{K_{pub}}$
\end_inset

 respectively, and DHT keys simply as keys.
\end_layout

\begin_layout Itemize
Node ≡ a network resource which is a process, sometimes referred to as a
 vault in other papers.
 This is the computer program that maintains the network and on its own
 is not very special.
 It is in collaboration that this Node becomes part of a very complex, sophistic
ated and efficient network.
\end_layout

\begin_layout Itemize
\begin_inset Formula $\mathsf{H}$
\end_inset

 ≡ Hash function such as SHA, MD5, etc.
 
\end_layout

\begin_layout Itemize
\begin_inset Formula $\mathsf{PBKDF2_{[Passphrase][Salt][IterCount]}}$
\end_inset

 ≡ Password-Based Key Derivation Function or similar
\end_layout

\begin_layout Itemize
\begin_inset Formula $\mathsf{XXX_{priv}}$
\end_inset

, 
\begin_inset Formula $\mathsf{XXX_{pub}}$
\end_inset

 ≡ Private and public keys respectively of cryptographic key pair named
 
\begin_inset Formula $\mathsf{XXX}$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $\mathsf{AsymEnc_{[K_{pub}]}(Data)}$
\end_inset

 ≡ Asymmetrically encrypt 
\begin_inset Formula $\mathsf{Data}$
\end_inset

 using 
\begin_inset Formula $\mathsf{K_{pub}}$
\end_inset

 
\end_layout

\begin_layout Itemize
\begin_inset Formula $\mathsf{AsymDec_{[K_{priv}]}(Data)}$
\end_inset

 ≡ Asymmetrically decrypt 
\begin_inset Formula $\mathsf{Data}$
\end_inset

 using 
\begin_inset Formula $\mathsf{K_{priv}}$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $\mathsf{Sig{}_{[K_{priv}]}(Data)}$
\end_inset

 ≡ Create asymmetric signature of 
\begin_inset Formula $\mathsf{Data}$
\end_inset

 using 
\begin_inset Formula $\mathsf{K_{priv}}$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $\mathsf{+}$
\end_inset

 ≡ Concatenation
\end_layout

\begin_layout Subsection
Specific Conventions
\end_layout

\begin_layout Subsubsection
Network Identities
\end_layout

\begin_layout Standard
In 
\emph on
Peer to Peer Public Key Infrastructure
\emph default
 
\begin_inset CommandInset citation
LatexCommand cite
key "2"

\end_inset

, the ability to create cryptographic key pairs that are both secure and
 mathematically deduced is shown.
 Several of these cryptographic key pairs with specific roles are introduced
 here, as well as additional system-specific components:
\end_layout

\begin_layout Itemize
\noindent
DHT: This paper assumes the use of a key addressable network, and in this
 case a Kademlia Distributed Hash Table (DHT) is assumed.
 There is no requirement for this to be restrictive in any way.
 The DHT can be replaced with any key addressable network.
 It is also assumed there is no issue with Network Address Translation (NAT)
 and all Nodes can freely communicate.
 In this paper, it is assumed all cryptographic keys are signed on the system
 and only the signatory identity may amend or delete a value.
 There may be rules as to which identity can store certain information in
 specific locations.
 Such an implementation can be found at http://code.google.com/p/maidsafe-dht
 This implements a Kademlia-based network and is described in 
\emph on
MaidSafe Distributed Hash Table
\emph default
 
\begin_inset CommandInset citation
LatexCommand cite
key "3"

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $\mathsf{K}$
\end_inset

 ≡ The DHT replication factor.
\end_layout

\begin_layout Itemize
\begin_inset Formula $\mathsf{ANMAID}$
\end_inset

 ≡ The (ANonymous Maidsafe Anonymous IDentification) packet is the root
 of a chain that reaches as far as the 
\begin_inset Formula $\mathsf{PMID}$
\end_inset

 (below).
 This is a pure packet, which means that the identity is created as 
\begin_inset Formula $\mathsf{H(ANMAID_{pub}+Sig_{[ANMAID_{priv}]}(ANMAID_{pub}))}$
\end_inset

.
 This identity is never stored on the network, thereby even something encrypted
 with this public key is not on the network at all.
 It is assumed that this identity is otherwise maintained securely by a
 system such as that described in 
\emph on
maidsafe: A new network paradigm
\emph default
 
\begin_inset CommandInset citation
LatexCommand cite
key "4"

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $\mathsf{MAID}$
\end_inset

 ≡ The (Maidsafe Anonymous IDentification) packet has as its identity 
\begin_inset Formula $\mathsf{H(MAID_{pub}+Sig_{[ANMAID_{priv}]}(MAID_{pub}))}$
\end_inset

.
 This packet is stored on the network with its identity as the key (as described
 in 
\emph on
Peer to Peer Public Key Infrastructure
\emph default
 
\begin_inset CommandInset citation
LatexCommand cite
key "2"

\end_inset

).
 The 
\begin_inset Formula $\mathsf{MAID}$
\end_inset

 can be used by another Node or component (even a person) to act on the
 network with the same authority which the 
\begin_inset Formula $\mathsf{PMID}$
\end_inset

 has.
 This is an important distinction from many other such systems.
 The 
\begin_inset Formula $\mathsf{ANMAID}$
\end_inset

 is the revocation key for this identity.
 
\end_layout

\begin_layout Itemize
\begin_inset Formula $\mathsf{PMID}$
\end_inset

 ≡ The (Proxy Maidsafe IDentification) packet has as its identity 
\begin_inset Formula $\mathsf{H(PMID_{pub}+Sig_{[MAID_{priv}]}(PMID_{pub}))}$
\end_inset

.
 The 
\begin_inset Formula $\mathsf{PMID_{priv}}$
\end_inset

 has to be stored on the machine that runs the Node process.
 This is a potential security risk and therefore the system requires that
 the 
\begin_inset Formula $\mathsf{PMID}$
\end_inset

 identity be restricted in capability as far as possible.
 The 
\begin_inset Formula $\mathsf{MAID}$
\end_inset

 is the revocation key for this identity.
\end_layout

\begin_layout Subsubsection
Storing and Deleting Encrypted Data Chunks
\end_layout

\begin_layout Standard
The process for storing chunks of data is described in more detail at 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Storing-a-Chunk"

\end_inset

.
 However, the storing process essentially involves a group of Nodes brokering
 a deal between the requesting Node (called the client) and the responding
 Node (called the vault).
 The deal is validated by means of a 
\begin_inset Formula $\mathsf{StoreContract}$
\end_inset

 which contains an 
\begin_inset Formula $\mathsf{InnerContract}$
\end_inset

 which itself contains a 
\begin_inset Formula $\mathsf{SignedSize}$
\end_inset

 as detailed below.
 Deleting a chunk also involves a 
\begin_inset Formula $\mathsf{SignedSize}$
\end_inset

.
\end_layout

\begin_layout Itemize
\begin_inset Formula $\mathsf{SignedSize}$
\end_inset

 is a serialisable data object containing:
\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset Formula $\mathsf{ChunkSize}$
\end_inset

 in bytes
\end_layout

\begin_layout Enumerate
\begin_inset Formula $\mathsf{Sig_{[PMID_{priv}]}(ChunkSize)}$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $\mathsf{PMID}$
\end_inset

 identity
\end_layout

\begin_layout Enumerate
\begin_inset Formula $\mathsf{PMID_{pub}}$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $\mathsf{Sig_{[MAID_{priv}]}(PMID_{pub})}$
\end_inset


\end_layout

\begin_layout Standard
In the case of storing a chunk, the 
\begin_inset Formula $\mathsf{PMID}$
\end_inset

 is owned by the client; for deleting a chunk, it is owned by a Chunk Info
 Holder (covered below).
\end_layout

\end_deeper
\begin_layout Itemize
\begin_inset Formula $\mathsf{InnerContract}$
\end_inset

 is serialisable data object containing:
\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset Formula $\mathsf{ACK}$
\end_inset

 || 
\begin_inset Formula $\mathsf{NACK}$
\end_inset

 (agreement to deal)
\end_layout

\begin_layout Enumerate
\begin_inset Formula $\mathsf{SignedSize}$
\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
\begin_inset Formula $\mathsf{StoreContract}$
\end_inset

 is a serialisable data object containing:
\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset Formula $\mathsf{InnerContract}$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $\mathsf{Sig_{[PMID_{priv}]}(InnerContract)}$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $\mathsf{PMID}$
\end_inset

 identity
\end_layout

\begin_layout Enumerate
\begin_inset Formula $\mathsf{PMID_{pub}}$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $\mathsf{Sig_{[MAID_{priv}]}(PMID_{pub})}$
\end_inset


\end_layout

\begin_layout Standard
In the case of storing or deleting a chunk, the 
\begin_inset Formula $\mathsf{PMID}$
\end_inset

 is owned by the vault.
\end_layout

\end_deeper
\begin_layout Section
Overview
\end_layout

\begin_layout Standard
The answer to the current issues as described in 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Current-situation"

\end_inset

 is to redesign networks to require no central control and by implication,
 no servers as we currently know them, whether centralised or distributed.
 To achieve this there are several important requirements:
\end_layout

\begin_layout Enumerate
Encryption of data units to a very high level.
 This is described in 
\emph on
Self Encrypting Data
\emph default
 
\begin_inset CommandInset citation
LatexCommand cite
key "1"

\end_inset

.
\end_layout

\begin_layout Enumerate
A method of validation of Nodes as described in
\emph on
 Peer to Peer Public Key Infrastructure
\emph default
 
\begin_inset CommandInset citation
LatexCommand cite
key "2"

\end_inset

.
\end_layout

\begin_layout Enumerate
The ability to randomly select Nodes based on a mathematically distributed
 algorithm that can identify groups of Nodes to act as independent certification
 for network actions (and in some cases arbitration).
\end_layout

\begin_layout Enumerate
A method of distributed and verifiable measurement of a Node's capability.
\end_layout

\begin_layout Enumerate
A system of distribution of data to ensure geographic protection of replicated
 information.
\begin_inset Foot
status open

\begin_layout Plain Layout
Here we assume replication as opposed to forward error correction.
 This is a debate in computer science and may rage on for a while.
 In this paper we assume a more binary approach to data safety, it is either
 secure or not as opposed to possibly secure in the forward error correction
 model.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
One improvement, but not requirement, is the application of a ranking system
 to allow a granular approach to Node capability and therefore 
\emph on
cost
\emph default
 to the network.
 
\end_layout

\begin_layout Standard
The thinking involved in such a system is very similar to the thought process
 behind Kademlia itself in many ways.
 It is also apparently simple at first glance, but much more complex when
 deriving the detail and particularly when considering alterations to logic
 and the consequences of such.
 
\end_layout

\begin_layout Section
Components
\end_layout

\begin_layout Subsection
Kademlia Component 
\end_layout

\begin_layout Subsubsection
Knode
\end_layout

\begin_layout Standard
Each Node on the network has an instance of a Kademlia node (knode) running.
 Kademlia is mainly used as the means of finding peers, not for actually
 storing/retrieving data; this is left to another layer that acts as an
 overlay to the DHT overlay network itself.
 
\end_layout

\begin_layout Subsubsection
Kademlia RPCs
\end_layout

\begin_layout Standard
Please see 
\begin_inset CommandInset ref
LatexCommand prettyref
reference "tab:Kademlia-RPCs"

\end_inset

.
 
\end_layout

\begin_layout Standard
\begin_inset Float table
wide true
sideways false
status open

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="8" columns="4">
<features>
<column alignment="center" valignment="middle" width="13mm">
<column alignment="center" valignment="middle" width="55mm">
<column alignment="center" valignment="middle" width="30mm">
<column alignment="center" valignment="middle" width="70mm">
<row endhead="true" endfirsthead="true">
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\noun on
RPC Name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\noun on
Request Fields
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\noun on
Response Fields
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\noun on
Purpose
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ping
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\mathsf{Ping}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\mathsf{ACK}$
\end_inset

 || 
\begin_inset Formula $\mathsf{NACK}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Check peer is connected.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
FindValue
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\mathsf{Key}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\mathsf{SignedValue}$
\end_inset

 (repeated)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Get all values stored under 
\begin_inset Formula $\mathsf{Key}$
\end_inset

.
\end_layout

\end_inset
</cell>
</row>
<row endhead="true" endfirsthead="true">
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
FindNode
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\mathsf{Key}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\mathsf{NodeContactDetails}$
\end_inset

 (repeated)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Find 
\begin_inset Formula $\mathsf{K}$
\end_inset

 closest Nodes to 
\begin_inset Formula $\mathsf{Key}$
\end_inset

.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Store
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\mathsf{Key}$
\end_inset

, 
\begin_inset Formula $\mathsf{SignedValue}$
\end_inset

, 
\begin_inset Formula $\mathsf{TTL}$
\end_inset

, 
\begin_inset Formula $\mathsf{RequestSignature}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\mathsf{ACK}$
\end_inset

 || 
\begin_inset Formula $\mathsf{NACK}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Store 
\begin_inset Formula $\mathsf{SignedValue}$
\end_inset

 under 
\begin_inset Formula $\mathsf{Key}$
\end_inset

 for duration of 
\begin_inset Formula $\mathsf{TTL}$
\end_inset

.
 
\begin_inset Formula $\mathsf{RequestSignature}$
\end_inset

 allows validation of ID of requester.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Delete
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\mathsf{Key}$
\end_inset

, 
\begin_inset Formula $\mathsf{SignedValue}$
\end_inset

, 
\begin_inset Formula $\mathsf{RequestSignature}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\mathsf{ACK}$
\end_inset

 || 
\begin_inset Formula $\mathsf{NACK}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Delete 
\begin_inset Formula $\mathsf{SignedValue}$
\end_inset

 under 
\begin_inset Formula $\mathsf{Key}$
\end_inset

.
 
\begin_inset Formula $\mathsf{RequestSignature}$
\end_inset

 allows validation of ID of requester.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Update
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\mathsf{Key}$
\end_inset

, 
\begin_inset Formula $\mathsf{OriginalSignedValue}$
\end_inset

, 
\begin_inset Formula $\mathsf{NewSignedValue}$
\end_inset

, 
\begin_inset Formula $\mathsf{TTL}$
\end_inset

, 
\begin_inset Formula $\mathsf{RequestSignature}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\mathsf{ACK}$
\end_inset

 || 
\begin_inset Formula $\mathsf{NACK}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Update 
\begin_inset Formula $\mathsf{OriginalSignedValue}$
\end_inset

 under 
\begin_inset Formula $\mathsf{Key}$
\end_inset

 with 
\begin_inset Formula $\mathsf{NewSignedValue}$
\end_inset

 for duration of 
\begin_inset Formula $\mathsf{TTL}$
\end_inset

.
 
\begin_inset Formula $\mathsf{RequestSignature}$
\end_inset

 allows validation of ID of requester.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="middle" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DownList
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\mathsf{NodeContactDetails}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\mathsf{ACK}$
\end_inset

 || 
\begin_inset Formula $\mathsf{NACK}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Suggest removing Node from routing table.
 Confirm Node is disconnected by sending Ping to Node before removal.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Kademlia RPCs
\begin_inset CommandInset label
LatexCommand label
name "tab:Kademlia-RPCs"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Overlay Component
\end_layout

\begin_layout Subsubsection
Node
\end_layout

\begin_layout Standard
Nodes are run as a separate process and largely manage themselves.
 At the moment, when the software is installed and run, a daemon / service
 runs which starts an "unowned" Node.
 This listens on the local network for owner control RPCs.
\end_layout

\begin_layout Subsubsection
Node RPCs
\end_layout

\begin_layout Standard
Please see Tables 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Node-RPCs-(ChunkManagement)"

\end_inset

 - 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Node-RPCs-(Miscellaneous)"

\end_inset

 on pages 
\begin_inset CommandInset ref
LatexCommand pageref
reference "tab:Node-RPCs-(ChunkManagement)"

\end_inset

 - 
\begin_inset CommandInset ref
LatexCommand pageref
reference "tab:Node-RPCs-(Miscellaneous)"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
wide true
sideways false
status open

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="8" columns="4">
<features>
<column alignment="center" valignment="middle" width="28mm">
<column alignment="center" valignment="middle" width="50mm">
<column alignment="center" valignment="middle" width="25mm">
<column alignment="center" valignment="middle" width="65mm">
<row>
<cell alignment="center" valignment="middle" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\noun on
RPC
\end_layout

\begin_layout Plain Layout

\series bold
\noun on
Name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\noun on
Request Fields
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\noun on
Response Fields
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\noun on
Purpose
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
StorePrep
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\mathsf{ChunkName}$
\end_inset

, 
\begin_inset Formula $\mathsf{SignedSize}$
\end_inset

, 
\begin_inset Formula $\mathsf{RequestSignature}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\mathsf{StoreContract}$
\end_inset

, 
\begin_inset Formula $\mathsf{ResponseSignature}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Make initial agreement between client and vault to store data chunk.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
StoreChunk
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\mathsf{ChunkName}$
\end_inset

, 
\begin_inset Formula $\mathsf{Data}$
\end_inset

, 
\begin_inset Formula $\mathsf{PMID}$
\end_inset

, 
\begin_inset Formula $\mathsf{PMID_{pub}}$
\end_inset

, 
\begin_inset Formula $\mathsf{Sig_{[MAID_{priv}]}(PMID_{pub})}$
\end_inset

, 
\begin_inset Formula $\mathsf{RequestSignature}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\mathsf{ACK}$
\end_inset

 || 
\begin_inset Formula $\mathsf{NACK}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Store data chunk.
 
\begin_inset Formula $\mathsf{PMID}$
\end_inset

 belongs to client.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
GetChunk
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\mathsf{ChunkName}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\mathsf{ACK}$
\end_inset

 || 
\begin_inset Formula $\mathsf{NACK}$
\end_inset

, 
\begin_inset Formula $\mathsf{Data}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Get data chunk.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CheckChunk
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\mathsf{ChunkName}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\mathsf{ACK}$
\end_inset

 || 
\begin_inset Formula $\mathsf{NACK}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Check if the recipient has the chunk.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DeleteChunk
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\mathsf{ChunkName}$
\end_inset

,
\begin_inset Formula $\mathsf{SignedSize}$
\end_inset

, 
\begin_inset Formula $\mathsf{RequestSignature}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\mathsf{ACK}$
\end_inset

 || 
\begin_inset Formula $\mathsf{NACK}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Delete data chunk.
 
\begin_inset Formula $\mathsf{RequestSignature}$
\end_inset

formed using Chunk Info Holder's PMID.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ValidityCheck
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\mathsf{ChunkName}$
\end_inset

, 
\begin_inset Formula $\mathsf{RandomData}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\mathsf{ACK}$
\end_inset

 || 
\begin_inset Formula $\mathsf{NACK}$
\end_inset

, 
\begin_inset Formula $\mathsf{HashContent}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ensure data chunk is uncorrupted.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="middle" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CacheChunk
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\mathsf{ChunkName}$
\end_inset

, 
\begin_inset Formula $\mathsf{Data}$
\end_inset

, 
\begin_inset Formula $\mathsf{PMID}$
\end_inset

, 
\begin_inset Formula $\mathsf{PMID_{pub}}$
\end_inset

, 
\begin_inset Formula $\mathsf{Sig_{[MAID_{priv}]}(PMID_{pub})}$
\end_inset

, 
\begin_inset Formula $\mathsf{RequestSignature}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\mathsf{ACK}$
\end_inset

 || 
\begin_inset Formula $\mathsf{NACK}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="middle" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Cache data chunk.
 
\begin_inset Formula $\mathsf{PMID}$
\end_inset

 belongs to client.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Node RPCs (Chunk Management)
\begin_inset CommandInset label
LatexCommand label
name "tab:Node-RPCs-(ChunkManagement)"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
wide true
sideways false
status open

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="4">
<features>
<column alignment="center" valignment="middle" width="28mm">
<column alignment="center" valignment="middle" width="50mm">
<column alignment="center" valignment="middle" width="25mm">
<column alignment="center" valignment="middle" width="65mm">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\noun on
RPC
\end_layout

\begin_layout Plain Layout

\series bold
\noun on
Name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\noun on
Request Fields
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\noun on
Response Fields
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\noun on
Purpose
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
GetChunkReferences
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\mathsf{ChunkName}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\mathsf{ACK}$
\end_inset

 || 
\begin_inset Formula $\mathsf{NACK}$
\end_inset

, 
\begin_inset Formula $\mathsf{Refs}$
\end_inset

(repeated)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Get Node IDs of holders of data chunk.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
AddToWatchList
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\mathsf{ChunkName}$
\end_inset

,
\begin_inset Formula $\mathsf{SignedSize}$
\end_inset

, 
\begin_inset Formula $\mathsf{RequestSignature}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\mathsf{ACK}$
\end_inset

 || 
\begin_inset Formula $\mathsf{NACK}$
\end_inset

, 
\begin_inset Formula $\mathsf{UploadCount}$
\end_inset

, 
\begin_inset Formula $\mathsf{TotalPayment}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Request to be added to the list of watchers for data chunk.
 
\begin_inset Formula $\mathsf{RequestSignature}$
\end_inset

 formed using client's PMID.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
RemoveFromWatchList
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\mathsf{ChunkName}$
\end_inset

, 
\begin_inset Formula $\mathsf{PMID}$
\end_inset

, 
\begin_inset Formula $\mathsf{PMID_{pub}}$
\end_inset

, 
\begin_inset Formula $\mathsf{Sig_{[MAID_{priv}]}(PMID_{pub})}$
\end_inset

, 
\begin_inset Formula $\mathsf{RequestSignature}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\mathsf{ACK}$
\end_inset

 || 
\begin_inset Formula $\mathsf{NACK}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Request to be removed from the list of watchers for data chunk.
 
\begin_inset Formula $\mathsf{RequestSignature}$
\end_inset

 formed using client's PMID.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
AddToReferenceList
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\mathsf{ChunkName}$
\end_inset

, 
\begin_inset Formula $\mathsf{StoreContract}$
\end_inset

, 
\begin_inset Formula $\mathsf{RequestSignature}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\mathsf{ACK}$
\end_inset

 || 
\begin_inset Formula $\mathsf{NACK}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Request to be added to the list of Chunk Holders for data chunk.
 
\begin_inset Formula $\mathsf{RequestSignature}$
\end_inset

 formed using vault's PMID.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Node RPCs (Chunk Information Management)
\begin_inset CommandInset label
LatexCommand label
name "tab:Node-RPCs-(ChunkInfoManagement)"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
wide true
sideways false
status open

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="4">
<features>
<column alignment="center" valignment="middle" width="28mm">
<column alignment="center" valignment="middle" width="50mm">
<column alignment="center" valignment="middle" width="25mm">
<column alignment="center" valignment="middle" width="65mm">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\noun on
RPC
\end_layout

\begin_layout Plain Layout

\series bold
\noun on
Name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\noun on
Request Fields
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\noun on
Response Fields
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\noun on
Purpose
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
AmendAccount
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\mathsf{AmendmentType}$
\end_inset

, 
\begin_inset Formula $\mathsf{AccountPMID,}$
\end_inset


\begin_inset Formula $\mathsf{SignedSize}$
\end_inset

, 
\begin_inset Formula $\mathsf{ChunkName}$
\end_inset

(optional)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\mathsf{ACK}$
\end_inset

 || 
\begin_inset Formula $\mathsf{NACK}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
If the 
\begin_inset Formula $\mathsf{AmendmentType}$
\end_inset

 is space offered, the request comes from a client and doesn't include a
 
\begin_inset Formula $\mathsf{ChunkName}$
\end_inset

.
 Otherwise, the request comes from a Chunk Info Holder and relates to storing
 or deleting a chunk.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ExpectAmendment
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\mathsf{AmendmentType}$
\end_inset

, 
\begin_inset Formula $\mathsf{ChunkName}$
\end_inset

, 
\begin_inset Formula $\mathsf{PMID}$
\end_inset

, 
\begin_inset Formula $\mathsf{PMID_{pub}}$
\end_inset

, 
\begin_inset Formula $\mathsf{Sig_{[MAID_{priv}]}(PMID_{pub})}$
\end_inset

, 
\begin_inset Formula $\mathsf{RequestSignature}$
\end_inset

, 
\begin_inset Formula $\mathsf{AmenderPMIDs}$
\end_inset

 (repeated)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\mathsf{ACK}$
\end_inset

 || 
\begin_inset Formula $\mathsf{NACK}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Allows Account Holders to anticipate a forthcoming AmendAccount RPC from
 each of the 
\begin_inset Formula $\mathsf{K}$
\end_inset

 Chunk Info Holders (indicated in 
\begin_inset Formula $\mathsf{AmenderPMIDs}$
\end_inset

).
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
AccountStatus
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\mathsf{AccountPMID}$
\end_inset

, 
\begin_inset Formula $\mathsf{SpaceRequested}$
\end_inset

, 
\begin_inset Formula $\mathsf{PMID_{pub}}$
\end_inset

, 
\begin_inset Formula $\mathsf{Sig_{[MAID_{priv}]}(PMID_{pub})}$
\end_inset

, 
\begin_inset Formula $\mathsf{RequestSignature}$
\end_inset

,
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\mathsf{ACK}$
\end_inset

 || 
\begin_inset Formula $\mathsf{NACK}$
\end_inset

, 
\begin_inset Formula $\mathsf{SpaceOffered}$
\end_inset

, 
\begin_inset Formula $\mathsf{SpaceGiven}$
\end_inset

, 
\begin_inset Formula $\mathsf{SpaceTaken}$
\end_inset

, 
\begin_inset Formula $\mathsf{AmendmentResults}$
\end_inset

 (optional, repeated)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Get the current status of a Node's Account.
 If the requester is the Account Owner, a list of all account amendments
 since the last AccountStatus request was made is returned also.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Node RPCs (Account Management)
\begin_inset CommandInset label
LatexCommand label
name "tab:Node-RPCs-(AccountManagement)"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
wide true
sideways false
status open

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="4">
<features>
<column alignment="center" valignment="middle" width="28mm">
<column alignment="center" valignment="middle" width="50mm">
<column alignment="center" valignment="middle" width="25mm">
<column alignment="center" valignment="middle" width="65mm">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\noun on
RPC
\end_layout

\begin_layout Plain Layout

\series bold
\noun on
Name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\noun on
Request Fields
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\noun on
Response Fields
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\noun on
Purpose
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
GetSyncData
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\mathsf{PMID}$
\end_inset

, 
\begin_inset Formula $\mathsf{PMID_{pub}}$
\end_inset

, 
\begin_inset Formula $\mathsf{Sig_{[MAID_{priv}]}(PMID_{pub})}$
\end_inset

, 
\begin_inset Formula $\mathsf{RequestSignature}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\mathsf{ACK}$
\end_inset

 || 
\begin_inset Formula $\mathsf{NACK}$
\end_inset

, 
\begin_inset Formula $\mathsf{VaultAccountSet}$
\end_inset

, 
\begin_inset Formula $\mathsf{ChunkInfoMap}$
\end_inset

, 
\begin_inset Formula $\mathsf{VaultBufferPktMap}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Used by a Node to retrieve serialised containers of data from close peers
 which it should also be responsible for holding.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
GetAccount
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\mathsf{AccountPMID}$
\end_inset

, 
\begin_inset Formula $\mathsf{PMID}$
\end_inset

, 
\begin_inset Formula $\mathsf{PMID_{pub}}$
\end_inset

, 
\begin_inset Formula $\mathsf{Sig_{[MAID_{priv}]}(PMID_{pub})}$
\end_inset

, 
\begin_inset Formula $\mathsf{RequestSignature}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\mathsf{ACK}$
\end_inset

 || 
\begin_inset Formula $\mathsf{NACK}$
\end_inset

, 
\begin_inset Formula $\mathsf{VaultAccount}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Used by a Node to retrieve an individual account from close peers which
 it should also be responsible for holding.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
GetChunkInfo
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\mathsf{ChunkName}$
\end_inset

, 
\begin_inset Formula $\mathsf{PMID}$
\end_inset

, 
\begin_inset Formula $\mathsf{PMID_{pub}}$
\end_inset

, 
\begin_inset Formula $\mathsf{Sig_{[MAID_{priv}]}(PMID_{pub})}$
\end_inset

, 
\begin_inset Formula $\mathsf{RequestSignature}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\mathsf{ACK}$
\end_inset

 || 
\begin_inset Formula $\mathsf{NACK}$
\end_inset

, 
\begin_inset Formula $\mathsf{VaultChunkInfo}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Used by a Node to retrieve info relating to an individual chunk from close
 peers which it should also be responsible for holding.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
GetBufferPacket
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\mathsf{BufferPacketName}$
\end_inset

, 
\begin_inset Formula $\mathsf{PMID}$
\end_inset

, 
\begin_inset Formula $\mathsf{PMID_{pub}}$
\end_inset

, 
\begin_inset Formula $\mathsf{Sig_{[MAID_{priv}]}(PMID_{pub})}$
\end_inset

, 
\begin_inset Formula $\mathsf{RequestSignature}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\mathsf{ACK}$
\end_inset

 || 
\begin_inset Formula $\mathsf{NACK}$
\end_inset

, 
\begin_inset Formula $\mathsf{VaultBufferPacket}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Used by a Node to retrieve an individual buffer packet from close peers
 which it should also be responsible for holding.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Node RPCs (Synchronisation of Management Data)
\begin_inset CommandInset label
LatexCommand label
name "tab:Node-RPCs-(SynchronisationOfManagementData)"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
wide true
sideways false
status open

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="4">
<features>
<column alignment="center" valignment="middle" width="28mm">
<column alignment="center" valignment="middle" width="50mm">
<column alignment="center" valignment="middle" width="25mm">
<column alignment="center" valignment="middle" width="65mm">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\noun on
RPC
\end_layout

\begin_layout Plain Layout

\series bold
\noun on
Name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\noun on
Request Fields
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\noun on
Response Fields
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\noun on
Purpose
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CreateBP
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\mathsf{BufferPacketName}$
\end_inset

, 
\begin_inset Formula $\mathsf{Data}$
\end_inset

, 
\begin_inset Formula $\mathsf{PMID}$
\end_inset

, 
\begin_inset Formula $\mathsf{PMID_{pub}}$
\end_inset

, 
\begin_inset Formula $\mathsf{Sig_{[MAID_{priv}]}(PMID_{pub})}$
\end_inset

, 
\begin_inset Formula $\mathsf{RequestSignature}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\mathsf{ACK}$
\end_inset

 || 
\begin_inset Formula $\mathsf{NACK}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Create a buffer packet.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ModifyBPInfo
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\mathsf{BufferPacketName}$
\end_inset

, 
\begin_inset Formula $\mathsf{Data}$
\end_inset

, 
\begin_inset Formula $\mathsf{PMID}$
\end_inset

, 
\begin_inset Formula $\mathsf{PMID_{pub}}$
\end_inset

, 
\begin_inset Formula $\mathsf{Sig_{[MAID_{priv}]}(PMID_{pub})}$
\end_inset

, 
\begin_inset Formula $\mathsf{RequestSignature}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\mathsf{ACK}$
\end_inset

 || 
\begin_inset Formula $\mathsf{NACK}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Modify a buffer packet's control information (e.g.
 set permissions).
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
GetBPMessages
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\mathsf{BufferPacketName}$
\end_inset

, 
\begin_inset Formula $\mathsf{PMID}$
\end_inset

, 
\begin_inset Formula $\mathsf{PMID_{pub}}$
\end_inset

, 
\begin_inset Formula $\mathsf{Sig_{[MAID_{priv}]}(PMID_{pub})}$
\end_inset

, 
\begin_inset Formula $\mathsf{RequestSignature}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\mathsf{ACK}$
\end_inset

 || 
\begin_inset Formula $\mathsf{NACK}$
\end_inset

, 
\begin_inset Formula $\mathsf{Messages}$
\end_inset

 (repeated)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Retrieve a buffer packet's messages.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
AddBPMessage
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\mathsf{BufferPacketName}$
\end_inset

, 
\begin_inset Formula $\mathsf{Data}$
\end_inset

, 
\begin_inset Formula $\mathsf{PMID}$
\end_inset

, 
\begin_inset Formula $\mathsf{PMID_{pub}}$
\end_inset

, 
\begin_inset Formula $\mathsf{Sig_{[MAID_{priv}]}(PMID_{pub})}$
\end_inset

, 
\begin_inset Formula $\mathsf{RequestSignature}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\mathsf{ACK}$
\end_inset

 || 
\begin_inset Formula $\mathsf{NACK}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Add a message to a buffer packet.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Node RPCs (Buffer Packet Management)
\begin_inset CommandInset label
LatexCommand label
name "tab:Node-RPCs-(BufferPacketManagement)"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
wide true
sideways false
status open

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="4">
<features>
<column alignment="center" valignment="middle" width="28mm">
<column alignment="center" valignment="middle" width="50mm">
<column alignment="center" valignment="middle" width="25mm">
<column alignment="center" valignment="middle" width="65mm">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\noun on
RPC
\end_layout

\begin_layout Plain Layout

\series bold
\noun on
Name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\noun on
Request Fields
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\noun on
Response Fields
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\noun on
Purpose
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SetLocalVaultOwned
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\mathsf{PMID_{pub}}$
\end_inset

, 
\begin_inset Formula $\mathsf{PMID_{priv}}$
\end_inset

, 
\begin_inset Formula $\mathsf{Sig_{[MAID_{priv}]}(PMID_{pub})}$
\end_inset

, 
\begin_inset Formula $\mathsf{SpaceOffered}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\mathsf{ACK}$
\end_inset

 || 
\begin_inset Formula $\mathsf{NACK}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Take ownership of an unowned Node.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
LocalVaultOwned
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\mathsf{Owned}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\mathsf{ACK}$
\end_inset

 || 
\begin_inset Formula $\mathsf{NACK}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Query a Node's owned status.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
VaultStatus
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\mathsf{StatusRequest}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\mathsf{StatusResponse}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Used to poll a vault for its current status.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Node RPCs (Miscellaneous)
\begin_inset CommandInset label
LatexCommand label
name "tab:Node-RPCs-(Miscellaneous)"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Roles
\end_layout

\begin_layout Standard
Nodes have three major concurrent roles in the network: storing and maintaining
 encrypted data chunks, maintaining various information about chunks, and
 maintaining account information about other Nodes (see 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Accounts"

\end_inset

 below).
 Nodes are referred to as Chunk Holders, Chunk Info Holders or Account Holders
 respectively depending on which role we wish to emphasize at the time.
 (Note however that any single Node is likely to be all of these for multiple
 chunks and peers simultaneously).
\end_layout

\begin_layout Subsection
Accounts
\begin_inset CommandInset label
LatexCommand label
name "sub:Accounts"

\end_inset


\end_layout

\begin_layout Standard
In order to maintain fairness on the network, each Node has an associated
 account, the name of which can be derived from the Node's PMID identity.
 The PMID identity should not however be derivable from the account name.
\end_layout

\begin_layout Standard
This account details the amount of storage space the Node offers to the
 network, the space the Node's owner has used on the network, and the space
 the Node has actually given to the network.
 The owner uses network space by storing files to the network; the Node
 gives space by storing and maintaining other users' chunks.
\end_layout

\begin_layout Standard
Nodes can only store new data to the network if their account will remain
 
\begin_inset Quotes eld
\end_inset

in credit
\begin_inset Quotes erd
\end_inset

 (i.e.
 space offered > space used) after the store operation.
 Users, regardless of account status, will always be able to get data from
 then network.
\end_layout

\begin_layout Standard
A ranking mechanism which takes these figures (and many other metrics) as
 inputs will eventually be implemented.
 Generally, rank will increase with the amount of space offered and given.
\end_layout

\begin_layout Subsection
Chunk Holders
\end_layout

\begin_layout Standard
For any chunk there should be at least two copies on the network, ideally
 four or more, each stored on separate Nodes.
 A Node which stores such a copy is referred to as a Chunk Holder.
 It is in a Node's interest to store chunks since its rank metric is increased
 for doing so.
 Chunks can be moved from one Node to another; as this happens the two correspon
ding accounts are debited and credited.
 Frequently accessed chunks can be cached on Nodes other than the official
 Chunk Holders, to speed up retrieval along a lookup path.
\end_layout

\begin_layout Subsection
Chunk Info Holders
\end_layout

\begin_layout Subsubsection
Reference Lists
\end_layout

\begin_layout Standard
In order to be able to locate a given chunk, a list of Chunk Holders' identities
 (referred to as a Reference List) is kept on the network.
 The Reference List is held and maintained by the 
\begin_inset Formula $\mathsf{K}$
\end_inset

 Nodes whose IDs are closest to the name of the chunk (see Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Add-to-Reference"

\end_inset

).
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Add to Reference List
\begin_inset CommandInset label
LatexCommand label
name "fig:Add-to-Reference"

\end_inset


\end_layout

\end_inset


\begin_inset Graphics
	filename img/Reference_List_Add.pdf

\end_inset


\end_layout

\end_inset

 Each Node in this group is referred to as a Chunk Info Holder.
\end_layout

\begin_layout Standard
A Reference List entry comprises the Chunk Holder's Node ID, and the time
 it was last contacted by the Chunk Info Holder.
 This allows the Chunk Info Holder to return only active Chunk Holders in
 response to a GetChunkReferences request, yet keep details of stale Chunk
 Holders in case they come back online.
\end_layout

\begin_layout Subsubsection
Watch Lists
\end_layout

\begin_layout Standard
The same group also holds a list of peers that are "watching" a chunk (referred
 to as a Watch List), which means they stored the chunk at some point
\begin_inset Foot
status open

\begin_layout Plain Layout
If the chunk pre-existed on the network, they may not have actually uploaded
 the chunk themselves.
\end_layout

\end_inset

 and are now interested in retaining it on the network (see Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Add-to-Watch"

\end_inset

).
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Add to Watch List
\begin_inset CommandInset label
LatexCommand label
name "fig:Add-to-Watch"

\end_inset


\end_layout

\end_inset


\begin_inset Graphics
	filename img/Watch_List_Add.pdf

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Watch Lists are currently limited to 250 entries
\begin_inset Foot
status open

\begin_layout Plain Layout
This figure is currently arbitrary and will be calculated based on several
 network parameters as the logic improves.
\end_layout

\end_inset

; once filled, new watchers are only registered by increasing a counter
 and including their ID in a checksum.
 A chunk can only be removed from the network once the corresponding Watch
 List is empty, the counter is zero, and the checksum indicates that all
 watchers have subsequently removed themselves (see Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Remove-from-Watch"

\end_inset

).
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Remove from Watch List
\begin_inset CommandInset label
LatexCommand label
name "fig:Remove-from-Watch"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename img/Watch_List_Remove.pdf

\end_inset


\end_layout

\end_inset

 So even if the Watch List is empty and the counter is zero, if something
 went wrong during the Chunk Info's lifetime (e.g.
 a Node which was never added to the Watch List requested to be removed
 from it) the checksum helps detect it, in which case the chunk would just
 be kept indefinitely or at least for a very long time (several years).
\begin_inset Foot
status open

\begin_layout Plain Layout
This is a situation that will very likely be improved as further research
 should yield a better algorithm for the removal of stale data.
 Any data that is addressed by the hash of its content will only be deleted
 through a necessity of reclaiming space.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
A Watch List entry comprises the watcher's Node ID and a flag to indicate
 if the entry can be deleted.
 The flag allows retention of watchers who have requested their removal
 from the Watch List, but who are still providing a 
\begin_inset Quotes eld
\end_inset

payment
\begin_inset Quotes erd
\end_inset

 for the chunk.
 This permits these ex-watchers to be proper recompensed eventually (once
 new watchers add themselves to the Watch List).
\end_layout

\begin_layout Standard
Because of this wealth of information, Chunk Info Holders are also responsible
 for monitoring the number of active Chunk Holders on the network, and triggerin
g chunk validity checks, duplication, repair or removal as required.
 In future, Chunk Info Holders may also collect various statistics, such
 as the number of watchers over certain time periods and the amount of requests
 for references to a chunk.
\end_layout

\begin_layout Subsubsection
Waiting Lists
\end_layout

\begin_layout Standard
Nodes requesting addition to a Watch List are added to a Waiting List until
 payment for the chunk either succeeds or fails, and if duplicate chunk
 copies are needed, until the new Chunk Holders add themselves to the Reference
 List.
\end_layout

\begin_layout Subsection
Account Holders
\end_layout

\begin_layout Standard
The 
\begin_inset Formula $\mathsf{K}$
\end_inset

 Nodes whose IDs are closest to the name of a Node's account are called
 Account Holders.
 Full account information can only be retrieved by the owner of the account,
 for privacy reasons.
 Other Nodes are only allowed to confirm whether the owner is authorised
 to perform a storage operation by checking for enough available space.
\end_layout

\begin_layout Section
Main Processes
\end_layout

\begin_layout Subsection
Joining the Network
\end_layout

\begin_layout Standard
After successfully joining the network on the Kademlia layer, an account
 needs to be created for the client's Node in order to specify how much
 space is to be offered to the network.
 Only once enough of the 
\begin_inset Formula $\mathsf{K}$
\end_inset

 Account Holders are aware of this account can further operations demanding
 payments succeed.
 Fraudulent account creations are intended to be detected by peer Nodes
 in future operations, e.g.
 when storage operations could not be completed.
\end_layout

\begin_layout Subsection
Storing a Chunk
\begin_inset CommandInset label
LatexCommand label
name "sub:Storing-a-Chunk"

\end_inset


\end_layout

\begin_layout Standard
To store a chunk, a client first has to ensure there is enough space in
 its account (see 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Accounts"

\end_inset

).
 It then looks up the 
\begin_inset Formula $\mathsf{K}$
\end_inset

 Chunk Info Holders and requests to be added to the Watch List for that
 chunk.
\end_layout

\begin_layout Standard
Once a Chunk Info Holder has received and validated an AddToWatchList request,
 it adds the ID of the requesting peer to the Waiting List.
 In response, the client gets informed how many copies of the chunk need
 to be uploaded.
 This number depends on how many copies of the chunk are already on the
 network and is derived from the desired minimum amount of copies (kMinChunkCopi
es
\begin_inset Foot
status open

\begin_layout Plain Layout
Currently a system wide constant
\end_layout

\end_inset

), usually lower to spare the client from excessive uploading.
\end_layout

\begin_layout Standard
Each Chunk Info Holder then proceeds to look up the 
\begin_inset Formula $\mathsf{K}$
\end_inset

 Account Holders of the client's account, and sends each a request to deduct
 the required payment (which equals the storage space needed) from the client's
 account.
 If the chunk didn't exist on the network, the client is asked for a payment
 kMinChunkCopies times the size of the chunk, independent of how many chunk
 copies were requested to be uploaded.
 If the chunk did pre-exist, then no uploads are required and payment depends
 on the state of the Watch List.
 If the Watch List is not full, only a single payment is required, otherwise
 storing is free.
 If this payment process triggered by the Chunk Info Holders fails, for
 example because the client's account isn't sufficiently funded, all previous
 operations are undone.
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Payment Finalisation
\begin_inset CommandInset label
LatexCommand label
name "fig:Payment-Finalisation"

\end_inset


\end_layout

\end_inset


\begin_inset Graphics
	filename img/Watch_List_Payment.pdf

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Once the payment process is complete, the corresponding entry in the aforementio
ned Waiting List is flagged as having been paid for.
 If the uploading of chunk copies was stipulated, the entry remains in the
 Waiting List until the new Chunk Holders have contacted the Chunk Info
 Holders.
 Otherwise the entry is removed from the Waiting List.
\end_layout

\begin_layout Standard
If the client was told to upload chunk copies, it contacts one Node per
 requested copy to negotiate a store contract.
 If the peer Node is able to validate the request and can provide enough
 physical storage space, the client can then proceed to upload the data
 chunk.
 Upon successful receipt of the chunk, the new Chunk Holder(s) look up and
 contact the Chunk Info Holders, requesting inclusion in the Reference List.
 This also causes the corresponding entry in the Waiting List to be flagged
 as having completed the storage requirements.
 The Chunk Info Holders then look up and request the amendment of each of
 the new Chunk Holders' accounts to reflect the additional space used by
 the network.
\end_layout

\begin_layout Standard
Once an entry in a Waiting List indicates successful completion of payments
 (and storage if applicable), the corresponding client can be committed
 to the Watch List as an actual "watcher".
 At this point, any superfluous payments that occurred from race conditions
 will be refunded.
 This concludes the storing process and the chunk is at this point safely
 stored on the network.
\end_layout

\begin_layout Subsection
Retrieving a Chunk
\end_layout

\begin_layout Standard
To retrieve a chunk, the client has to look up and contact the Chunk Info
 Holders to acquire the current list of active Chunk Holders.
 This is done through a Kademlia FindValue, which would return the ID of
 a peer that holds a cached copy of the chunk, or an empty value requiring
 the Client to ask for the Chunk Holders directly.
 The first Chunk Holder to confirm that it has the required chunk is used
 to retrieve the chunk from.
\end_layout

\begin_layout Subsection
Deleting a Chunk
\end_layout

\begin_layout Standard
If clients decide they don't want to keep a file any more, they remove themselve
s from the Watch Lists of the corresponding chunks.
 Once a Watch List becomes empty, i.e.
 no one is watching that particular chunk any more, it can be deleted from
 the network.
 This means traversing the current Reference List and calling a remote delete
 operation on the Chunk Holders, recompensing all the peers that made a
 payment to keep the minimum number of chunks on the network, as well as
 decrease the space given value in the (former) Chunk Holders' accounts.
\end_layout

\begin_layout Section
Maintaining Network Health
\end_layout

\begin_layout Subsection
Validity Checks by Chunk Info Holders
\end_layout

\begin_layout Standard
The Chunk Info Holders will be responsible for triggering validity checks
 on a chunk.
 When a check is due, a Chunk Holder will be chosen at random and told to
 initiate a validity check.
 This is a relatively simple process; for example, given a chunk named as
 
\begin_inset Formula $\mathsf{ABC}$
\end_inset

 whose content is 
\begin_inset Formula $\mathsf{Content_{ABC}}$
\end_inset

, a Chunk Holder will do the following: 
\end_layout

\begin_layout Enumerate
Get the contact details of the other Chunk Holders for 
\begin_inset Formula $\mathsf{ABC}$
\end_inset


\end_layout

\begin_layout Enumerate
For each Chunk Holder, send a ValidityCheck request (see 
\begin_inset CommandInset ref
LatexCommand prettyref
reference "tab:Node-RPCs-(ChunkManagement)"

\end_inset

) with a piece of random data (different data for each Node) in the 
\begin_inset Formula $\mathsf{RandomData}$
\end_inset

 field
\end_layout

\begin_layout Enumerate
Calculate 
\begin_inset Formula $\mathsf{H(Content_{ABC}+RandomData)}$
\end_inset

 and retain this as 
\begin_inset Formula $\mathsf{Result}$
\end_inset


\end_layout

\begin_layout Enumerate
Each Chunk Holder's reply should contain 
\begin_inset Formula $\mathsf{H(Content_{ABC}+RandomData)}$
\end_inset

 in the 
\begin_inset Formula $\mathsf{HashContent}$
\end_inset

 field
\end_layout

\begin_layout Enumerate
Confirm each Chunk Holders' 
\begin_inset Formula $\mathsf{HashContent}$
\end_inset

 field matches the corresponding 
\begin_inset Formula $\mathsf{Result}$
\end_inset

.
\end_layout

\begin_layout Standard
Any discrepancies are reported to the Chunk Info Holders and the Node at
 fault is informed.
 If this Node is unable to rectify the fault (e.g.
 by requesting a fresh copy from a good Chunk Holder and successfully passing
 a subsequent validity check) it is removed from the Reference List for
 the chunk and its account is amended to reflect less space given.
 This is a part of the system where rank will be adversely affected when
 it is put in place.
 Bad Chunk Holders will lose rank very quickly.
 
\end_layout

\begin_layout Standard
The triggers from the Chunk Info Holder to the Chunk Holder are time-based
 and will initially start at 2 minutes doubling every time to 20 hours.
 Any failure will reset the schedule.
\end_layout

\begin_layout Subsection
Relocation Based on Rank
\end_layout

\begin_layout Standard
Chunks will be relocated when the Chunk Info Holder notes that any Chunk
 Holder has lost or gained rank in the system.
\end_layout

\begin_layout Subsection
Validity Checks by Chunk Holders
\end_layout

\begin_layout Standard
On request for a chunk to be delivered to another Node, a Chunk Info Holder
 will trigger an internal validity check.
 
\end_layout

\begin_layout Subsection
Geographic Relocation of Chunks
\end_layout

\begin_layout Standard
A Chunk Info Holder that triggers a validity check will query their own
 routing table for Chunk Holders of the same status as the current Chunk
 Holders, but with a longer Round Trip Time (RTT).
 On finding a Node that is further away the data will be moved, preferably
 with a chunk swap.
 This swap will be negotiated via the Chunk Info Holder for the remote Node
 in question.
 
\end_layout

\begin_layout Subsection
Caching of Chunks
\end_layout

\begin_layout Standard
When loading a data chunk from the network, if the Kademlia lookup phase
 took more than one iteration, a copy of the chunk will be cached upon successfu
l completion of the chunk's retrieval.
 The CacheChunk RPC will be sent to the last Node contacted during the Kademlia
 lookup that did not have the chunk.
 Cached chunks should be located in a cache directory on the Node and be
 part of a First In First Out (FIFO) queue.
 This queue should only require a chunk removal when the Node requires the
 space.
\end_layout

\begin_layout Standard
This simple mechanism ensures data integrity is strengthened, but more important
ly shares the load of any Node that hosts interesting or popular chunks.
 There are many other advantages, such as resistance to denial of service
 attacks or distributed denial of service attacks, or if web based data
 is stored (such as a web site) then the more popular it is the more responsive
 the network will be when data is requested from this web site.
 This is almost the opposite of the case in today's World Wide Web, but
 is, again, more logical.
\end_layout

\begin_layout Section
Conclusions
\end_layout

\begin_layout Standard
There are several dramatic improvements over contemporary paradigms described
 in this single paper.
 The ideas presented here allow the creation of a serverless network which
 gives users a chance for the first time ever to retain complete control
 of their own security and personal information.
\end_layout

\begin_layout Standard
They also yield massive potential gains in terms of space (via data deduplicatio
n), data integrity (via validity checks and autonomous data repair), resilience
 to churn and attacks (via validity checks, ranking, geographic relocation
 of chunk copies), and scalability and transfer rates (via chunk caching).
\end_layout

\begin_layout Standard
It is no overstatement to say that the autonomous network described in this
 paper represents a highly significant step forward for the world of computing.
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "1"
key "1"

\end_inset

David Irvine, Self Encrypting Data, david.irvine@maidsafe.net
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "2"
key "2"

\end_inset

David Irvine, "Peer to Peer" Public Key Infrastructure, david.irvine@maidsafe.net
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "3"
key "3"

\end_inset

David Irvine, MaidSafe Distributed Hash Table, david.irvine@maidsafe.net
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "4"
key "4"

\end_inset

David Irvine, maidsafe: A new networking paradigm, david.irvine@maidsafe.net
\end_layout

\begin_layout Standard
\begin_inset Note Comment
status open

\begin_layout Plain Layout
\begin_inset Note Note
status open

\begin_layout Plain Layout
Change this paragraphs style to 'Standard' to enable
\end_layout

\begin_layout Plain Layout
BibTeX bibliography generation.
\end_layout

\begin_layout Plain Layout
Remember though that your final submission is supposed to have
\end_layout

\begin_layout Plain Layout
all the bibliography entries embedded in the latex file.
 This means
\end_layout

\begin_layout Plain Layout
you eventually have to copy the .bbl file into the latex file and
\end_layout

\begin_layout Plain Layout
remove the bibtex lines.
\end_layout

\end_inset


\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "your_biblio_file"
options "IEEEbib"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout BiographyNoPhoto
\begin_inset ERT
status open

\begin_layout Plain Layout

{
\end_layout

\end_inset

David Irvine
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset

 is a Scottish Engineer and innovator who has spent the last 12 years researchin
g ways to make computers function in a more efficient manner.
\end_layout

\begin_layout BiographyNoPhoto
He is an Inventor listed on more than 20 patent submissions and was Designer
 / Project Manager of one of the World's largest private networks (Saudi
 Aramco, over $300M).
 He is an experienced Project Manager and has been involved in start up
 businesses since 1995 and has provided business consultancy to corporates
 and SMEs in many sectors.
\end_layout

\begin_layout BiographyNoPhoto
He has presented technology at Google (Seattle), British Computer Society
 (Christmas Lecture) and many others.
\end_layout

\begin_layout BiographyNoPhoto
He has spent many years as a lifeboat Helmsman and is a keen sailor when
 time permits.
\end_layout

\end_body
\end_document
