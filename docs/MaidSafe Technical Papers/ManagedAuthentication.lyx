#LyX 1.6.7 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass IEEEtran
\use_default_options false
\language british
\inputencoding default
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_title "Managed Authentication"
\pdf_author "David Irvine"
\pdf_subject "Authentication"
\pdf_keywords "security, freedom, privacy, authentication"
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder true
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry false
\use_amsmath 0
\use_esint 0
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 2
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Title
Managed Authentication 
\end_layout

\begin_layout Author
David Irvine, email: david.irvine@maidsafe.net, LifeStuff: David
\end_layout

\begin_layout Right Address
maidsafe.net limited (registered in Scotland Sc 297540)
\end_layout

\begin_layout Date
September, 2010
\end_layout

\begin_layout Abstract
Today all known access mechanisms that grant access to distributed or shared
 services requires a server or authoritative control in some form.
 This presents many issues, including security, trust and privacy to name
 only a few.
 This paper presents a system of authentication that abolishes the requirements
 for any user-name or password containers as lists or similar.
 It also negates the necessity for any server based systems as a login entity
 for people to connect with prior to gaining access to a system for any
 reason.
 In addition this paper allows management of user acess in a distributed
 network.
\end_layout

\begin_layout Keywords
security, freedom, privacy, authentication
\end_layout

\begin_layout MarkBoth
maidsafe.net limited company confidential Version 0.2
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}{
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
PARstart{A}{uthentication}
\end_layout

\end_inset

 allows access to a system at a certain level or privilege.
 This is described in 
\emph on
Self Authentication 
\emph default

\begin_inset CommandInset citation
LatexCommand cite
key "1"

\end_inset

 with reference to an identity created, managed and maintained in seclusion,
 or in another way of thinking, anonymously.
 In many other situations this is not beneficial; control over access and
 the ability to manage very large groups is required.
 Examples include corporate and military networks.
 
\end_layout

\begin_layout Subsection
Conventions Used
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
This may not be required
\end_layout

\end_inset


\end_layout

\begin_layout Standard
There is scope for confusion when using the term 
\begin_inset Quotes eld
\end_inset

key
\begin_inset Quotes erd
\end_inset

, as sometimes it refers to a cryptographic key, and at other times it is
 in respect to the key of a DHT 
\begin_inset Quotes eld
\end_inset

key, value
\begin_inset Quotes erd
\end_inset

 pair.
 In order to avoid confusion, cryptographic private and public keys will
 be referred to as 
\begin_inset Formula $\mathsf{K_{priv}}$
\end_inset

 and 
\begin_inset Formula $\mathsf{K_{pub}}$
\end_inset

 respectively, and DHT keys simply as keys.
\end_layout

\begin_layout Itemize
Node ≡ a network resource which is a process, sometimes referred to as a
 vault in other papers.
 This is the computer program that maintains the network and on its own
 is not very special.
 It is in collaboration that this Node becomes part of a very complex, sophistic
ated and efficient network.
\end_layout

\begin_layout Itemize
\begin_inset Formula $\mathsf{H}$
\end_inset

 ≡ Hash function such as SHA, MD5, etc.
 
\end_layout

\begin_layout Itemize
\begin_inset Formula $\mathsf{PBKDF2_{[Passphrase][Salt][IterCount]}}$
\end_inset

 ≡ Password-Based Key Derivation Function or similar
\end_layout

\begin_layout Itemize
\begin_inset Formula $\mathsf{XXX_{priv}}$
\end_inset

, 
\begin_inset Formula $\mathsf{XXX_{pub}}$
\end_inset

 ≡ Private and public keys respectively of cryptographic key pair named
 
\begin_inset Formula $\mathsf{XXX}$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $\mathsf{AsymEnc_{[K_{pub}]}(Data)}$
\end_inset

 ≡ Asymmetrically encrypt 
\begin_inset Formula $\mathsf{Data}$
\end_inset

 using 
\begin_inset Formula $\mathsf{K_{pub}}$
\end_inset

 
\end_layout

\begin_layout Itemize
\begin_inset Formula $\mathsf{AsymDec_{[K_{priv}]}(Data)}$
\end_inset

 ≡ Asymmetrically decrypt 
\begin_inset Formula $\mathsf{Data}$
\end_inset

 using 
\begin_inset Formula $\mathsf{K_{priv}}$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $\mathsf{Sig{}_{[K_{priv}]}(Data)}$
\end_inset

 ≡ Create asymmetric signature of 
\begin_inset Formula $\mathsf{Data}$
\end_inset

 using 
\begin_inset Formula $\mathsf{K_{priv}}$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $\mathsf{+}$
\end_inset

 ≡ Concatenation
\end_layout

\begin_layout Itemize
\begin_inset Formula $\mathsf{STORE}$
\end_inset


\begin_inset Formula $\equiv$
\end_inset

 Network or other key addressable storage system 
\end_layout

\begin_layout Itemize
\begin_inset Formula $\mathsf{PutV_{[Key]}(Value)}$
\end_inset

 ≡ Store 
\begin_inset Formula $\mathsf{Value}$
\end_inset

 under 
\begin_inset Formula $\mathsf{Key}$
\end_inset

 on 
\begin_inset Formula $\mathsf{STORE}$
\end_inset

.
 This value is signed.
\end_layout

\begin_layout Itemize
\begin_inset Formula $\mathsf{GetV_{[Key]}}$
\end_inset

 ≡ Retrieve 
\begin_inset Formula $\mathsf{Value}$
\end_inset

 under 
\begin_inset Formula $\mathsf{Key}$
\end_inset

 on 
\begin_inset Formula $\mathsf{STORE}$
\end_inset

.
 This value is signed.
\end_layout

\begin_layout Itemize
\begin_inset Formula $\mathsf{DelV_{[Key]}(Value)}$
\end_inset

 ≡ Delete 
\begin_inset Formula $\mathsf{Value}$
\end_inset

 under 
\begin_inset Formula $\mathsf{Key}$
\end_inset

 on 
\begin_inset Formula $\mathsf{STORE}$
\end_inset

.
 This value is signed.
\end_layout

\begin_layout Section
Outline
\end_layout

\begin_layout Subsection
Creation of an Account
\begin_inset CommandInset label
LatexCommand label
name "sub:Creation-of-an"

\end_inset


\end_layout

\begin_layout Standard
Here we will assume a 
\begin_inset Formula $\mathsf{User}$
\end_inset

 who is a member of an organisation named 
\begin_inset Quotes eld
\end_inset


\begin_inset Formula $\mathsf{Org}$
\end_inset


\begin_inset Quotes erd
\end_inset

 which has an ID on the system named 
\begin_inset Formula $\mathsf{ID_{Org}}$
\end_inset

 and a 
\begin_inset Formula $\mathsf{Manager}$
\end_inset

 with administator privileges.
 There are two inputs required by 
\begin_inset Formula $\mathsf{User}$
\end_inset

: user-name 
\begin_inset Formula $\mathsf{U}$
\end_inset

, and password 
\begin_inset Formula $\mathsf{W}$
\end_inset

.
 A salt 
\begin_inset Formula $\mathsf{S}$
\end_inset

 is also derived (in a repeatable way) from 
\begin_inset Formula $\mathsf{U}$
\end_inset

 and 
\begin_inset Formula $\mathsf{ID_{Org}}$
\end_inset

.
 
\begin_inset Formula $\mathsf{Manager}$
\end_inset

 can recreate this ID at any time, but requires that 
\begin_inset Formula $\mathsf{User}$
\end_inset

 cannot alter the user-name.
\end_layout

\begin_layout Standard
To generate a unique identifier, we hash the concatenation of the user-name
 and the salt, 
\begin_inset Formula $\mathsf{H(U+S)}$
\end_inset

.
 
\end_layout

\begin_layout Standard
PBKDF2 is used here to strengthen any password keys used.
 This is required as user-selected passwords are inevitably weak and the
 user may not know the user-name is also used as a password in the system.
 
\begin_inset Formula $\mathsf{Account}$
\end_inset

 specifies session data, like user details or an index of references to
 further data.
 This packet is located through an Access Packet holding a random number
 
\begin_inset Formula $\mathsf{Rnd\#}$
\end_inset

.
 
\end_layout

\begin_layout Standard
It is important to note that all packets in this process are signed by two
 seperate IDs called 
\begin_inset Formula $\mathsf{MID_{User}}$
\end_inset

 and 
\begin_inset Formula $\mathsf{TMID_{User}}$
\end_inset

 which are created as described in 
\begin_inset CommandInset citation
LatexCommand cite
key "3"

\end_inset

.
 These packets are in turn signed by 
\begin_inset Formula $\mathsf{Manager}$
\end_inset

 who keeps a copy of the IDs.
 In this way 
\begin_inset Formula $\mathsf{Manager}$
\end_inset

 can find the user's ID packets and delete them after deleting the data
 pointed to by the 
\begin_inset Formula $\mathsf{TMID_{User}}$
\end_inset

 to revoke access to the system.
 
\end_layout

\begin_layout Enumerate
\begin_inset Formula $\mathsf{GetV_{[H(U+S)]}\equiv False}$
\end_inset

 (Ensure uniqueness)
\end_layout

\begin_layout Enumerate
Generate random number 
\begin_inset Formula $\mathsf{Rnd\#}$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $\mathsf{PutV_{[H(U+S)]}\left(SymEnc_{[PBKDF2_{[U][S]}]}(Rnd\#)\right)}$
\end_inset

 (Store Access Packet)
\end_layout

\begin_layout Enumerate
\begin_inset Formula $\mathsf{PutV_{[H(U+S+Rnd\#)]}\left(SymEnc_{[PBKDF2_{[W][S]}]}(Account)\right)}$
\end_inset

 (Store Account Packet)
\end_layout

\begin_layout Subsection
Login / Load Session Process
\begin_inset CommandInset label
LatexCommand label
name "sub:Login-to-a"

\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $\mathsf{SymDec_{[PBKDF2_{[U][S]}]}\left(GetV_{[H(U+S)]}\right)\equiv Rnd\#}$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $\mathsf{SymDec_{[PBKDF2_{[W][S]}]}(GetV_{[H(U+S+Rnd\#)]})\equiv Account}$
\end_inset


\end_layout

\begin_layout Standard
For the following operation, 
\begin_inset Formula $\mathsf{Rnd\#}$
\end_inset

 should be kept locally for the duration of the session.
\end_layout

\begin_layout Subsection
Logout / Save Session Process
\end_layout

\begin_layout Enumerate
Generate new random number 
\begin_inset Formula $\mathsf{Rnd\#_{new}}$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $\mathsf{PutV_{[H(U+S+Rnd\#_{new})]}\left(SymEnc_{[PBKDF2_{[W][S]}]}(Account)\right)}$
\end_inset

 (Store new Account Packet)
\end_layout

\begin_layout Enumerate
\begin_inset Formula $\mathsf{PutV_{[H(U+S)]}\left(SymEnc_{[PBKDF2_{[U][S]}]}(Rnd\#_{new})\right)}$
\end_inset

 (Update Access Packet)
\end_layout

\begin_layout Enumerate
\begin_inset Formula $\mathsf{DelV_{[H(U+S+Rnd\#)]}(OldAccount)}$
\end_inset

 (Delete old Account Packet)
\end_layout

\begin_layout Subsection
Fallback Account Packets
\end_layout

\begin_layout Standard
The previous sections outlined the basic system of authentication.
 However, this can be extended for safety reasons.
 As with any system, the serialisation and store operation of the account
 data can fail for any reason, resulting in unreadable data upon retrieval.
 This would be catastrophic as access to the user's data on the system may
 be rendered impossible.
 To reduce any such risk, a fallback copy of an Account Packet (and its
 Access Packet) is kept, to allow reverting to the previous version in case
 the current version can't be restored or turns out to have been generated
 erroneously.
 Like the main Access Packet, the fallback Access Packet contains an (encrypted)
 random number, designated 
\begin_inset Formula $\mathsf{Rnd\#_{fallback}}$
\end_inset

.
\end_layout

\begin_layout Subsubsection
Updated Account Creation Process
\end_layout

\begin_layout Enumerate
\begin_inset Formula $\mathsf{GetV_{[H(U+S)]}\equiv False}$
\end_inset

 (Ensure uniqueness of Access Packet)
\end_layout

\begin_layout Enumerate
\begin_inset Formula $\mathsf{GetV_{[H(U+(S-1))]}\equiv False}$
\end_inset

 (Ensure uniqueness of fallback Access Packet)
\end_layout

\begin_layout Enumerate
Generate random number 
\begin_inset Formula $\mathsf{Rnd\#}$
\end_inset

 and copy 
\begin_inset Formula $\mathsf{Rnd\#\rightarrow Rnd\#_{fallback}}$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $\mathsf{PutV_{[H(U+S)]}\left(SymEnc_{[PBKDF2_{[U][S]}]}(Rnd\#)\right)}$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $\mathsf{PutV_{[H(U+(S-1)]}\left(SymEnc_{[PBKDF2_{[U][S-1]}]}(Rnd\#)\right)}$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $\mathsf{PutV_{[H(U+S+Rnd\#)]}\left(SymEnc_{[PBKDF2_{[W][S]}]}(Account)\right)}$
\end_inset


\end_layout

\begin_layout Standard
In this case, the random numbers in the Access Packets are the same, thus
 point to the same (unique) Account Packet.
 Fallback packets are only kept once the Account Packet is updated.
\end_layout

\begin_layout Subsubsection
Updated Login Process
\end_layout

\begin_layout Enumerate
if (
\begin_inset Formula $\mathsf{GetV_{[H(U+S)]}\equiv EncRnd\#}$
\end_inset

)
\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset Formula $\mathsf{SymDec_{[PBKDF2_{[U][S]}]}(EncRnd\#)\equiv Rnd\#}$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $\mathsf{SymDec_{[PBKDF2_{[W][S]}]}\left(GetV_{[H(U+S+Rnd\#)]}\right)\equiv Account}$
\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
else (or if previous attempt failed)
\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset Formula $\mathsf{SymDec_{[PBKDF2_{[U][S-1]}]}\left(GetV_{[H(U+(S-1))]}\right)\equiv Rnd\#_{fallback}}$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $\mathsf{SymDec_{[PBKDF2_{[W][S-1]}]}\left(GetV_{[H(U+S+Rnd\#_{fallback})]}\right)\equiv Account_{fallback}}$
\end_inset


\end_layout

\end_deeper
\begin_layout Subsubsection
Updated Logout / Save Session Process
\end_layout

\begin_layout Standard
Designate existing 
\begin_inset Formula $\mathsf{Rnd\#}$
\end_inset

 as 
\begin_inset Formula $\mathsf{Rnd\#_{old}}$
\end_inset

 and 
\begin_inset Formula $\mathsf{Rnd\#_{fallback}}$
\end_inset

 as 
\begin_inset Formula $\mathsf{Rnd\#_{fallback\, old}}$
\end_inset


\end_layout

\begin_layout Enumerate
Generate new random number 
\begin_inset Formula $\mathsf{Rnd\#_{new}}$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $\mathsf{PutV_{[H(U+S)]}\left(SymEnc_{[PBKDF2_{[U][S]}]}(Rnd\#_{new})\right)}$
\end_inset

 (Update Access Packet with new random number)
\end_layout

\begin_layout Enumerate
\begin_inset Formula $\mathsf{PutV_{[H(U+(S-1)]}\left(SymEnc_{[PBKDF2_{[U][S-1]}]}(Rnd\#_{old})\right)}$
\end_inset

 (Update fallback Access Packet with old random number)
\end_layout

\begin_layout Enumerate
\begin_inset Formula $\mathsf{PutV_{[H(U+S+Rnd\#_{new})]}\left(SymEnc_{[PBKDF2_{[W][S]}]}(Account)\right)}$
\end_inset

 (Update Account Packet using new random number)
\end_layout

\begin_layout Enumerate
\begin_inset Formula $\mathsf{DelV_{[H(U+S+Rnd\#_{fallback\, old})]}(Account_{fallback\, old})}$
\end_inset

 (Delete old Account Packet)
\end_layout

\begin_layout Standard
The previous Account Packet remains untouched.
 Instead the fallback Access Packet is redirected to it and the normal Access
 Packet points to the new Account Packet.
 The previous fallback Account Packet is deleted.
 This is a security measure to hinder slow brute-force attacks on decrypting
 the Access Packet, which by the time the clear-text random number is obtained
 would make it obsolete.
\end_layout

\begin_layout Subsection
Creating a User Identity (publically broadcastable identity)
\end_layout

\begin_layout Enumerate
\begin_inset Formula $\mathsf{Manager}$
\end_inset

 creates 
\begin_inset Formula $\mathsf{USER_{priv}}$
\end_inset

 and 
\begin_inset Formula $\mathsf{USER_{pub}}$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $\mathsf{H(USER_{pub}\,+Sig{}_{MANAGER_{priv}})}$
\end_inset

 is stored on 
\begin_inset Formula $\mathsf{STORE}$
\end_inset

; this also will be the ID for 
\begin_inset Formula $\mathsf{User}$
\end_inset

.
\end_layout

\begin_layout Enumerate
\begin_inset Formula $\mathsf{Manager}$
\end_inset

 creates a 
\begin_inset Formula $\mathsf{H(User@Org+Sig{}_{MANAGER_{priv}})}$
\end_inset

 packet in 
\begin_inset Formula $\mathsf{STORE}$
\end_inset

 (this is the contact address of 
\begin_inset Formula $\mathsf{User}$
\end_inset

 when connected with 
\begin_inset Formula $\mathsf{Org}$
\end_inset

); again this is revokable by 
\begin_inset Formula $\mathsf{Manager}$
\end_inset

.
\end_layout

\begin_layout Standard
It should be emphasised that any communcation from 
\begin_inset Formula $\mathsf{User@Org}$
\end_inset

 should require a check of 
\begin_inset Formula $\mathsf{STORE}$
\end_inset

 to ensure the ID is still valid; therefore there is no possibility of simply
 passing the information in a message.
 This may involve a recursive check on 
\begin_inset Formula $\mathsf{Manager}$
\end_inset

's keys to get to the root 
\begin_inset Formula $\mathsf{Org}$
\end_inset

 packet which is the packet signed by the 
\begin_inset Formula $\mathsf{Org}$
\end_inset

 key itself (first user).
 This is identified as being signed by the 
\begin_inset Formula $\mathsf{ID_{Org}}$
\end_inset

 packet.
 This ID will be published in many places and found in 
\begin_inset Formula $\mathsf{STORE}$
\end_inset

 as a packet simply called 
\begin_inset Formula $\mathsf{Org}$
\end_inset

 and signed by 
\begin_inset Formula $\mathsf{Org}$
\end_inset

 (self-signed original packet).
\end_layout

\begin_layout Subsection
Creating User Root Directory 
\end_layout

\begin_layout Enumerate
\begin_inset Formula $\mathsf{Manager}$
\end_inset

 creates a parent directory for 
\begin_inset Formula $\mathsf{User}$
\end_inset

 as per 
\begin_inset CommandInset citation
LatexCommand cite
key "6"

\end_inset

, but uses the hash of the 
\begin_inset Formula $\mathsf{ID_{User}}$
\end_inset

 from 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Creation-of-an"

\end_inset

 as the passkey.
\end_layout

\begin_layout Enumerate
\begin_inset Formula $\mathsf{Manager}$
\end_inset

 adds a child directory entry to the parent.
 
\end_layout

\begin_layout Enumerate
This child directory entry is the organisation drive.
 
\end_layout

\begin_layout Standard
In this manner the user has the ability to alter the child directory and
 add in his or her own files.
 This is the root drive of 
\begin_inset Formula $\mathsf{User}$
\end_inset

, and personal information can be stored there.
 
\begin_inset Formula $\mathsf{Manager}$
\end_inset

 though, has access to this as he or she knows the ID and the passkey to
 it.
 In addition, as 
\begin_inset Formula $\mathsf{Manager}$
\end_inset

 stores and signs the parent directory, 
\begin_inset Formula $\mathsf{User}$
\end_inset

 cannot alter this or change passwords.
\end_layout

\begin_layout Subsection
BootStrapping the Network
\end_layout

\begin_layout Standard
An initial ID is required to bootstrap the network of ID's in the store.
 This ID is created as described in 
\begin_inset CommandInset citation
LatexCommand cite
key "3"

\end_inset

 as a 
\emph on
selectable ID
\emph default

\begin_inset Foot
status open

\begin_layout Plain Layout
This is the major claim in the managed distributed authentication patent
\end_layout

\end_inset

.
 This ID may be countersigned by another party, such as the company who
 supplies such a system to a customer
\begin_inset Foot
status open

\begin_layout Plain Layout
This is the check that MS SAN uses to ensure license payments are made
\end_layout

\end_inset

, assuming that supplier is trusted.
 In the case of a software supplier, then the suppliers ID can be built
 in as a trusted party.
 
\end_layout

\begin_layout Standard
This ID is then the 
\emph on
root
\emph default
 ID of the network, we shall refer to this as 
\begin_inset Formula $ID_{Net}$
\end_inset

.
 The initial user then creates a 
\begin_inset Formula $\mathsf{ID_{User@Org}}$
\end_inset

.
 This ID is signed by the private of the ID associated with 
\begin_inset Formula $ID_{Org}$
\end_inset

.
 
\end_layout

\begin_layout Fact
All client systems accessing this network will test 
\begin_inset Formula $\mathsf{ID_{User@Org}}$
\end_inset

 is signed by the ID associated with 
\begin_inset Formula $ID_{Org}$
\end_inset

.
 This is to prevent fraud as any attacker or ID wishing to fraudulently
 claim they are a valid 
\begin_inset Formula $ID_{something@Org}$
\end_inset

 would not have access to the ID associated with 
\begin_inset Formula $ID_{Org}$
\end_inset

.
 
\end_layout

\begin_layout Remark
This is essential as many nodes or network entities may create a 
\begin_inset Formula $ID_{something@Org}$
\end_inset

 which cannot and should not be prevented, however only one will have the
 private key required to validate this ID.
 This ensures mathematical correctness in testing a proposition such as
 
\begin_inset Formula $ID_{something@Org}$
\end_inset

 which ensures that the security algorithm is intact and not dependent on
 obfuscation or obscurity of code or similar.
\end_layout

\begin_layout Remark
To check an ID then there is a possibility that the ID who signs the 
\begin_inset Formula $ID_{something@Org}$
\end_inset

 is in fact not 
\begin_inset Formula $ID_{Org}$
\end_inset

 but another 
\begin_inset Formula $ID_{something@Org}$
\end_inset

 (this shoudl be a manager of teh first ID checked).
 This requires a recursive check until 
\begin_inset Formula $ID_{Org}$
\end_inset

 is reached, otherwise the 
\begin_inset Formula $ID_{something@Org}$
\end_inset

 is fraudulent and not as expected.
\end_layout

\begin_layout Remark
On confirming 
\begin_inset Formula $ID_{something@Org}$
\end_inset

 it is assumed that the recipient will maintain the ID associated and possibly
 sign a validated record and maintain this somehow
\begin_inset Foot
status open

\begin_layout Plain Layout
In MS SAN and MaidSafe this is stored in the data atlas.
\end_layout

\end_inset

.
 
\end_layout

\begin_layout Subsection
Banning User from Network
\end_layout

\begin_layout Standard
As 
\begin_inset Formula $\mathsf{ID_{User}}$
\end_inset

 is signed by 
\begin_inset Formula $\mathsf{Manager}$
\end_inset

, then 
\begin_inset Formula $\mathsf{Manager}$
\end_inset

 can delete this packet.
 This renders 
\begin_inset Formula $\mathsf{User}$
\end_inset

's access key useless and all access revoked.
 To ensure this is absolute, the message type sent cannot be used to verify
 an ID (by sending public key plus signature in a packet for hashing by
 the recipient) and instead a 
\begin_inset Formula $\mathsf{STORE}$
\end_inset

 lookup for a valid ID has to happen every time.
 
\end_layout

\begin_layout Standard
In addition the user's ability to access any data from the network is revoked
 with the deletions of the 
\begin_inset Formula $\mathsf{MID_{User}}$
\end_inset

, 
\begin_inset Formula $\mathsf{SMID_{User}}$
\end_inset

 and 
\begin_inset Formula $\mathsf{TMID_{User}}$
\end_inset

 packets.
 
\end_layout

\begin_layout Subsection
N Plus P Key Sharing
\end_layout

\begin_layout Standard
As the initial node has an extreme amount of power and no equal to absorb
 this power should that identity become unstable for whatever reason (such
 as retiring, leaving or simply becoming hostile) then a mechanism must
 be put into place to ensure this ID is not stand alone.
 
\end_layout

\begin_layout Standard
The answer is n+p
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
There are many methods for achieving this, Shamir's scheme is as good as
 any and an implemention of this is availiable in many crypto libraries
 such as cryptopp.
\end_layout

\end_inset

 key sharing scheme where a user can select 
\begin_inset Formula $\mathsf{p}$
\end_inset

 users to share his key with.
 If there is ever an issue, then 
\begin_inset Formula $\mathsf{n}$
\end_inset

 of these users are all that are required to recreate the key.
\end_layout

\begin_layout Section
Hardened security mode
\end_layout

\begin_layout Standard
As this system allows access to a distributed filesystem such as 
\begin_inset CommandInset citation
LatexCommand cite
key "6"

\end_inset

 we can achieve a level of security unknown until now.
 This filesystem can be presented through a File System In Userspace (FUSE)
 format, thereby appearing like a hard disk to the operating system.
 On this disk can run any system that runs on a normal hard disk (with the
 exception of extreme fast transaction services
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
This is only a current limitation and can be overcome even today with a
 NOSQL policy
\end_layout

\end_inset

).
 With this being the case, even applications can be installed on the disk
 as shares the users can access and presented through a menu system as oone
 would normally exepct to see on a computer.
 
\end_layout

\begin_layout Standard
If such systems were built that had no external access capabilities (USB,
 FireWire, Bluetooth etc.) and had a read only file system (which is possible
 as this system does not require disk access at all) then a extreme level
 of security could be obtained.
 All applications managed as well as virtual disk access with no virus capabilit
y or no way to write to the hard disk (no trojans) and no requirement for
 a firewall or intrusion detection system as there is no hard disk.
 
\end_layout

\begin_layout Standard
Such system would find use in military, financial institutes and organisations
 requiring 100% control and protection of internal data.
 
\end_layout

\begin_layout Section
Conclusions
\end_layout

\begin_layout Standard
T
\end_layout

\begin_layout Section
Future Works
\end_layout

\begin_layout Subsection
Time Based Obfuscation
\end_layout

\begin_layout Standard
In the previous sections a system of authentication was detailed which is
 very effective.
 A potential failure point, however, may be the Access Packets, as those
 are never altering their location (key) and can pose a target for any attacker
 who is monitoring data traffic between the user and the system.
\end_layout

\begin_layout Standard
To remove this weakness, a predictably altering piece of data can be introduced,
 such as time (e.g.
 week number, day of year or similar).
 In this case in 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Login-to-a"

\end_inset

 the 
\begin_inset Formula $\mathsf{GetV}$
\end_inset

 call would be iterative, starting at the current time slot and decrementing
 until it returns with a value.
 Access Packets at 
\begin_inset Quotes eld
\end_inset

outdated
\begin_inset Quotes erd
\end_inset

 locations would be deleted on detection, and updates always stored in the
 current location, resulting in regularly 
\begin_inset Quotes eld
\end_inset

moving
\begin_inset Quotes erd
\end_inset

 packets.
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "1"
key "1"

\end_inset

David Irvine, Self-Authentication, david.irvine@maidsafe.net
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "2"
key "2"

\end_inset

David Irvine, Self Encrypting Data, david.irvine@maidsafe.net
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "3"
key "3"

\end_inset

David Irvine, "Peer to Peer" Public Key Infrastructure, david.irvine@maidsafe.net
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "4"
key "4"

\end_inset

David Irvine, maidsafe: A new networking paradigm , david.irvine@maidsafe.net
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "5"
key "5"

\end_inset

David Irvine, Autonomous Network, david.irvine@maidsafe.net
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "6"
key "6"

\end_inset

David Irvine, MaidSafe Distributed File System, david.irvine@maidsafe.net
\end_layout

\begin_layout Standard
\begin_inset Note Comment
status collapsed

\begin_layout Plain Layout
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Change this paragraphs style to 'Standard' to enable
\end_layout

\begin_layout Plain Layout
BibTeX bibliography generation.
\end_layout

\begin_layout Plain Layout
Remember though that your final submission is supposed to have
\end_layout

\begin_layout Plain Layout
all the bibliography entries embedded in the latex file.
 This means
\end_layout

\begin_layout Plain Layout
you eventually have to copy the .bbl file into the latex file and
\end_layout

\begin_layout Plain Layout
remove the bibtex lines.
\end_layout

\end_inset


\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "your_biblio_file"
options "IEEEbib"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout BiographyNoPhoto
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset

David Irvine
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 is a Scottish Engineer and innovator who has spent the last 12 years researchin
g ways to make computers function in a more efficient manner.
\end_layout

\begin_layout BiographyNoPhoto
He is an Inventor listed on more than 20 patent submissions and was Designer
 / Project Manager of one of the World's largest private networks (Saudi
 Aramco, over $300M).
 He is an experienced Project Manager and has been involved in start up
 businesses since 1995 and has provided business consultancy to corporates
 and SMEs in many sectors.
\end_layout

\begin_layout BiographyNoPhoto
He has presented technology at Google (Seattle), British Computer Society
 (Christmas Lecture) and many others.
\end_layout

\begin_layout BiographyNoPhoto
He has spent many years as a lifeboat Helmsman and is a keen sailor when
 time permits.
\end_layout

\end_body
\end_document
