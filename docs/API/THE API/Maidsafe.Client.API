maidsafe.Client layer API

###############################################
###############Statefull Interface 1 start here
###############################################

### Authentication
Login(string username, int pin, string password)
//creates a session object, containing DA, cache location etc.
return int  
//0=OK, 1=FAIL, 2=PASSWORD_FAIL, 3=NON_EXISTING_USER

Logout()
//logs out and gracefully exits kademlia network
//cleaning up as it goes 
return int 
//0=OK, 1=NO_CONNECTION, ...

RegisterUser(string username,int pin,string password)
return bool

CreatePublicUsername(string public_username)
return bool

ChangeUsername(string old_username,string new_username)
return bool

ChangePin(int old_pin,int new_pin)
return bool

ChangePassword(string old_passwd,string new_passwd)
return bool

RemoveMe(string username,int pin,string password)
return bool

### File Handling

ListMaidsafeFs()
//vault is populated with 'files' which only contain the file hash
return int
//0=OK, 1=NO_PERMISSIONS, 3=DA_CORRUPT, 4=CANNOT_GET_DA

GetFile(string nameandpath)
//takes hash of a file and retrieves content - presents content to Operating System
// client gets the chunks from the vaults - via Transport layer (IP addresses and ports) 
return int
//0=OK, 1=NO_PERMISSIONS, 3=DA_CORRUPT, 4=CANNOT_GET_DA

PutFile(str filenameandpath)
// checks hash and if different - send to self encryption
// save new hash to DA - update file (private interfaces)
return int
//0=OK, 1=CANNOT_WRITE_DM, 2=CANNOT_WRITE_DA, 3=CANNOT_UPDATE_DM

DeleteFile(string[] nameandpath)
//removes a file from your visible filesystem (stays in DA - flagged deleted)
return int
//0=OK, 1=CANNOT_WRITE_DM, 2=CANNOT_WRITE_DA, 3=CANNOT_UPDATE_DM

PurgeFile(string[] nameandpath)
//completely remove a file from filesystem and DA
return int
//0=OK, 1=CANNOT_WRITE_DM, 2=CANNOT_WRITE_DA, 3=CANNOT_UPDATE_DM

RestoreFile(string[] nameandpath)
//bring back file from trash
return int
//0=OK, 1=CANNOT_WRITE_DM, 2=CANNOT_WRITE_DA, 3=CANNOT_UPDATE_DM

### Shares

ListShares()
// returns a vector of shares, attributes, users, files 
return vector
//v[0]=error code or ok (0) //errors = CANNOT_ACCESS_DA, DA_CORRUPT, NO_SHARES

CreateShare(str name,str filenameandpath = NULL)
// Create a share, optionally by right clicking on a file
//will need lower level interface designed in maid layer
return int 
//0=OK, 1=NETWORK_FAIL, 2=NO_PUB_NAME

DeleteShare(str name,removeself=NULL)
//delete yourself from a share or delete complete share if privs allow
return int 
//0=OK, 1=NO_PRIVS, 2=CANNOT_WRITE_DM, 3=CANNOT_WRITE_DA, 4=CANNOT_UPDATE_DM, 5=CANNOT_UPDATE_PEERS
 
ModifyShare(str name,vector files=NULL, vector users=NULL, vector perms=NULL)
//alter a share name, files (remove/add a file), users (remove/add), permissions (alter)
return int
//0=OK, 1=NO_PRIVS, 2=CANNOT_WRITE_DM, 3=CANNOT_WRITE_DA, 4=CANNOT_UPDATE_DM, 5=CANNOT_UPDATE_PEERS

AuthoriseUsers(vector users=NULL)
return bool

DeauthoriseUsers(vector users=NULL)
return bool

ListAuthorisedUsers()
// returns a vector of authorised users
return vector

### Messaging

SendMessage(string[] public_username, str message)
//send another peer a message (goes through buffer packets - see private API)
return int
//0=OK, 1=NO_PRIVS, 2=NO_CONNECTION

FetchMessages(int512 ID)
//checks messages and returns the status of execution
//system messages and instant messages
return bool

DeleteMessages(int512 ID, int messageIDstart, messageIDend=NULL)
//removes messages from buffer after acted upon (could be added to DA is acted on etc.)
return int
//0=OK, 1=NO_CONNECTION, 2=NO_BUFFER, 3=NO_MESSAGE

### Vault 

RegisterVault(int space)
return bool

GetVaultSpace()
return int

GetRank()
return int

BuySpace(int space)
//TODO
return bool

SellSpace(int space)
//TODO
return bool

### Defcon Definition

SetDefconLevel(int level)
return bool


