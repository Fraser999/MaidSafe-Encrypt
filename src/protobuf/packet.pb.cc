// Generated by the protocol buffer compiler.  DO NOT EDIT!

#include "packet.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format_inl.h>

namespace maidsafe {

namespace {

const ::google::protobuf::Descriptor* GenericPacket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GenericPacket_reflection_ = NULL;
const ::google::protobuf::Descriptor* BufferPacketInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BufferPacketInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BufferPacketMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BufferPacketMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* BufferPacket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BufferPacket_reflection_ = NULL;
const ::google::protobuf::Descriptor* ValidatedBufferPacketMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ValidatedBufferPacketMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContactInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContactInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContactNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContactNotification_reflection_ = NULL;
const ::google::protobuf::Descriptor* InstantFileNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InstantFileNotification_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrivateShareNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrivateShareNotification_reflection_ = NULL;
const ::google::protobuf::Descriptor* InstantMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InstantMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* StoreMessagesResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StoreMessagesResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateMSIDResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateMSIDResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MessageType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PacketType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_packet_2eproto() {
  protobuf_AddDesc_packet_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "packet.proto");
  GOOGLE_CHECK(file != NULL);
  GenericPacket_descriptor_ = file->message_type(0);
  static const int GenericPacket_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericPacket, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericPacket, signature_),
  };
  GenericPacket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GenericPacket_descriptor_,
      GenericPacket::default_instance_,
      GenericPacket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericPacket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericPacket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GenericPacket));
  BufferPacketInfo_descriptor_ = file->message_type(1);
  static const int BufferPacketInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BufferPacketInfo, owner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BufferPacketInfo, ownerpublickey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BufferPacketInfo, users_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BufferPacketInfo, online_),
  };
  BufferPacketInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BufferPacketInfo_descriptor_,
      BufferPacketInfo::default_instance_,
      BufferPacketInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BufferPacketInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BufferPacketInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BufferPacketInfo));
  BufferPacketMessage_descriptor_ = file->message_type(2);
  static const int BufferPacketMessage_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BufferPacketMessage, sender_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BufferPacketMessage, sender_public_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BufferPacketMessage, rsaenc_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BufferPacketMessage, aesenc_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BufferPacketMessage, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BufferPacketMessage, timestamp_),
  };
  BufferPacketMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BufferPacketMessage_descriptor_,
      BufferPacketMessage::default_instance_,
      BufferPacketMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BufferPacketMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BufferPacketMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BufferPacketMessage));
  BufferPacket_descriptor_ = file->message_type(3);
  static const int BufferPacket_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BufferPacket, owner_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BufferPacket, messages_),
  };
  BufferPacket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BufferPacket_descriptor_,
      BufferPacket::default_instance_,
      BufferPacket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BufferPacket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BufferPacket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BufferPacket));
  ValidatedBufferPacketMessage_descriptor_ = file->message_type(4);
  static const int ValidatedBufferPacketMessage_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValidatedBufferPacketMessage, sender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValidatedBufferPacketMessage, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValidatedBufferPacketMessage, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValidatedBufferPacketMessage, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValidatedBufferPacketMessage, timestamp_),
  };
  ValidatedBufferPacketMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ValidatedBufferPacketMessage_descriptor_,
      ValidatedBufferPacketMessage::default_instance_,
      ValidatedBufferPacketMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValidatedBufferPacketMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValidatedBufferPacketMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ValidatedBufferPacketMessage));
  ContactInfo_descriptor_ = file->message_type(5);
  static const int ContactInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactInfo, birthday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactInfo, office_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactInfo, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactInfo, country_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactInfo, city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactInfo, language_),
  };
  ContactInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContactInfo_descriptor_,
      ContactInfo::default_instance_,
      ContactInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContactInfo));
  ContactNotification_descriptor_ = file->message_type(6);
  static const int ContactNotification_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactNotification, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactNotification, contact_),
  };
  ContactNotification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContactNotification_descriptor_,
      ContactNotification::default_instance_,
      ContactNotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactNotification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactNotification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContactNotification));
  InstantFileNotification_descriptor_ = file->message_type(7);
  static const int InstantFileNotification_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstantFileNotification, ser_mdm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstantFileNotification, ser_dm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstantFileNotification, filename_),
  };
  InstantFileNotification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InstantFileNotification_descriptor_,
      InstantFileNotification::default_instance_,
      InstantFileNotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstantFileNotification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstantFileNotification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InstantFileNotification));
  PrivateShareNotification_descriptor_ = file->message_type(8);
  static const int PrivateShareNotification_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrivateShareNotification, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrivateShareNotification, msid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrivateShareNotification, public_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrivateShareNotification, private_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrivateShareNotification, admins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrivateShareNotification, readonlys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrivateShareNotification, dir_db_key_),
  };
  PrivateShareNotification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrivateShareNotification_descriptor_,
      PrivateShareNotification::default_instance_,
      PrivateShareNotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrivateShareNotification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrivateShareNotification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrivateShareNotification));
  InstantMessage_descriptor_ = file->message_type(9);
  static const int InstantMessage_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstantMessage, sender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstantMessage, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstantMessage, date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstantMessage, contact_notification_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstantMessage, instantfile_notification_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstantMessage, privateshare_notification_),
  };
  InstantMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InstantMessage_descriptor_,
      InstantMessage::default_instance_,
      InstantMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstantMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstantMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InstantMessage));
  StoreMessagesResult_descriptor_ = file->message_type(10);
  static const int StoreMessagesResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreMessagesResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreMessagesResult, stored_msgs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreMessagesResult, failed_),
  };
  StoreMessagesResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StoreMessagesResult_descriptor_,
      StoreMessagesResult::default_instance_,
      StoreMessagesResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreMessagesResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreMessagesResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StoreMessagesResult));
  CreateMSIDResult_descriptor_ = file->message_type(11);
  static const int CreateMSIDResult_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateMSIDResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateMSIDResult, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateMSIDResult, private_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateMSIDResult, public_key_),
  };
  CreateMSIDResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateMSIDResult_descriptor_,
      CreateMSIDResult::default_instance_,
      CreateMSIDResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateMSIDResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateMSIDResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateMSIDResult));
  MessageType_descriptor_ = file->enum_type(0);
  PacketType_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_packet_2eproto);
}

void protobuf_RegisterTypes() {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GenericPacket_descriptor_, &GenericPacket::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BufferPacketInfo_descriptor_, &BufferPacketInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BufferPacketMessage_descriptor_, &BufferPacketMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BufferPacket_descriptor_, &BufferPacket::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ValidatedBufferPacketMessage_descriptor_, &ValidatedBufferPacketMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContactInfo_descriptor_, &ContactInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContactNotification_descriptor_, &ContactNotification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InstantFileNotification_descriptor_, &InstantFileNotification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrivateShareNotification_descriptor_, &PrivateShareNotification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InstantMessage_descriptor_, &InstantMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StoreMessagesResult_descriptor_, &StoreMessagesResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateMSIDResult_descriptor_, &CreateMSIDResult::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_packet_2eproto() {
  delete GenericPacket::default_instance_;
  delete GenericPacket_reflection_;
  delete BufferPacketInfo::default_instance_;
  delete BufferPacketInfo_reflection_;
  delete BufferPacketMessage::default_instance_;
  delete BufferPacketMessage_reflection_;
  delete BufferPacket::default_instance_;
  delete BufferPacket_reflection_;
  delete ValidatedBufferPacketMessage::default_instance_;
  delete ValidatedBufferPacketMessage_reflection_;
  delete ContactInfo::default_instance_;
  delete ContactInfo_reflection_;
  delete ContactNotification::default_instance_;
  delete ContactNotification_reflection_;
  delete InstantFileNotification::default_instance_;
  delete InstantFileNotification_reflection_;
  delete PrivateShareNotification::default_instance_;
  delete PrivateShareNotification_reflection_;
  delete InstantMessage::default_instance_;
  delete InstantMessage_reflection_;
  delete StoreMessagesResult::default_instance_;
  delete StoreMessagesResult_reflection_;
  delete CreateMSIDResult::default_instance_;
  delete CreateMSIDResult_reflection_;
}

void protobuf_AddDesc_packet_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014packet.proto\022\010maidsafe\"0\n\rGenericPacke"
    "t\022\014\n\004data\030\001 \002(\014\022\021\n\tsignature\030\002 \002(\014\"X\n\020Bu"
    "fferPacketInfo\022\r\n\005owner\030\001 \002(\014\022\026\n\016ownerPu"
    "blicKey\030\002 \002(\014\022\r\n\005users\030\003 \003(\014\022\016\n\006online\030\004"
    " \001(\005\"\247\001\n\023BufferPacketMessage\022\021\n\tsender_i"
    "d\030\001 \002(\014\022\031\n\021sender_public_key\030\002 \001(\014\022\022\n\nRS"
    "Aenc_key\030\003 \002(\014\022\026\n\016AESenc_message\030\004 \002(\014\022#"
    "\n\004type\030\005 \002(\0162\025.maidsafe.MessageType\022\021\n\tt"
    "imestamp\030\006 \001(\r\"f\n\014BufferPacket\022+\n\nowner_"
    "info\030\001 \003(\0132\027.maidsafe.GenericPacket\022)\n\010m"
    "essages\030\002 \003(\0132\027.maidsafe.GenericPacket\"\206"
    "\001\n\034ValidatedBufferPacketMessage\022\016\n\006sende"
    "r\030\001 \002(\014\022\017\n\007message\030\002 \002(\014\022\r\n\005index\030\003 \002(\014\022"
    "#\n\004type\030\004 \002(\0162\025.maidsafe.MessageType\022\021\n\t"
    "timestamp\030\005 \001(\r\"\205\001\n\013ContactInfo\022\014\n\004name\030"
    "\001 \001(\014\022\020\n\010birthday\030\002 \001(\014\022\025\n\roffice_number"
    "\030\003 \001(\014\022\016\n\006gender\030\004 \001(\014\022\017\n\007country\030\005 \001(\005\022"
    "\014\n\004city\030\006 \001(\014\022\020\n\010language\030\007 \001(\005\"M\n\023Conta"
    "ctNotification\022\016\n\006action\030\001 \002(\005\022&\n\007contac"
    "t\030\002 \001(\0132\025.maidsafe.ContactInfo\"L\n\027Instan"
    "tFileNotification\022\017\n\007ser_mdm\030\001 \002(\014\022\016\n\006se"
    "r_dm\030\002 \002(\014\022\020\n\010filename\030\003 \002(\014\"\226\001\n\030Private"
    "ShareNotification\022\014\n\004name\030\001 \002(\014\022\014\n\004msid\030"
    "\002 \002(\014\022\022\n\npublic_key\030\003 \002(\014\022\023\n\013private_key"
    "\030\004 \001(\014\022\016\n\006admins\030\005 \003(\014\022\021\n\treadonlys\030\006 \003("
    "\014\022\022\n\ndir_db_key\030\007 \002(\014\"\210\002\n\016InstantMessage"
    "\022\016\n\006sender\030\001 \002(\014\022\017\n\007message\030\002 \002(\014\022\014\n\004dat"
    "e\030\003 \002(\005\022;\n\024contact_notification\030\004 \001(\0132\035."
    "maidsafe.ContactNotification\022C\n\030instantf"
    "ile_notification\030\005 \001(\0132!.maidsafe.Instan"
    "tFileNotification\022E\n\031privateshare_notifi"
    "cation\030\006 \001(\0132\".maidsafe.PrivateShareNoti"
    "fication\"J\n\023StoreMessagesResult\022\016\n\006resul"
    "t\030\001 \002(\r\022\023\n\013stored_msgs\030\002 \002(\005\022\016\n\006failed\030\003"
    " \003(\014\"Y\n\020CreateMSIDResult\022\016\n\006result\030\001 \002(\r"
    "\022\014\n\004name\030\002 \001(\014\022\023\n\013private_key\030\003 \001(\014\022\022\n\np"
    "ublic_key\030\004 \001(\014*F\n\013MessageType\022\024\n\020ADD_CO"
    "NTACT_RQST\020\001\022\017\n\013INSTANT_MSG\020\002\022\020\n\014STATUS_"
    "CHECK\020\003*\275\001\n\nPacketType\022\007\n\003MID\020\000\022\010\n\004SMID\020"
    "\001\022\010\n\004TMID\020\002\022\010\n\004MPID\020\003\022\010\n\004PMID\020\004\022\010\n\004MAID\020"
    "\005\022\t\n\005ANMID\020\006\022\n\n\006ANSMID\020\007\022\n\n\006ANTMID\020\010\022\n\n\006"
    "ANMPID\020\t\022\010\n\004MSID\020\n\022\n\n\006PD_DIR\020\013\022\n\n\006BUFFER"
    "\020\014\022\017\n\013BUFFER_INFO\020\r\022\022\n\016BUFFER_MESSAGE\020\016", 1719);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "packet.proto", &protobuf_RegisterTypes);
  GenericPacket::default_instance_ = new GenericPacket();
  BufferPacketInfo::default_instance_ = new BufferPacketInfo();
  BufferPacketMessage::default_instance_ = new BufferPacketMessage();
  BufferPacket::default_instance_ = new BufferPacket();
  ValidatedBufferPacketMessage::default_instance_ = new ValidatedBufferPacketMessage();
  ContactInfo::default_instance_ = new ContactInfo();
  ContactNotification::default_instance_ = new ContactNotification();
  InstantFileNotification::default_instance_ = new InstantFileNotification();
  PrivateShareNotification::default_instance_ = new PrivateShareNotification();
  InstantMessage::default_instance_ = new InstantMessage();
  StoreMessagesResult::default_instance_ = new StoreMessagesResult();
  CreateMSIDResult::default_instance_ = new CreateMSIDResult();
  GenericPacket::default_instance_->InitAsDefaultInstance();
  BufferPacketInfo::default_instance_->InitAsDefaultInstance();
  BufferPacketMessage::default_instance_->InitAsDefaultInstance();
  BufferPacket::default_instance_->InitAsDefaultInstance();
  ValidatedBufferPacketMessage::default_instance_->InitAsDefaultInstance();
  ContactInfo::default_instance_->InitAsDefaultInstance();
  ContactNotification::default_instance_->InitAsDefaultInstance();
  InstantFileNotification::default_instance_->InitAsDefaultInstance();
  PrivateShareNotification::default_instance_->InitAsDefaultInstance();
  InstantMessage::default_instance_->InitAsDefaultInstance();
  StoreMessagesResult::default_instance_->InitAsDefaultInstance();
  CreateMSIDResult::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_packet_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_packet_2eproto {
  StaticDescriptorInitializer_packet_2eproto() {
    protobuf_AddDesc_packet_2eproto();
  }
} static_descriptor_initializer_packet_2eproto_;

const ::google::protobuf::EnumDescriptor* MessageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageType_descriptor_;
}
bool MessageType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PacketType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PacketType_descriptor_;
}
bool PacketType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::std::string GenericPacket::_default_data_;
const ::std::string GenericPacket::_default_signature_;
#ifndef _MSC_VER
const int GenericPacket::kDataFieldNumber;
const int GenericPacket::kSignatureFieldNumber;
#endif  // !_MSC_VER

GenericPacket::GenericPacket()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    data_(const_cast< ::std::string*>(&_default_data_)),
    signature_(const_cast< ::std::string*>(&_default_signature_)) {
  SharedCtor();
}

void GenericPacket::InitAsDefaultInstance() {}

GenericPacket::GenericPacket(const GenericPacket& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    data_(const_cast< ::std::string*>(&_default_data_)),
    signature_(const_cast< ::std::string*>(&_default_signature_)) {
  SharedCtor();
  MergeFrom(from);
}

void GenericPacket::SharedCtor() {
  _cached_size_ = 0;
  data_ = const_cast< ::std::string*>(&_default_data_);
  signature_ = const_cast< ::std::string*>(&_default_signature_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GenericPacket::~GenericPacket() {
  SharedDtor();
}

void GenericPacket::SharedDtor() {
  if (data_ != &_default_data_) {
    delete data_;
  }
  if (signature_ != &_default_signature_) {
    delete signature_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* GenericPacket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GenericPacket_descriptor_;
}

const GenericPacket& GenericPacket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_2eproto();  return *default_instance_;
}

GenericPacket* GenericPacket::default_instance_ = NULL;

GenericPacket* GenericPacket::New() const {
  return new GenericPacket;
}

void GenericPacket::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (data_ != &_default_data_) {
        data_->clear();
      }
    }
    if (_has_bit(1)) {
      if (signature_ != &_default_signature_) {
        signature_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GenericPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required bytes data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_data()));
        if (input->ExpectTag(18)) goto parse_signature;
        break;
      }
      
      // required bytes signature = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_signature:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_signature()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GenericPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    GenericPacket::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required bytes data = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(1, this->data(), output);
  }
  
  // required bytes signature = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(2, this->signature(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GenericPacket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes data = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(1, this->data(), target);
  }
  
  // required bytes signature = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(2, this->signature(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GenericPacket::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->data());
    }
    
    // required bytes signature = 2;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->signature());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void GenericPacket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GenericPacket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GenericPacket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GenericPacket::MergeFrom(const GenericPacket& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_data(from.data());
    }
    if (from._has_bit(1)) {
      set_signature(from.signature());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GenericPacket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenericPacket::CopyFrom(const GenericPacket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenericPacket::Swap(GenericPacket* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(signature_, other->signature_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool GenericPacket::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* GenericPacket::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* GenericPacket::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return GenericPacket_reflection_;
}

// ===================================================================

const ::std::string BufferPacketInfo::_default_owner_;
const ::std::string BufferPacketInfo::_default_ownerpublickey_;
#ifndef _MSC_VER
const int BufferPacketInfo::kOwnerFieldNumber;
const int BufferPacketInfo::kOwnerPublicKeyFieldNumber;
const int BufferPacketInfo::kUsersFieldNumber;
const int BufferPacketInfo::kOnlineFieldNumber;
#endif  // !_MSC_VER

BufferPacketInfo::BufferPacketInfo()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    owner_(const_cast< ::std::string*>(&_default_owner_)),
    ownerpublickey_(const_cast< ::std::string*>(&_default_ownerpublickey_)),
    users_(),
    online_(0) {
  SharedCtor();
}

void BufferPacketInfo::InitAsDefaultInstance() {}

BufferPacketInfo::BufferPacketInfo(const BufferPacketInfo& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    owner_(const_cast< ::std::string*>(&_default_owner_)),
    ownerpublickey_(const_cast< ::std::string*>(&_default_ownerpublickey_)),
    users_(),
    online_(0) {
  SharedCtor();
  MergeFrom(from);
}

void BufferPacketInfo::SharedCtor() {
  _cached_size_ = 0;
  owner_ = const_cast< ::std::string*>(&_default_owner_);
  ownerpublickey_ = const_cast< ::std::string*>(&_default_ownerpublickey_);
  online_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BufferPacketInfo::~BufferPacketInfo() {
  SharedDtor();
}

void BufferPacketInfo::SharedDtor() {
  if (owner_ != &_default_owner_) {
    delete owner_;
  }
  if (ownerpublickey_ != &_default_ownerpublickey_) {
    delete ownerpublickey_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* BufferPacketInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BufferPacketInfo_descriptor_;
}

const BufferPacketInfo& BufferPacketInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_2eproto();  return *default_instance_;
}

BufferPacketInfo* BufferPacketInfo::default_instance_ = NULL;

BufferPacketInfo* BufferPacketInfo::New() const {
  return new BufferPacketInfo;
}

void BufferPacketInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (owner_ != &_default_owner_) {
        owner_->clear();
      }
    }
    if (_has_bit(1)) {
      if (ownerpublickey_ != &_default_ownerpublickey_) {
        ownerpublickey_->clear();
      }
    }
    online_ = 0;
  }
  users_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BufferPacketInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required bytes owner = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_owner()));
        if (input->ExpectTag(18)) goto parse_ownerPublicKey;
        break;
      }
      
      // required bytes ownerPublicKey = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ownerPublicKey:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_ownerpublickey()));
        if (input->ExpectTag(26)) goto parse_users;
        break;
      }
      
      // repeated bytes users = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_users:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(
             input, add_users()));
        if (input->ExpectTag(26)) goto parse_users;
        if (input->ExpectTag(32)) goto parse_online;
        break;
      }
      
      // optional int32 online = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_online:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &online_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BufferPacketInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    BufferPacketInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required bytes owner = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(1, this->owner(), output);
  }
  
  // required bytes ownerPublicKey = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(2, this->ownerpublickey(), output);
  }
  
  // repeated bytes users = 3;
  for (int i = 0; i < this->users_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteBytes(3, this->users(i), output);
  }
  
  // optional int32 online = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(4, this->online(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BufferPacketInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes owner = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(1, this->owner(), target);
  }
  
  // required bytes ownerPublicKey = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(2, this->ownerpublickey(), target);
  }
  
  // repeated bytes users = 3;
  for (int i = 0; i < this->users_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(3, this->users(i), target);
  }
  
  // optional int32 online = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(4, this->online(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BufferPacketInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes owner = 1;
    if (has_owner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->owner());
    }
    
    // required bytes ownerPublicKey = 2;
    if (has_ownerpublickey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->ownerpublickey());
    }
    
    // optional int32 online = 4;
    if (has_online()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->online());
    }
    
  }
  // repeated bytes users = 3;
  total_size += 1 * this->users_size();
  for (int i = 0; i < this->users_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormat::BytesSize(
      this->users(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void BufferPacketInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BufferPacketInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BufferPacketInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BufferPacketInfo::MergeFrom(const BufferPacketInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  users_.MergeFrom(from.users_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_owner(from.owner());
    }
    if (from._has_bit(1)) {
      set_ownerpublickey(from.ownerpublickey());
    }
    if (from._has_bit(3)) {
      set_online(from.online());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BufferPacketInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BufferPacketInfo::CopyFrom(const BufferPacketInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BufferPacketInfo::Swap(BufferPacketInfo* other) {
  if (other != this) {
    std::swap(owner_, other->owner_);
    std::swap(ownerpublickey_, other->ownerpublickey_);
    users_.Swap(&other->users_);
    std::swap(online_, other->online_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool BufferPacketInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* BufferPacketInfo::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* BufferPacketInfo::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return BufferPacketInfo_reflection_;
}

// ===================================================================

const ::std::string BufferPacketMessage::_default_sender_id_;
const ::std::string BufferPacketMessage::_default_sender_public_key_;
const ::std::string BufferPacketMessage::_default_rsaenc_key_;
const ::std::string BufferPacketMessage::_default_aesenc_message_;
#ifndef _MSC_VER
const int BufferPacketMessage::kSenderIdFieldNumber;
const int BufferPacketMessage::kSenderPublicKeyFieldNumber;
const int BufferPacketMessage::kRSAencKeyFieldNumber;
const int BufferPacketMessage::kAESencMessageFieldNumber;
const int BufferPacketMessage::kTypeFieldNumber;
const int BufferPacketMessage::kTimestampFieldNumber;
#endif  // !_MSC_VER

BufferPacketMessage::BufferPacketMessage()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    sender_id_(const_cast< ::std::string*>(&_default_sender_id_)),
    sender_public_key_(const_cast< ::std::string*>(&_default_sender_public_key_)),
    rsaenc_key_(const_cast< ::std::string*>(&_default_rsaenc_key_)),
    aesenc_message_(const_cast< ::std::string*>(&_default_aesenc_message_)),
    type_(1),
    timestamp_(0u) {
  SharedCtor();
}

void BufferPacketMessage::InitAsDefaultInstance() {}

BufferPacketMessage::BufferPacketMessage(const BufferPacketMessage& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    sender_id_(const_cast< ::std::string*>(&_default_sender_id_)),
    sender_public_key_(const_cast< ::std::string*>(&_default_sender_public_key_)),
    rsaenc_key_(const_cast< ::std::string*>(&_default_rsaenc_key_)),
    aesenc_message_(const_cast< ::std::string*>(&_default_aesenc_message_)),
    type_(1),
    timestamp_(0u) {
  SharedCtor();
  MergeFrom(from);
}

void BufferPacketMessage::SharedCtor() {
  _cached_size_ = 0;
  sender_id_ = const_cast< ::std::string*>(&_default_sender_id_);
  sender_public_key_ = const_cast< ::std::string*>(&_default_sender_public_key_);
  rsaenc_key_ = const_cast< ::std::string*>(&_default_rsaenc_key_);
  aesenc_message_ = const_cast< ::std::string*>(&_default_aesenc_message_);
  type_ = 1;
  timestamp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BufferPacketMessage::~BufferPacketMessage() {
  SharedDtor();
}

void BufferPacketMessage::SharedDtor() {
  if (sender_id_ != &_default_sender_id_) {
    delete sender_id_;
  }
  if (sender_public_key_ != &_default_sender_public_key_) {
    delete sender_public_key_;
  }
  if (rsaenc_key_ != &_default_rsaenc_key_) {
    delete rsaenc_key_;
  }
  if (aesenc_message_ != &_default_aesenc_message_) {
    delete aesenc_message_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* BufferPacketMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BufferPacketMessage_descriptor_;
}

const BufferPacketMessage& BufferPacketMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_2eproto();  return *default_instance_;
}

BufferPacketMessage* BufferPacketMessage::default_instance_ = NULL;

BufferPacketMessage* BufferPacketMessage::New() const {
  return new BufferPacketMessage;
}

void BufferPacketMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (sender_id_ != &_default_sender_id_) {
        sender_id_->clear();
      }
    }
    if (_has_bit(1)) {
      if (sender_public_key_ != &_default_sender_public_key_) {
        sender_public_key_->clear();
      }
    }
    if (_has_bit(2)) {
      if (rsaenc_key_ != &_default_rsaenc_key_) {
        rsaenc_key_->clear();
      }
    }
    if (_has_bit(3)) {
      if (aesenc_message_ != &_default_aesenc_message_) {
        aesenc_message_->clear();
      }
    }
    type_ = 1;
    timestamp_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BufferPacketMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required bytes sender_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_sender_id()));
        if (input->ExpectTag(18)) goto parse_sender_public_key;
        break;
      }
      
      // optional bytes sender_public_key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_sender_public_key:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_sender_public_key()));
        if (input->ExpectTag(26)) goto parse_RSAenc_key;
        break;
      }
      
      // required bytes RSAenc_key = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_RSAenc_key:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_rsaenc_key()));
        if (input->ExpectTag(34)) goto parse_AESenc_message;
        break;
      }
      
      // required bytes AESenc_message = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_AESenc_message:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_aesenc_message()));
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }
      
      // required .maidsafe.MessageType type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_type:
        int value;
        DO_(::google::protobuf::internal::WireFormat::ReadEnum(input, &value));
        if (maidsafe::MessageType_IsValid(value)) {
          set_type(static_cast< maidsafe::MessageType >(value));
        } else {
          mutable_unknown_fields()->AddVarint(5, value);
        }
        if (input->ExpectTag(48)) goto parse_timestamp;
        break;
      }
      
      // optional uint32 timestamp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_timestamp:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &timestamp_));
        _set_bit(5);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BufferPacketMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    BufferPacketMessage::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required bytes sender_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(1, this->sender_id(), output);
  }
  
  // optional bytes sender_public_key = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(2, this->sender_public_key(), output);
  }
  
  // required bytes RSAenc_key = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(3, this->rsaenc_key(), output);
  }
  
  // required bytes AESenc_message = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(4, this->aesenc_message(), output);
  }
  
  // required .maidsafe.MessageType type = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteEnum(5, this->type(), output);
  }
  
  // optional uint32 timestamp = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->timestamp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BufferPacketMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes sender_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(1, this->sender_id(), target);
  }
  
  // optional bytes sender_public_key = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(2, this->sender_public_key(), target);
  }
  
  // required bytes RSAenc_key = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(3, this->rsaenc_key(), target);
  }
  
  // required bytes AESenc_message = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(4, this->aesenc_message(), target);
  }
  
  // required .maidsafe.MessageType type = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteEnumToArray(5, this->type(), target);
  }
  
  // optional uint32 timestamp = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->timestamp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BufferPacketMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes sender_id = 1;
    if (has_sender_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->sender_id());
    }
    
    // optional bytes sender_public_key = 2;
    if (has_sender_public_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->sender_public_key());
    }
    
    // required bytes RSAenc_key = 3;
    if (has_rsaenc_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->rsaenc_key());
    }
    
    // required bytes AESenc_message = 4;
    if (has_aesenc_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->aesenc_message());
    }
    
    // required .maidsafe.MessageType type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::EnumSize(this->type());
    }
    
    // optional uint32 timestamp = 6;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->timestamp());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void BufferPacketMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BufferPacketMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BufferPacketMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BufferPacketMessage::MergeFrom(const BufferPacketMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_sender_id(from.sender_id());
    }
    if (from._has_bit(1)) {
      set_sender_public_key(from.sender_public_key());
    }
    if (from._has_bit(2)) {
      set_rsaenc_key(from.rsaenc_key());
    }
    if (from._has_bit(3)) {
      set_aesenc_message(from.aesenc_message());
    }
    if (from._has_bit(4)) {
      set_type(from.type());
    }
    if (from._has_bit(5)) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BufferPacketMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BufferPacketMessage::CopyFrom(const BufferPacketMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BufferPacketMessage::Swap(BufferPacketMessage* other) {
  if (other != this) {
    std::swap(sender_id_, other->sender_id_);
    std::swap(sender_public_key_, other->sender_public_key_);
    std::swap(rsaenc_key_, other->rsaenc_key_);
    std::swap(aesenc_message_, other->aesenc_message_);
    std::swap(type_, other->type_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool BufferPacketMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001d) != 0x0000001d) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* BufferPacketMessage::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* BufferPacketMessage::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return BufferPacketMessage_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int BufferPacket::kOwnerInfoFieldNumber;
const int BufferPacket::kMessagesFieldNumber;
#endif  // !_MSC_VER

BufferPacket::BufferPacket()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    owner_info_(),
    messages_() {
  SharedCtor();
}

void BufferPacket::InitAsDefaultInstance() {}

BufferPacket::BufferPacket(const BufferPacket& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    owner_info_(),
    messages_() {
  SharedCtor();
  MergeFrom(from);
}

void BufferPacket::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BufferPacket::~BufferPacket() {
  SharedDtor();
}

void BufferPacket::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* BufferPacket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BufferPacket_descriptor_;
}

const BufferPacket& BufferPacket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_2eproto();  return *default_instance_;
}

BufferPacket* BufferPacket::default_instance_ = NULL;

BufferPacket* BufferPacket::New() const {
  return new BufferPacket;
}

void BufferPacket::Clear() {
  owner_info_.Clear();
  messages_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BufferPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // repeated .maidsafe.GenericPacket owner_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_owner_info:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_owner_info()));
        if (input->ExpectTag(10)) goto parse_owner_info;
        if (input->ExpectTag(18)) goto parse_messages;
        break;
      }
      
      // repeated .maidsafe.GenericPacket messages = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_messages:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_messages()));
        if (input->ExpectTag(18)) goto parse_messages;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BufferPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    BufferPacket::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .maidsafe.GenericPacket owner_info = 1;
  for (int i = 0; i < this->owner_info_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->owner_info(i), output);
  }
  
  // repeated .maidsafe.GenericPacket messages = 2;
  for (int i = 0; i < this->messages_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->messages(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BufferPacket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .maidsafe.GenericPacket owner_info = 1;
  for (int i = 0; i < this->owner_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->owner_info(i), target);
  }
  
  // repeated .maidsafe.GenericPacket messages = 2;
  for (int i = 0; i < this->messages_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->messages(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BufferPacket::ByteSize() const {
  int total_size = 0;
  
  // repeated .maidsafe.GenericPacket owner_info = 1;
  total_size += 1 * this->owner_info_size();
  for (int i = 0; i < this->owner_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->owner_info(i));
  }
  
  // repeated .maidsafe.GenericPacket messages = 2;
  total_size += 1 * this->messages_size();
  for (int i = 0; i < this->messages_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->messages(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void BufferPacket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BufferPacket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BufferPacket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BufferPacket::MergeFrom(const BufferPacket& from) {
  GOOGLE_CHECK_NE(&from, this);
  owner_info_.MergeFrom(from.owner_info_);
  messages_.MergeFrom(from.messages_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BufferPacket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BufferPacket::CopyFrom(const BufferPacket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BufferPacket::Swap(BufferPacket* other) {
  if (other != this) {
    owner_info_.Swap(&other->owner_info_);
    messages_.Swap(&other->messages_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool BufferPacket::IsInitialized() const {
  
  for (int i = 0; i < owner_info_size(); i++) {
    if (!this->owner_info(i).IsInitialized()) return false;
  }
  for (int i = 0; i < messages_size(); i++) {
    if (!this->messages(i).IsInitialized()) return false;
  }
  return true;
}

const ::google::protobuf::Descriptor* BufferPacket::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* BufferPacket::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return BufferPacket_reflection_;
}

// ===================================================================

const ::std::string ValidatedBufferPacketMessage::_default_sender_;
const ::std::string ValidatedBufferPacketMessage::_default_message_;
const ::std::string ValidatedBufferPacketMessage::_default_index_;
#ifndef _MSC_VER
const int ValidatedBufferPacketMessage::kSenderFieldNumber;
const int ValidatedBufferPacketMessage::kMessageFieldNumber;
const int ValidatedBufferPacketMessage::kIndexFieldNumber;
const int ValidatedBufferPacketMessage::kTypeFieldNumber;
const int ValidatedBufferPacketMessage::kTimestampFieldNumber;
#endif  // !_MSC_VER

ValidatedBufferPacketMessage::ValidatedBufferPacketMessage()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    sender_(const_cast< ::std::string*>(&_default_sender_)),
    message_(const_cast< ::std::string*>(&_default_message_)),
    index_(const_cast< ::std::string*>(&_default_index_)),
    type_(1),
    timestamp_(0u) {
  SharedCtor();
}

void ValidatedBufferPacketMessage::InitAsDefaultInstance() {}

ValidatedBufferPacketMessage::ValidatedBufferPacketMessage(const ValidatedBufferPacketMessage& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    sender_(const_cast< ::std::string*>(&_default_sender_)),
    message_(const_cast< ::std::string*>(&_default_message_)),
    index_(const_cast< ::std::string*>(&_default_index_)),
    type_(1),
    timestamp_(0u) {
  SharedCtor();
  MergeFrom(from);
}

void ValidatedBufferPacketMessage::SharedCtor() {
  _cached_size_ = 0;
  sender_ = const_cast< ::std::string*>(&_default_sender_);
  message_ = const_cast< ::std::string*>(&_default_message_);
  index_ = const_cast< ::std::string*>(&_default_index_);
  type_ = 1;
  timestamp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ValidatedBufferPacketMessage::~ValidatedBufferPacketMessage() {
  SharedDtor();
}

void ValidatedBufferPacketMessage::SharedDtor() {
  if (sender_ != &_default_sender_) {
    delete sender_;
  }
  if (message_ != &_default_message_) {
    delete message_;
  }
  if (index_ != &_default_index_) {
    delete index_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* ValidatedBufferPacketMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ValidatedBufferPacketMessage_descriptor_;
}

const ValidatedBufferPacketMessage& ValidatedBufferPacketMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_2eproto();  return *default_instance_;
}

ValidatedBufferPacketMessage* ValidatedBufferPacketMessage::default_instance_ = NULL;

ValidatedBufferPacketMessage* ValidatedBufferPacketMessage::New() const {
  return new ValidatedBufferPacketMessage;
}

void ValidatedBufferPacketMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (sender_ != &_default_sender_) {
        sender_->clear();
      }
    }
    if (_has_bit(1)) {
      if (message_ != &_default_message_) {
        message_->clear();
      }
    }
    if (_has_bit(2)) {
      if (index_ != &_default_index_) {
        index_->clear();
      }
    }
    type_ = 1;
    timestamp_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ValidatedBufferPacketMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required bytes sender = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_sender()));
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }
      
      // required bytes message = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_message:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_message()));
        if (input->ExpectTag(26)) goto parse_index;
        break;
      }
      
      // required bytes index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_index:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_index()));
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }
      
      // required .maidsafe.MessageType type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_type:
        int value;
        DO_(::google::protobuf::internal::WireFormat::ReadEnum(input, &value));
        if (maidsafe::MessageType_IsValid(value)) {
          set_type(static_cast< maidsafe::MessageType >(value));
        } else {
          mutable_unknown_fields()->AddVarint(4, value);
        }
        if (input->ExpectTag(40)) goto parse_timestamp;
        break;
      }
      
      // optional uint32 timestamp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_timestamp:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &timestamp_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ValidatedBufferPacketMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    ValidatedBufferPacketMessage::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required bytes sender = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(1, this->sender(), output);
  }
  
  // required bytes message = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(2, this->message(), output);
  }
  
  // required bytes index = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(3, this->index(), output);
  }
  
  // required .maidsafe.MessageType type = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteEnum(4, this->type(), output);
  }
  
  // optional uint32 timestamp = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->timestamp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ValidatedBufferPacketMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes sender = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(1, this->sender(), target);
  }
  
  // required bytes message = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(2, this->message(), target);
  }
  
  // required bytes index = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(3, this->index(), target);
  }
  
  // required .maidsafe.MessageType type = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteEnumToArray(4, this->type(), target);
  }
  
  // optional uint32 timestamp = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->timestamp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ValidatedBufferPacketMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes sender = 1;
    if (has_sender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->sender());
    }
    
    // required bytes message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->message());
    }
    
    // required bytes index = 3;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->index());
    }
    
    // required .maidsafe.MessageType type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::EnumSize(this->type());
    }
    
    // optional uint32 timestamp = 5;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->timestamp());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void ValidatedBufferPacketMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ValidatedBufferPacketMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ValidatedBufferPacketMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ValidatedBufferPacketMessage::MergeFrom(const ValidatedBufferPacketMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_sender(from.sender());
    }
    if (from._has_bit(1)) {
      set_message(from.message());
    }
    if (from._has_bit(2)) {
      set_index(from.index());
    }
    if (from._has_bit(3)) {
      set_type(from.type());
    }
    if (from._has_bit(4)) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ValidatedBufferPacketMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ValidatedBufferPacketMessage::CopyFrom(const ValidatedBufferPacketMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ValidatedBufferPacketMessage::Swap(ValidatedBufferPacketMessage* other) {
  if (other != this) {
    std::swap(sender_, other->sender_);
    std::swap(message_, other->message_);
    std::swap(index_, other->index_);
    std::swap(type_, other->type_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool ValidatedBufferPacketMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* ValidatedBufferPacketMessage::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* ValidatedBufferPacketMessage::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return ValidatedBufferPacketMessage_reflection_;
}

// ===================================================================

const ::std::string ContactInfo::_default_name_;
const ::std::string ContactInfo::_default_birthday_;
const ::std::string ContactInfo::_default_office_number_;
const ::std::string ContactInfo::_default_gender_;
const ::std::string ContactInfo::_default_city_;
#ifndef _MSC_VER
const int ContactInfo::kNameFieldNumber;
const int ContactInfo::kBirthdayFieldNumber;
const int ContactInfo::kOfficeNumberFieldNumber;
const int ContactInfo::kGenderFieldNumber;
const int ContactInfo::kCountryFieldNumber;
const int ContactInfo::kCityFieldNumber;
const int ContactInfo::kLanguageFieldNumber;
#endif  // !_MSC_VER

ContactInfo::ContactInfo()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    name_(const_cast< ::std::string*>(&_default_name_)),
    birthday_(const_cast< ::std::string*>(&_default_birthday_)),
    office_number_(const_cast< ::std::string*>(&_default_office_number_)),
    gender_(const_cast< ::std::string*>(&_default_gender_)),
    country_(0),
    city_(const_cast< ::std::string*>(&_default_city_)),
    language_(0) {
  SharedCtor();
}

void ContactInfo::InitAsDefaultInstance() {}

ContactInfo::ContactInfo(const ContactInfo& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    name_(const_cast< ::std::string*>(&_default_name_)),
    birthday_(const_cast< ::std::string*>(&_default_birthday_)),
    office_number_(const_cast< ::std::string*>(&_default_office_number_)),
    gender_(const_cast< ::std::string*>(&_default_gender_)),
    country_(0),
    city_(const_cast< ::std::string*>(&_default_city_)),
    language_(0) {
  SharedCtor();
  MergeFrom(from);
}

void ContactInfo::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&_default_name_);
  birthday_ = const_cast< ::std::string*>(&_default_birthday_);
  office_number_ = const_cast< ::std::string*>(&_default_office_number_);
  gender_ = const_cast< ::std::string*>(&_default_gender_);
  country_ = 0;
  city_ = const_cast< ::std::string*>(&_default_city_);
  language_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContactInfo::~ContactInfo() {
  SharedDtor();
}

void ContactInfo::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (birthday_ != &_default_birthday_) {
    delete birthday_;
  }
  if (office_number_ != &_default_office_number_) {
    delete office_number_;
  }
  if (gender_ != &_default_gender_) {
    delete gender_;
  }
  if (city_ != &_default_city_) {
    delete city_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* ContactInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContactInfo_descriptor_;
}

const ContactInfo& ContactInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_2eproto();  return *default_instance_;
}

ContactInfo* ContactInfo::default_instance_ = NULL;

ContactInfo* ContactInfo::New() const {
  return new ContactInfo;
}

void ContactInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    if (_has_bit(1)) {
      if (birthday_ != &_default_birthday_) {
        birthday_->clear();
      }
    }
    if (_has_bit(2)) {
      if (office_number_ != &_default_office_number_) {
        office_number_->clear();
      }
    }
    if (_has_bit(3)) {
      if (gender_ != &_default_gender_) {
        gender_->clear();
      }
    }
    country_ = 0;
    if (_has_bit(5)) {
      if (city_ != &_default_city_) {
        city_->clear();
      }
    }
    language_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContactInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional bytes name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_name()));
        if (input->ExpectTag(18)) goto parse_birthday;
        break;
      }
      
      // optional bytes birthday = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_birthday:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_birthday()));
        if (input->ExpectTag(26)) goto parse_office_number;
        break;
      }
      
      // optional bytes office_number = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_office_number:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_office_number()));
        if (input->ExpectTag(34)) goto parse_gender;
        break;
      }
      
      // optional bytes gender = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_gender:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_gender()));
        if (input->ExpectTag(40)) goto parse_country;
        break;
      }
      
      // optional int32 country = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_country:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &country_));
        _set_bit(4);
        if (input->ExpectTag(50)) goto parse_city;
        break;
      }
      
      // optional bytes city = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_city:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_city()));
        if (input->ExpectTag(56)) goto parse_language;
        break;
      }
      
      // optional int32 language = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_language:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &language_));
        _set_bit(6);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContactInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    ContactInfo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional bytes name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(1, this->name(), output);
  }
  
  // optional bytes birthday = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(2, this->birthday(), output);
  }
  
  // optional bytes office_number = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(3, this->office_number(), output);
  }
  
  // optional bytes gender = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(4, this->gender(), output);
  }
  
  // optional int32 country = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(5, this->country(), output);
  }
  
  // optional bytes city = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(6, this->city(), output);
  }
  
  // optional int32 language = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(7, this->language(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContactInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes name = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(1, this->name(), target);
  }
  
  // optional bytes birthday = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(2, this->birthday(), target);
  }
  
  // optional bytes office_number = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(3, this->office_number(), target);
  }
  
  // optional bytes gender = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(4, this->gender(), target);
  }
  
  // optional int32 country = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(5, this->country(), target);
  }
  
  // optional bytes city = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(6, this->city(), target);
  }
  
  // optional int32 language = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(7, this->language(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContactInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->name());
    }
    
    // optional bytes birthday = 2;
    if (has_birthday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->birthday());
    }
    
    // optional bytes office_number = 3;
    if (has_office_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->office_number());
    }
    
    // optional bytes gender = 4;
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->gender());
    }
    
    // optional int32 country = 5;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->country());
    }
    
    // optional bytes city = 6;
    if (has_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->city());
    }
    
    // optional int32 language = 7;
    if (has_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->language());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void ContactInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContactInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContactInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContactInfo::MergeFrom(const ContactInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_name(from.name());
    }
    if (from._has_bit(1)) {
      set_birthday(from.birthday());
    }
    if (from._has_bit(2)) {
      set_office_number(from.office_number());
    }
    if (from._has_bit(3)) {
      set_gender(from.gender());
    }
    if (from._has_bit(4)) {
      set_country(from.country());
    }
    if (from._has_bit(5)) {
      set_city(from.city());
    }
    if (from._has_bit(6)) {
      set_language(from.language());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContactInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContactInfo::CopyFrom(const ContactInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContactInfo::Swap(ContactInfo* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(birthday_, other->birthday_);
    std::swap(office_number_, other->office_number_);
    std::swap(gender_, other->gender_);
    std::swap(country_, other->country_);
    std::swap(city_, other->city_);
    std::swap(language_, other->language_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool ContactInfo::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* ContactInfo::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* ContactInfo::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return ContactInfo_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int ContactNotification::kActionFieldNumber;
const int ContactNotification::kContactFieldNumber;
#endif  // !_MSC_VER

ContactNotification::ContactNotification()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    action_(0),
    contact_(NULL) {
  SharedCtor();
}

void ContactNotification::InitAsDefaultInstance() {  contact_ = const_cast< ::maidsafe::ContactInfo*>(&::maidsafe::ContactInfo::default_instance());
}

ContactNotification::ContactNotification(const ContactNotification& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    action_(0),
    contact_(NULL) {
  SharedCtor();
  MergeFrom(from);
}

void ContactNotification::SharedCtor() {
  _cached_size_ = 0;
  action_ = 0;
  contact_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContactNotification::~ContactNotification() {
  SharedDtor();
}

void ContactNotification::SharedDtor() {
  if (this != default_instance_) {
    delete contact_;
  }
}

const ::google::protobuf::Descriptor* ContactNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContactNotification_descriptor_;
}

const ContactNotification& ContactNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_2eproto();  return *default_instance_;
}

ContactNotification* ContactNotification::default_instance_ = NULL;

ContactNotification* ContactNotification::New() const {
  return new ContactNotification;
}

void ContactNotification::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    action_ = 0;
    if (_has_bit(1)) {
      if (contact_ != NULL) contact_->::maidsafe::ContactInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContactNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required int32 action = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &action_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_contact;
        break;
      }
      
      // optional .maidsafe.ContactInfo contact = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_contact:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_contact()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContactNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    ContactNotification::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 action = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(1, this->action(), output);
  }
  
  // optional .maidsafe.ContactInfo contact = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->contact(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContactNotification::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 action = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(1, this->action(), target);
  }
  
  // optional .maidsafe.ContactInfo contact = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->contact(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContactNotification::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 action = 1;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->action());
    }
    
    // optional .maidsafe.ContactInfo contact = 2;
    if (has_contact()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->contact());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void ContactNotification::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContactNotification* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContactNotification*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContactNotification::MergeFrom(const ContactNotification& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_action(from.action());
    }
    if (from._has_bit(1)) {
      mutable_contact()->::maidsafe::ContactInfo::MergeFrom(from.contact());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContactNotification::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContactNotification::CopyFrom(const ContactNotification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContactNotification::Swap(ContactNotification* other) {
  if (other != this) {
    std::swap(action_, other->action_);
    std::swap(contact_, other->contact_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool ContactNotification::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* ContactNotification::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* ContactNotification::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return ContactNotification_reflection_;
}

// ===================================================================

const ::std::string InstantFileNotification::_default_ser_mdm_;
const ::std::string InstantFileNotification::_default_ser_dm_;
const ::std::string InstantFileNotification::_default_filename_;
#ifndef _MSC_VER
const int InstantFileNotification::kSerMdmFieldNumber;
const int InstantFileNotification::kSerDmFieldNumber;
const int InstantFileNotification::kFilenameFieldNumber;
#endif  // !_MSC_VER

InstantFileNotification::InstantFileNotification()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    ser_mdm_(const_cast< ::std::string*>(&_default_ser_mdm_)),
    ser_dm_(const_cast< ::std::string*>(&_default_ser_dm_)),
    filename_(const_cast< ::std::string*>(&_default_filename_)) {
  SharedCtor();
}

void InstantFileNotification::InitAsDefaultInstance() {}

InstantFileNotification::InstantFileNotification(const InstantFileNotification& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    ser_mdm_(const_cast< ::std::string*>(&_default_ser_mdm_)),
    ser_dm_(const_cast< ::std::string*>(&_default_ser_dm_)),
    filename_(const_cast< ::std::string*>(&_default_filename_)) {
  SharedCtor();
  MergeFrom(from);
}

void InstantFileNotification::SharedCtor() {
  _cached_size_ = 0;
  ser_mdm_ = const_cast< ::std::string*>(&_default_ser_mdm_);
  ser_dm_ = const_cast< ::std::string*>(&_default_ser_dm_);
  filename_ = const_cast< ::std::string*>(&_default_filename_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InstantFileNotification::~InstantFileNotification() {
  SharedDtor();
}

void InstantFileNotification::SharedDtor() {
  if (ser_mdm_ != &_default_ser_mdm_) {
    delete ser_mdm_;
  }
  if (ser_dm_ != &_default_ser_dm_) {
    delete ser_dm_;
  }
  if (filename_ != &_default_filename_) {
    delete filename_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* InstantFileNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InstantFileNotification_descriptor_;
}

const InstantFileNotification& InstantFileNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_2eproto();  return *default_instance_;
}

InstantFileNotification* InstantFileNotification::default_instance_ = NULL;

InstantFileNotification* InstantFileNotification::New() const {
  return new InstantFileNotification;
}

void InstantFileNotification::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (ser_mdm_ != &_default_ser_mdm_) {
        ser_mdm_->clear();
      }
    }
    if (_has_bit(1)) {
      if (ser_dm_ != &_default_ser_dm_) {
        ser_dm_->clear();
      }
    }
    if (_has_bit(2)) {
      if (filename_ != &_default_filename_) {
        filename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InstantFileNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required bytes ser_mdm = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_ser_mdm()));
        if (input->ExpectTag(18)) goto parse_ser_dm;
        break;
      }
      
      // required bytes ser_dm = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ser_dm:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_ser_dm()));
        if (input->ExpectTag(26)) goto parse_filename;
        break;
      }
      
      // required bytes filename = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_filename:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_filename()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InstantFileNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    InstantFileNotification::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required bytes ser_mdm = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(1, this->ser_mdm(), output);
  }
  
  // required bytes ser_dm = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(2, this->ser_dm(), output);
  }
  
  // required bytes filename = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(3, this->filename(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InstantFileNotification::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes ser_mdm = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(1, this->ser_mdm(), target);
  }
  
  // required bytes ser_dm = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(2, this->ser_dm(), target);
  }
  
  // required bytes filename = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(3, this->filename(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InstantFileNotification::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes ser_mdm = 1;
    if (has_ser_mdm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->ser_mdm());
    }
    
    // required bytes ser_dm = 2;
    if (has_ser_dm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->ser_dm());
    }
    
    // required bytes filename = 3;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->filename());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void InstantFileNotification::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InstantFileNotification* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InstantFileNotification*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InstantFileNotification::MergeFrom(const InstantFileNotification& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_ser_mdm(from.ser_mdm());
    }
    if (from._has_bit(1)) {
      set_ser_dm(from.ser_dm());
    }
    if (from._has_bit(2)) {
      set_filename(from.filename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InstantFileNotification::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstantFileNotification::CopyFrom(const InstantFileNotification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstantFileNotification::Swap(InstantFileNotification* other) {
  if (other != this) {
    std::swap(ser_mdm_, other->ser_mdm_);
    std::swap(ser_dm_, other->ser_dm_);
    std::swap(filename_, other->filename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool InstantFileNotification::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* InstantFileNotification::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* InstantFileNotification::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return InstantFileNotification_reflection_;
}

// ===================================================================

const ::std::string PrivateShareNotification::_default_name_;
const ::std::string PrivateShareNotification::_default_msid_;
const ::std::string PrivateShareNotification::_default_public_key_;
const ::std::string PrivateShareNotification::_default_private_key_;
const ::std::string PrivateShareNotification::_default_dir_db_key_;
#ifndef _MSC_VER
const int PrivateShareNotification::kNameFieldNumber;
const int PrivateShareNotification::kMsidFieldNumber;
const int PrivateShareNotification::kPublicKeyFieldNumber;
const int PrivateShareNotification::kPrivateKeyFieldNumber;
const int PrivateShareNotification::kAdminsFieldNumber;
const int PrivateShareNotification::kReadonlysFieldNumber;
const int PrivateShareNotification::kDirDbKeyFieldNumber;
#endif  // !_MSC_VER

PrivateShareNotification::PrivateShareNotification()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    name_(const_cast< ::std::string*>(&_default_name_)),
    msid_(const_cast< ::std::string*>(&_default_msid_)),
    public_key_(const_cast< ::std::string*>(&_default_public_key_)),
    private_key_(const_cast< ::std::string*>(&_default_private_key_)),
    admins_(),
    readonlys_(),
    dir_db_key_(const_cast< ::std::string*>(&_default_dir_db_key_)) {
  SharedCtor();
}

void PrivateShareNotification::InitAsDefaultInstance() {}

PrivateShareNotification::PrivateShareNotification(const PrivateShareNotification& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    name_(const_cast< ::std::string*>(&_default_name_)),
    msid_(const_cast< ::std::string*>(&_default_msid_)),
    public_key_(const_cast< ::std::string*>(&_default_public_key_)),
    private_key_(const_cast< ::std::string*>(&_default_private_key_)),
    admins_(),
    readonlys_(),
    dir_db_key_(const_cast< ::std::string*>(&_default_dir_db_key_)) {
  SharedCtor();
  MergeFrom(from);
}

void PrivateShareNotification::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&_default_name_);
  msid_ = const_cast< ::std::string*>(&_default_msid_);
  public_key_ = const_cast< ::std::string*>(&_default_public_key_);
  private_key_ = const_cast< ::std::string*>(&_default_private_key_);
  dir_db_key_ = const_cast< ::std::string*>(&_default_dir_db_key_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrivateShareNotification::~PrivateShareNotification() {
  SharedDtor();
}

void PrivateShareNotification::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (msid_ != &_default_msid_) {
    delete msid_;
  }
  if (public_key_ != &_default_public_key_) {
    delete public_key_;
  }
  if (private_key_ != &_default_private_key_) {
    delete private_key_;
  }
  if (dir_db_key_ != &_default_dir_db_key_) {
    delete dir_db_key_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PrivateShareNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrivateShareNotification_descriptor_;
}

const PrivateShareNotification& PrivateShareNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_2eproto();  return *default_instance_;
}

PrivateShareNotification* PrivateShareNotification::default_instance_ = NULL;

PrivateShareNotification* PrivateShareNotification::New() const {
  return new PrivateShareNotification;
}

void PrivateShareNotification::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    if (_has_bit(1)) {
      if (msid_ != &_default_msid_) {
        msid_->clear();
      }
    }
    if (_has_bit(2)) {
      if (public_key_ != &_default_public_key_) {
        public_key_->clear();
      }
    }
    if (_has_bit(3)) {
      if (private_key_ != &_default_private_key_) {
        private_key_->clear();
      }
    }
    if (_has_bit(6)) {
      if (dir_db_key_ != &_default_dir_db_key_) {
        dir_db_key_->clear();
      }
    }
  }
  admins_.Clear();
  readonlys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrivateShareNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required bytes name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_name()));
        if (input->ExpectTag(18)) goto parse_msid;
        break;
      }
      
      // required bytes msid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_msid:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_msid()));
        if (input->ExpectTag(26)) goto parse_public_key;
        break;
      }
      
      // required bytes public_key = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_public_key:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_public_key()));
        if (input->ExpectTag(34)) goto parse_private_key;
        break;
      }
      
      // optional bytes private_key = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_private_key:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_private_key()));
        if (input->ExpectTag(42)) goto parse_admins;
        break;
      }
      
      // repeated bytes admins = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_admins:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(
             input, add_admins()));
        if (input->ExpectTag(42)) goto parse_admins;
        if (input->ExpectTag(50)) goto parse_readonlys;
        break;
      }
      
      // repeated bytes readonlys = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_readonlys:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(
             input, add_readonlys()));
        if (input->ExpectTag(50)) goto parse_readonlys;
        if (input->ExpectTag(58)) goto parse_dir_db_key;
        break;
      }
      
      // required bytes dir_db_key = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_dir_db_key:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_dir_db_key()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PrivateShareNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PrivateShareNotification::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required bytes name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(1, this->name(), output);
  }
  
  // required bytes msid = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(2, this->msid(), output);
  }
  
  // required bytes public_key = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(3, this->public_key(), output);
  }
  
  // optional bytes private_key = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(4, this->private_key(), output);
  }
  
  // repeated bytes admins = 5;
  for (int i = 0; i < this->admins_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteBytes(5, this->admins(i), output);
  }
  
  // repeated bytes readonlys = 6;
  for (int i = 0; i < this->readonlys_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteBytes(6, this->readonlys(i), output);
  }
  
  // required bytes dir_db_key = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(7, this->dir_db_key(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PrivateShareNotification::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes name = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(1, this->name(), target);
  }
  
  // required bytes msid = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(2, this->msid(), target);
  }
  
  // required bytes public_key = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(3, this->public_key(), target);
  }
  
  // optional bytes private_key = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(4, this->private_key(), target);
  }
  
  // repeated bytes admins = 5;
  for (int i = 0; i < this->admins_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(5, this->admins(i), target);
  }
  
  // repeated bytes readonlys = 6;
  for (int i = 0; i < this->readonlys_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(6, this->readonlys(i), target);
  }
  
  // required bytes dir_db_key = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(7, this->dir_db_key(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PrivateShareNotification::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->name());
    }
    
    // required bytes msid = 2;
    if (has_msid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->msid());
    }
    
    // required bytes public_key = 3;
    if (has_public_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->public_key());
    }
    
    // optional bytes private_key = 4;
    if (has_private_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->private_key());
    }
    
    // required bytes dir_db_key = 7;
    if (has_dir_db_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->dir_db_key());
    }
    
  }
  // repeated bytes admins = 5;
  total_size += 1 * this->admins_size();
  for (int i = 0; i < this->admins_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormat::BytesSize(
      this->admins(i));
  }
  
  // repeated bytes readonlys = 6;
  total_size += 1 * this->readonlys_size();
  for (int i = 0; i < this->readonlys_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormat::BytesSize(
      this->readonlys(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PrivateShareNotification::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrivateShareNotification* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrivateShareNotification*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrivateShareNotification::MergeFrom(const PrivateShareNotification& from) {
  GOOGLE_CHECK_NE(&from, this);
  admins_.MergeFrom(from.admins_);
  readonlys_.MergeFrom(from.readonlys_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_name(from.name());
    }
    if (from._has_bit(1)) {
      set_msid(from.msid());
    }
    if (from._has_bit(2)) {
      set_public_key(from.public_key());
    }
    if (from._has_bit(3)) {
      set_private_key(from.private_key());
    }
    if (from._has_bit(6)) {
      set_dir_db_key(from.dir_db_key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrivateShareNotification::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrivateShareNotification::CopyFrom(const PrivateShareNotification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrivateShareNotification::Swap(PrivateShareNotification* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(msid_, other->msid_);
    std::swap(public_key_, other->public_key_);
    std::swap(private_key_, other->private_key_);
    admins_.Swap(&other->admins_);
    readonlys_.Swap(&other->readonlys_);
    std::swap(dir_db_key_, other->dir_db_key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool PrivateShareNotification::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000047) != 0x00000047) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* PrivateShareNotification::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* PrivateShareNotification::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return PrivateShareNotification_reflection_;
}

// ===================================================================

const ::std::string InstantMessage::_default_sender_;
const ::std::string InstantMessage::_default_message_;
#ifndef _MSC_VER
const int InstantMessage::kSenderFieldNumber;
const int InstantMessage::kMessageFieldNumber;
const int InstantMessage::kDateFieldNumber;
const int InstantMessage::kContactNotificationFieldNumber;
const int InstantMessage::kInstantfileNotificationFieldNumber;
const int InstantMessage::kPrivateshareNotificationFieldNumber;
#endif  // !_MSC_VER

InstantMessage::InstantMessage()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    sender_(const_cast< ::std::string*>(&_default_sender_)),
    message_(const_cast< ::std::string*>(&_default_message_)),
    date_(0),
    contact_notification_(NULL),
    instantfile_notification_(NULL),
    privateshare_notification_(NULL) {
  SharedCtor();
}

void InstantMessage::InitAsDefaultInstance() {  contact_notification_ = const_cast< ::maidsafe::ContactNotification*>(&::maidsafe::ContactNotification::default_instance());
  instantfile_notification_ = const_cast< ::maidsafe::InstantFileNotification*>(&::maidsafe::InstantFileNotification::default_instance());
  privateshare_notification_ = const_cast< ::maidsafe::PrivateShareNotification*>(&::maidsafe::PrivateShareNotification::default_instance());
}

InstantMessage::InstantMessage(const InstantMessage& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    sender_(const_cast< ::std::string*>(&_default_sender_)),
    message_(const_cast< ::std::string*>(&_default_message_)),
    date_(0),
    contact_notification_(NULL),
    instantfile_notification_(NULL),
    privateshare_notification_(NULL) {
  SharedCtor();
  MergeFrom(from);
}

void InstantMessage::SharedCtor() {
  _cached_size_ = 0;
  sender_ = const_cast< ::std::string*>(&_default_sender_);
  message_ = const_cast< ::std::string*>(&_default_message_);
  date_ = 0;
  contact_notification_ = NULL;
  instantfile_notification_ = NULL;
  privateshare_notification_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InstantMessage::~InstantMessage() {
  SharedDtor();
}

void InstantMessage::SharedDtor() {
  if (sender_ != &_default_sender_) {
    delete sender_;
  }
  if (message_ != &_default_message_) {
    delete message_;
  }
  if (this != default_instance_) {
    delete contact_notification_;
    delete instantfile_notification_;
    delete privateshare_notification_;
  }
}

const ::google::protobuf::Descriptor* InstantMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InstantMessage_descriptor_;
}

const InstantMessage& InstantMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_2eproto();  return *default_instance_;
}

InstantMessage* InstantMessage::default_instance_ = NULL;

InstantMessage* InstantMessage::New() const {
  return new InstantMessage;
}

void InstantMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (sender_ != &_default_sender_) {
        sender_->clear();
      }
    }
    if (_has_bit(1)) {
      if (message_ != &_default_message_) {
        message_->clear();
      }
    }
    date_ = 0;
    if (_has_bit(3)) {
      if (contact_notification_ != NULL) contact_notification_->::maidsafe::ContactNotification::Clear();
    }
    if (_has_bit(4)) {
      if (instantfile_notification_ != NULL) instantfile_notification_->::maidsafe::InstantFileNotification::Clear();
    }
    if (_has_bit(5)) {
      if (privateshare_notification_ != NULL) privateshare_notification_->::maidsafe::PrivateShareNotification::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InstantMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required bytes sender = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_sender()));
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }
      
      // required bytes message = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_message:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_message()));
        if (input->ExpectTag(24)) goto parse_date;
        break;
      }
      
      // required int32 date = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_date:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &date_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_contact_notification;
        break;
      }
      
      // optional .maidsafe.ContactNotification contact_notification = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_contact_notification:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_contact_notification()));
        if (input->ExpectTag(42)) goto parse_instantfile_notification;
        break;
      }
      
      // optional .maidsafe.InstantFileNotification instantfile_notification = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_instantfile_notification:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_instantfile_notification()));
        if (input->ExpectTag(50)) goto parse_privateshare_notification;
        break;
      }
      
      // optional .maidsafe.PrivateShareNotification privateshare_notification = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_privateshare_notification:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_privateshare_notification()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InstantMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    InstantMessage::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required bytes sender = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(1, this->sender(), output);
  }
  
  // required bytes message = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(2, this->message(), output);
  }
  
  // required int32 date = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(3, this->date(), output);
  }
  
  // optional .maidsafe.ContactNotification contact_notification = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(4, this->contact_notification(), output);
  }
  
  // optional .maidsafe.InstantFileNotification instantfile_notification = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(5, this->instantfile_notification(), output);
  }
  
  // optional .maidsafe.PrivateShareNotification privateshare_notification = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(6, this->privateshare_notification(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InstantMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes sender = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(1, this->sender(), target);
  }
  
  // required bytes message = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(2, this->message(), target);
  }
  
  // required int32 date = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(3, this->date(), target);
  }
  
  // optional .maidsafe.ContactNotification contact_notification = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(4, this->contact_notification(), target);
  }
  
  // optional .maidsafe.InstantFileNotification instantfile_notification = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(5, this->instantfile_notification(), target);
  }
  
  // optional .maidsafe.PrivateShareNotification privateshare_notification = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(6, this->privateshare_notification(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InstantMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes sender = 1;
    if (has_sender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->sender());
    }
    
    // required bytes message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->message());
    }
    
    // required int32 date = 3;
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->date());
    }
    
    // optional .maidsafe.ContactNotification contact_notification = 4;
    if (has_contact_notification()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->contact_notification());
    }
    
    // optional .maidsafe.InstantFileNotification instantfile_notification = 5;
    if (has_instantfile_notification()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->instantfile_notification());
    }
    
    // optional .maidsafe.PrivateShareNotification privateshare_notification = 6;
    if (has_privateshare_notification()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->privateshare_notification());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void InstantMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InstantMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InstantMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InstantMessage::MergeFrom(const InstantMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_sender(from.sender());
    }
    if (from._has_bit(1)) {
      set_message(from.message());
    }
    if (from._has_bit(2)) {
      set_date(from.date());
    }
    if (from._has_bit(3)) {
      mutable_contact_notification()->::maidsafe::ContactNotification::MergeFrom(from.contact_notification());
    }
    if (from._has_bit(4)) {
      mutable_instantfile_notification()->::maidsafe::InstantFileNotification::MergeFrom(from.instantfile_notification());
    }
    if (from._has_bit(5)) {
      mutable_privateshare_notification()->::maidsafe::PrivateShareNotification::MergeFrom(from.privateshare_notification());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InstantMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstantMessage::CopyFrom(const InstantMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstantMessage::Swap(InstantMessage* other) {
  if (other != this) {
    std::swap(sender_, other->sender_);
    std::swap(message_, other->message_);
    std::swap(date_, other->date_);
    std::swap(contact_notification_, other->contact_notification_);
    std::swap(instantfile_notification_, other->instantfile_notification_);
    std::swap(privateshare_notification_, other->privateshare_notification_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool InstantMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_contact_notification()) {
    if (!this->contact_notification().IsInitialized()) return false;
  }
  if (has_instantfile_notification()) {
    if (!this->instantfile_notification().IsInitialized()) return false;
  }
  if (has_privateshare_notification()) {
    if (!this->privateshare_notification().IsInitialized()) return false;
  }
  return true;
}

const ::google::protobuf::Descriptor* InstantMessage::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* InstantMessage::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return InstantMessage_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int StoreMessagesResult::kResultFieldNumber;
const int StoreMessagesResult::kStoredMsgsFieldNumber;
const int StoreMessagesResult::kFailedFieldNumber;
#endif  // !_MSC_VER

StoreMessagesResult::StoreMessagesResult()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    result_(0u),
    stored_msgs_(0),
    failed_() {
  SharedCtor();
}

void StoreMessagesResult::InitAsDefaultInstance() {}

StoreMessagesResult::StoreMessagesResult(const StoreMessagesResult& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    result_(0u),
    stored_msgs_(0),
    failed_() {
  SharedCtor();
  MergeFrom(from);
}

void StoreMessagesResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  stored_msgs_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StoreMessagesResult::~StoreMessagesResult() {
  SharedDtor();
}

void StoreMessagesResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* StoreMessagesResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StoreMessagesResult_descriptor_;
}

const StoreMessagesResult& StoreMessagesResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_2eproto();  return *default_instance_;
}

StoreMessagesResult* StoreMessagesResult::default_instance_ = NULL;

StoreMessagesResult* StoreMessagesResult::New() const {
  return new StoreMessagesResult;
}

void StoreMessagesResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    stored_msgs_ = 0;
  }
  failed_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StoreMessagesResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_stored_msgs;
        break;
      }
      
      // required int32 stored_msgs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_stored_msgs:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &stored_msgs_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_failed;
        break;
      }
      
      // repeated bytes failed = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_failed:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(
             input, add_failed()));
        if (input->ExpectTag(26)) goto parse_failed;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StoreMessagesResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    StoreMessagesResult::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->result(), output);
  }
  
  // required int32 stored_msgs = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(2, this->stored_msgs(), output);
  }
  
  // repeated bytes failed = 3;
  for (int i = 0; i < this->failed_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteBytes(3, this->failed(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StoreMessagesResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->result(), target);
  }
  
  // required int32 stored_msgs = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(2, this->stored_msgs(), target);
  }
  
  // repeated bytes failed = 3;
  for (int i = 0; i < this->failed_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(3, this->failed(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StoreMessagesResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
    // required int32 stored_msgs = 2;
    if (has_stored_msgs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->stored_msgs());
    }
    
  }
  // repeated bytes failed = 3;
  total_size += 1 * this->failed_size();
  for (int i = 0; i < this->failed_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormat::BytesSize(
      this->failed(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void StoreMessagesResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StoreMessagesResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StoreMessagesResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StoreMessagesResult::MergeFrom(const StoreMessagesResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  failed_.MergeFrom(from.failed_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_result(from.result());
    }
    if (from._has_bit(1)) {
      set_stored_msgs(from.stored_msgs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StoreMessagesResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoreMessagesResult::CopyFrom(const StoreMessagesResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoreMessagesResult::Swap(StoreMessagesResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(stored_msgs_, other->stored_msgs_);
    failed_.Swap(&other->failed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool StoreMessagesResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* StoreMessagesResult::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* StoreMessagesResult::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return StoreMessagesResult_reflection_;
}

// ===================================================================

const ::std::string CreateMSIDResult::_default_name_;
const ::std::string CreateMSIDResult::_default_private_key_;
const ::std::string CreateMSIDResult::_default_public_key_;
#ifndef _MSC_VER
const int CreateMSIDResult::kResultFieldNumber;
const int CreateMSIDResult::kNameFieldNumber;
const int CreateMSIDResult::kPrivateKeyFieldNumber;
const int CreateMSIDResult::kPublicKeyFieldNumber;
#endif  // !_MSC_VER

CreateMSIDResult::CreateMSIDResult()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    result_(0u),
    name_(const_cast< ::std::string*>(&_default_name_)),
    private_key_(const_cast< ::std::string*>(&_default_private_key_)),
    public_key_(const_cast< ::std::string*>(&_default_public_key_)) {
  SharedCtor();
}

void CreateMSIDResult::InitAsDefaultInstance() {}

CreateMSIDResult::CreateMSIDResult(const CreateMSIDResult& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    result_(0u),
    name_(const_cast< ::std::string*>(&_default_name_)),
    private_key_(const_cast< ::std::string*>(&_default_private_key_)),
    public_key_(const_cast< ::std::string*>(&_default_public_key_)) {
  SharedCtor();
  MergeFrom(from);
}

void CreateMSIDResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  name_ = const_cast< ::std::string*>(&_default_name_);
  private_key_ = const_cast< ::std::string*>(&_default_private_key_);
  public_key_ = const_cast< ::std::string*>(&_default_public_key_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateMSIDResult::~CreateMSIDResult() {
  SharedDtor();
}

void CreateMSIDResult::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (private_key_ != &_default_private_key_) {
    delete private_key_;
  }
  if (public_key_ != &_default_public_key_) {
    delete public_key_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CreateMSIDResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateMSIDResult_descriptor_;
}

const CreateMSIDResult& CreateMSIDResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_2eproto();  return *default_instance_;
}

CreateMSIDResult* CreateMSIDResult::default_instance_ = NULL;

CreateMSIDResult* CreateMSIDResult::New() const {
  return new CreateMSIDResult;
}

void CreateMSIDResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    if (_has_bit(1)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    if (_has_bit(2)) {
      if (private_key_ != &_default_private_key_) {
        private_key_->clear();
      }
    }
    if (_has_bit(3)) {
      if (public_key_ != &_default_public_key_) {
        public_key_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateMSIDResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_name:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_name()));
        if (input->ExpectTag(26)) goto parse_private_key;
        break;
      }
      
      // optional bytes private_key = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_private_key:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_private_key()));
        if (input->ExpectTag(34)) goto parse_public_key;
        break;
      }
      
      // optional bytes public_key = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_public_key:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_public_key()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateMSIDResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CreateMSIDResult::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->result(), output);
  }
  
  // optional bytes name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(2, this->name(), output);
  }
  
  // optional bytes private_key = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(3, this->private_key(), output);
  }
  
  // optional bytes public_key = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(4, this->public_key(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateMSIDResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->result(), target);
  }
  
  // optional bytes name = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(2, this->name(), target);
  }
  
  // optional bytes private_key = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(3, this->private_key(), target);
  }
  
  // optional bytes public_key = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(4, this->public_key(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateMSIDResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->name());
    }
    
    // optional bytes private_key = 3;
    if (has_private_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->private_key());
    }
    
    // optional bytes public_key = 4;
    if (has_public_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->public_key());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CreateMSIDResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateMSIDResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateMSIDResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateMSIDResult::MergeFrom(const CreateMSIDResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_result(from.result());
    }
    if (from._has_bit(1)) {
      set_name(from.name());
    }
    if (from._has_bit(2)) {
      set_private_key(from.private_key());
    }
    if (from._has_bit(3)) {
      set_public_key(from.public_key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateMSIDResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateMSIDResult::CopyFrom(const CreateMSIDResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateMSIDResult::Swap(CreateMSIDResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(name_, other->name_);
    std::swap(private_key_, other->private_key_);
    std::swap(public_key_, other->public_key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CreateMSIDResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* CreateMSIDResult::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CreateMSIDResult::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CreateMSIDResult_reflection_;
}

}  // namespace maidsafe
