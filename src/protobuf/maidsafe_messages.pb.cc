// Generated by the protocol buffer compiler.  DO NOT EDIT!

#include "maidsafe_messages.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format_inl.h>

namespace maidsafe {

namespace {

const ::google::protobuf::Descriptor* GenericResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GenericResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* VaultConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VaultConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_maidsafe_5fmessages_2eproto() {
  protobuf_AddDesc_maidsafe_5fmessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "maidsafe_messages.proto");
  GOOGLE_CHECK(file != NULL);
  GenericResponse_descriptor_ = file->message_type(0);
  static const int GenericResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericResponse, result_),
  };
  GenericResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GenericResponse_descriptor_,
      GenericResponse::default_instance_,
      GenericResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GenericResponse));
  VaultConfig_descriptor_ = file->message_type(1);
  static const int VaultConfig_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VaultConfig, pmid_public_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VaultConfig, pmid_private_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VaultConfig, signed_pmid_public_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VaultConfig, chunkstore_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VaultConfig, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VaultConfig, available_space_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VaultConfig, used_space_),
  };
  VaultConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VaultConfig_descriptor_,
      VaultConfig::default_instance_,
      VaultConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VaultConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VaultConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VaultConfig));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_maidsafe_5fmessages_2eproto);
}

void protobuf_RegisterTypes() {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GenericResponse_descriptor_, &GenericResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VaultConfig_descriptor_, &VaultConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_maidsafe_5fmessages_2eproto() {
  delete GenericResponse::default_instance_;
  delete GenericResponse_reflection_;
  delete VaultConfig::default_instance_;
  delete VaultConfig_reflection_;
}

void protobuf_AddDesc_maidsafe_5fmessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027maidsafe_messages.proto\022\010maidsafe\"!\n\017G"
    "enericResponse\022\016\n\006result\030\001 \002(\r\"\247\001\n\013Vault"
    "Config\022\023\n\013pmid_public\030\001 \002(\014\022\024\n\014pmid_priv"
    "ate\030\002 \002(\014\022\032\n\022signed_pmid_public\030\003 \002(\014\022\026\n"
    "\016chunkstore_dir\030\004 \001(\014\022\014\n\004port\030\005 \001(\005\022\027\n\017a"
    "vailable_space\030\006 \001(\004\022\022\n\nused_space\030\007 \001(\004", 240);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "maidsafe_messages.proto", &protobuf_RegisterTypes);
  GenericResponse::default_instance_ = new GenericResponse();
  VaultConfig::default_instance_ = new VaultConfig();
  GenericResponse::default_instance_->InitAsDefaultInstance();
  VaultConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_maidsafe_5fmessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_maidsafe_5fmessages_2eproto {
  StaticDescriptorInitializer_maidsafe_5fmessages_2eproto() {
    protobuf_AddDesc_maidsafe_5fmessages_2eproto();
  }
} static_descriptor_initializer_maidsafe_5fmessages_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int GenericResponse::kResultFieldNumber;
#endif  // !_MSC_VER

GenericResponse::GenericResponse()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    result_(0u) {
  SharedCtor();
}

void GenericResponse::InitAsDefaultInstance() {}

GenericResponse::GenericResponse(const GenericResponse& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    result_(0u) {
  SharedCtor();
  MergeFrom(from);
}

void GenericResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GenericResponse::~GenericResponse() {
  SharedDtor();
}

void GenericResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* GenericResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GenericResponse_descriptor_;
}

const GenericResponse& GenericResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_5fmessages_2eproto();  return *default_instance_;
}

GenericResponse* GenericResponse::default_instance_ = NULL;

GenericResponse* GenericResponse::New() const {
  return new GenericResponse;
}

void GenericResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GenericResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GenericResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    GenericResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->result(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GenericResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->result(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GenericResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void GenericResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GenericResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GenericResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GenericResponse::MergeFrom(const GenericResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GenericResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenericResponse::CopyFrom(const GenericResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenericResponse::Swap(GenericResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool GenericResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* GenericResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* GenericResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return GenericResponse_reflection_;
}

// ===================================================================

const ::std::string VaultConfig::_default_pmid_public_;
const ::std::string VaultConfig::_default_pmid_private_;
const ::std::string VaultConfig::_default_signed_pmid_public_;
const ::std::string VaultConfig::_default_chunkstore_dir_;
#ifndef _MSC_VER
const int VaultConfig::kPmidPublicFieldNumber;
const int VaultConfig::kPmidPrivateFieldNumber;
const int VaultConfig::kSignedPmidPublicFieldNumber;
const int VaultConfig::kChunkstoreDirFieldNumber;
const int VaultConfig::kPortFieldNumber;
const int VaultConfig::kAvailableSpaceFieldNumber;
const int VaultConfig::kUsedSpaceFieldNumber;
#endif  // !_MSC_VER

VaultConfig::VaultConfig()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    pmid_public_(const_cast< ::std::string*>(&_default_pmid_public_)),
    pmid_private_(const_cast< ::std::string*>(&_default_pmid_private_)),
    signed_pmid_public_(const_cast< ::std::string*>(&_default_signed_pmid_public_)),
    chunkstore_dir_(const_cast< ::std::string*>(&_default_chunkstore_dir_)),
    port_(0),
    available_space_(GOOGLE_ULONGLONG(0)),
    used_space_(GOOGLE_ULONGLONG(0)) {
  SharedCtor();
}

void VaultConfig::InitAsDefaultInstance() {}

VaultConfig::VaultConfig(const VaultConfig& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    pmid_public_(const_cast< ::std::string*>(&_default_pmid_public_)),
    pmid_private_(const_cast< ::std::string*>(&_default_pmid_private_)),
    signed_pmid_public_(const_cast< ::std::string*>(&_default_signed_pmid_public_)),
    chunkstore_dir_(const_cast< ::std::string*>(&_default_chunkstore_dir_)),
    port_(0),
    available_space_(GOOGLE_ULONGLONG(0)),
    used_space_(GOOGLE_ULONGLONG(0)) {
  SharedCtor();
  MergeFrom(from);
}

void VaultConfig::SharedCtor() {
  _cached_size_ = 0;
  pmid_public_ = const_cast< ::std::string*>(&_default_pmid_public_);
  pmid_private_ = const_cast< ::std::string*>(&_default_pmid_private_);
  signed_pmid_public_ = const_cast< ::std::string*>(&_default_signed_pmid_public_);
  chunkstore_dir_ = const_cast< ::std::string*>(&_default_chunkstore_dir_);
  port_ = 0;
  available_space_ = GOOGLE_ULONGLONG(0);
  used_space_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VaultConfig::~VaultConfig() {
  SharedDtor();
}

void VaultConfig::SharedDtor() {
  if (pmid_public_ != &_default_pmid_public_) {
    delete pmid_public_;
  }
  if (pmid_private_ != &_default_pmid_private_) {
    delete pmid_private_;
  }
  if (signed_pmid_public_ != &_default_signed_pmid_public_) {
    delete signed_pmid_public_;
  }
  if (chunkstore_dir_ != &_default_chunkstore_dir_) {
    delete chunkstore_dir_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* VaultConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VaultConfig_descriptor_;
}

const VaultConfig& VaultConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_5fmessages_2eproto();  return *default_instance_;
}

VaultConfig* VaultConfig::default_instance_ = NULL;

VaultConfig* VaultConfig::New() const {
  return new VaultConfig;
}

void VaultConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (pmid_public_ != &_default_pmid_public_) {
        pmid_public_->clear();
      }
    }
    if (_has_bit(1)) {
      if (pmid_private_ != &_default_pmid_private_) {
        pmid_private_->clear();
      }
    }
    if (_has_bit(2)) {
      if (signed_pmid_public_ != &_default_signed_pmid_public_) {
        signed_pmid_public_->clear();
      }
    }
    if (_has_bit(3)) {
      if (chunkstore_dir_ != &_default_chunkstore_dir_) {
        chunkstore_dir_->clear();
      }
    }
    port_ = 0;
    available_space_ = GOOGLE_ULONGLONG(0);
    used_space_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VaultConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required bytes pmid_public = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_pmid_public()));
        if (input->ExpectTag(18)) goto parse_pmid_private;
        break;
      }
      
      // required bytes pmid_private = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_pmid_private:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_pmid_private()));
        if (input->ExpectTag(26)) goto parse_signed_pmid_public;
        break;
      }
      
      // required bytes signed_pmid_public = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_signed_pmid_public:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_signed_pmid_public()));
        if (input->ExpectTag(34)) goto parse_chunkstore_dir;
        break;
      }
      
      // optional bytes chunkstore_dir = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_chunkstore_dir:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_chunkstore_dir()));
        if (input->ExpectTag(40)) goto parse_port;
        break;
      }
      
      // optional int32 port = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_port:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &port_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_available_space;
        break;
      }
      
      // optional uint64 available_space = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_available_space:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt64(
              input, &available_space_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_used_space;
        break;
      }
      
      // optional uint64 used_space = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_used_space:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt64(
              input, &used_space_));
        _set_bit(6);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VaultConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    VaultConfig::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required bytes pmid_public = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(1, this->pmid_public(), output);
  }
  
  // required bytes pmid_private = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(2, this->pmid_private(), output);
  }
  
  // required bytes signed_pmid_public = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(3, this->signed_pmid_public(), output);
  }
  
  // optional bytes chunkstore_dir = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(4, this->chunkstore_dir(), output);
  }
  
  // optional int32 port = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(5, this->port(), output);
  }
  
  // optional uint64 available_space = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt64(6, this->available_space(), output);
  }
  
  // optional uint64 used_space = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteUInt64(7, this->used_space(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VaultConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes pmid_public = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(1, this->pmid_public(), target);
  }
  
  // required bytes pmid_private = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(2, this->pmid_private(), target);
  }
  
  // required bytes signed_pmid_public = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(3, this->signed_pmid_public(), target);
  }
  
  // optional bytes chunkstore_dir = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(4, this->chunkstore_dir(), target);
  }
  
  // optional int32 port = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(5, this->port(), target);
  }
  
  // optional uint64 available_space = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt64ToArray(6, this->available_space(), target);
  }
  
  // optional uint64 used_space = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt64ToArray(7, this->used_space(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VaultConfig::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes pmid_public = 1;
    if (has_pmid_public()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->pmid_public());
    }
    
    // required bytes pmid_private = 2;
    if (has_pmid_private()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->pmid_private());
    }
    
    // required bytes signed_pmid_public = 3;
    if (has_signed_pmid_public()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->signed_pmid_public());
    }
    
    // optional bytes chunkstore_dir = 4;
    if (has_chunkstore_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->chunkstore_dir());
    }
    
    // optional int32 port = 5;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->port());
    }
    
    // optional uint64 available_space = 6;
    if (has_available_space()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt64Size(
          this->available_space());
    }
    
    // optional uint64 used_space = 7;
    if (has_used_space()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt64Size(
          this->used_space());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void VaultConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VaultConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VaultConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VaultConfig::MergeFrom(const VaultConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_pmid_public(from.pmid_public());
    }
    if (from._has_bit(1)) {
      set_pmid_private(from.pmid_private());
    }
    if (from._has_bit(2)) {
      set_signed_pmid_public(from.signed_pmid_public());
    }
    if (from._has_bit(3)) {
      set_chunkstore_dir(from.chunkstore_dir());
    }
    if (from._has_bit(4)) {
      set_port(from.port());
    }
    if (from._has_bit(5)) {
      set_available_space(from.available_space());
    }
    if (from._has_bit(6)) {
      set_used_space(from.used_space());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VaultConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VaultConfig::CopyFrom(const VaultConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VaultConfig::Swap(VaultConfig* other) {
  if (other != this) {
    std::swap(pmid_public_, other->pmid_public_);
    std::swap(pmid_private_, other->pmid_private_);
    std::swap(signed_pmid_public_, other->signed_pmid_public_);
    std::swap(chunkstore_dir_, other->chunkstore_dir_);
    std::swap(port_, other->port_);
    std::swap(available_space_, other->available_space_);
    std::swap(used_space_, other->used_space_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool VaultConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* VaultConfig::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* VaultConfig::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return VaultConfig_reflection_;
}

}  // namespace maidsafe
