// Generated by the protocol buffer compiler.  DO NOT EDIT!

#include "maidsafe_service.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format_inl.h>

namespace maidsafe {

namespace {

const ::google::protobuf::ServiceDescriptor* MaidsafeService_descriptor_ = NULL;
const ::google::protobuf::ServiceDescriptor* VaultRegistration_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_maidsafe_5fservice_2eproto() {
  protobuf_AddDesc_maidsafe_5fservice_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "maidsafe_service.proto");
  GOOGLE_CHECK(file != NULL);
  MaidsafeService_descriptor_ = file->service(0);
  VaultRegistration_descriptor_ = file->service(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_maidsafe_5fservice_2eproto);
}

void protobuf_RegisterTypes() {
  protobuf_AssignDescriptorsOnce();
}

}  // namespace

void protobuf_ShutdownFile_maidsafe_5fservice_2eproto() {
}

void protobuf_AddDesc_maidsafe_5fservice_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::maidsafe::protobuf_AddDesc_maidsafe_5fservice_5fmessages_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026maidsafe_service.proto\022\010maidsafe\032\037maid"
    "safe_service_messages.proto2\344\007\n\017Maidsafe"
    "Service\022I\n\016StoreChunkPrep\022\032.maidsafe.Sto"
    "rePrepRequest\032\033.maidsafe.StorePrepRespon"
    "se\022A\n\010StoreIOU\022\031.maidsafe.StoreIOUReques"
    "t\032\032.maidsafe.StoreIOUResponse\022>\n\007IOUDone"
    "\022\030.maidsafe.IOUDoneRequest\032\031.maidsafe.IO"
    "UDoneResponse\022=\n\nStoreChunk\022\026.maidsafe.S"
    "toreRequest\032\027.maidsafe.StoreResponse\022C\n\020"
    "StorePacketChunk\022\026.maidsafe.StoreRequest"
    "\032\027.maidsafe.StoreResponse\022X\n\023StoreChunkR"
    "eference\022\037.maidsafe.StoreReferenceReques"
    "t\032 .maidsafe.StoreReferenceResponse\022G\n\nC"
    "heckChunk\022\033.maidsafe.CheckChunkRequest\032\034"
    ".maidsafe.CheckChunkResponse\0222\n\003Get\022\024.ma"
    "idsafe.GetRequest\032\025.maidsafe.GetResponse"
    "\022;\n\006Update\022\027.maidsafe.UpdateRequest\032\030.ma"
    "idsafe.UpdateResponse\022J\n\013GetMessages\022\034.m"
    "aidsafe.GetMessagesRequest\032\035.maidsafe.Ge"
    "tMessagesResponse\022;\n\006Delete\022\027.maidsafe.D"
    "eleteRequest\032\030.maidsafe.DeleteResponse\022P"
    "\n\rValidityCheck\022\036.maidsafe.ValidityCheck"
    "Request\032\037.maidsafe.ValidityCheckResponse"
    "\022D\n\tSwapChunk\022\032.maidsafe.SwapChunkReques"
    "t\032\033.maidsafe.SwapChunkResponse\022J\n\013VaultS"
    "tatus\022\034.maidsafe.VaultStatusRequest\032\035.ma"
    "idsafe.VaultStatusResponse2\233\001\n\021VaultRegi"
    "stration\022A\n\010OwnVault\022\031.maidsafe.OwnVault"
    "Request\032\032.maidsafe.OwnVaultResponse\022C\n\014I"
    "sVaultOwned\022\030.maidsafe.IsOwnedRequest\032\031."
    "maidsafe.IsOwnedResponse", 1224);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "maidsafe_service.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_maidsafe_5fservice_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_maidsafe_5fservice_2eproto {
  StaticDescriptorInitializer_maidsafe_5fservice_2eproto() {
    protobuf_AddDesc_maidsafe_5fservice_2eproto();
  }
} static_descriptor_initializer_maidsafe_5fservice_2eproto_;


// ===================================================================

MaidsafeService::~MaidsafeService() {}

const ::google::protobuf::ServiceDescriptor* MaidsafeService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MaidsafeService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* MaidsafeService::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return MaidsafeService_descriptor_;
}

void MaidsafeService::StoreChunkPrep(::google::protobuf::RpcController* controller,
                         const ::maidsafe::StorePrepRequest*,
                         ::maidsafe::StorePrepResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method StoreChunkPrep() not implemented.");
  done->Run();
}

void MaidsafeService::StoreIOU(::google::protobuf::RpcController* controller,
                         const ::maidsafe::StoreIOURequest*,
                         ::maidsafe::StoreIOUResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method StoreIOU() not implemented.");
  done->Run();
}

void MaidsafeService::IOUDone(::google::protobuf::RpcController* controller,
                         const ::maidsafe::IOUDoneRequest*,
                         ::maidsafe::IOUDoneResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method IOUDone() not implemented.");
  done->Run();
}

void MaidsafeService::StoreChunk(::google::protobuf::RpcController* controller,
                         const ::maidsafe::StoreRequest*,
                         ::maidsafe::StoreResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method StoreChunk() not implemented.");
  done->Run();
}

void MaidsafeService::StorePacketChunk(::google::protobuf::RpcController* controller,
                         const ::maidsafe::StoreRequest*,
                         ::maidsafe::StoreResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method StorePacketChunk() not implemented.");
  done->Run();
}

void MaidsafeService::StoreChunkReference(::google::protobuf::RpcController* controller,
                         const ::maidsafe::StoreReferenceRequest*,
                         ::maidsafe::StoreReferenceResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method StoreChunkReference() not implemented.");
  done->Run();
}

void MaidsafeService::CheckChunk(::google::protobuf::RpcController* controller,
                         const ::maidsafe::CheckChunkRequest*,
                         ::maidsafe::CheckChunkResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method CheckChunk() not implemented.");
  done->Run();
}

void MaidsafeService::Get(::google::protobuf::RpcController* controller,
                         const ::maidsafe::GetRequest*,
                         ::maidsafe::GetResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Get() not implemented.");
  done->Run();
}

void MaidsafeService::Update(::google::protobuf::RpcController* controller,
                         const ::maidsafe::UpdateRequest*,
                         ::maidsafe::UpdateResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Update() not implemented.");
  done->Run();
}

void MaidsafeService::GetMessages(::google::protobuf::RpcController* controller,
                         const ::maidsafe::GetMessagesRequest*,
                         ::maidsafe::GetMessagesResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetMessages() not implemented.");
  done->Run();
}

void MaidsafeService::Delete(::google::protobuf::RpcController* controller,
                         const ::maidsafe::DeleteRequest*,
                         ::maidsafe::DeleteResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Delete() not implemented.");
  done->Run();
}

void MaidsafeService::ValidityCheck(::google::protobuf::RpcController* controller,
                         const ::maidsafe::ValidityCheckRequest*,
                         ::maidsafe::ValidityCheckResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ValidityCheck() not implemented.");
  done->Run();
}

void MaidsafeService::SwapChunk(::google::protobuf::RpcController* controller,
                         const ::maidsafe::SwapChunkRequest*,
                         ::maidsafe::SwapChunkResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SwapChunk() not implemented.");
  done->Run();
}

void MaidsafeService::VaultStatus(::google::protobuf::RpcController* controller,
                         const ::maidsafe::VaultStatusRequest*,
                         ::maidsafe::VaultStatusResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method VaultStatus() not implemented.");
  done->Run();
}

void MaidsafeService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), MaidsafeService_descriptor_);
  switch(method->index()) {
    case 0:
      StoreChunkPrep(controller,
             ::google::protobuf::down_cast<const ::maidsafe::StorePrepRequest*>(request),
             ::google::protobuf::down_cast< ::maidsafe::StorePrepResponse*>(response),
             done);
      break;
    case 1:
      StoreIOU(controller,
             ::google::protobuf::down_cast<const ::maidsafe::StoreIOURequest*>(request),
             ::google::protobuf::down_cast< ::maidsafe::StoreIOUResponse*>(response),
             done);
      break;
    case 2:
      IOUDone(controller,
             ::google::protobuf::down_cast<const ::maidsafe::IOUDoneRequest*>(request),
             ::google::protobuf::down_cast< ::maidsafe::IOUDoneResponse*>(response),
             done);
      break;
    case 3:
      StoreChunk(controller,
             ::google::protobuf::down_cast<const ::maidsafe::StoreRequest*>(request),
             ::google::protobuf::down_cast< ::maidsafe::StoreResponse*>(response),
             done);
      break;
    case 4:
      StorePacketChunk(controller,
             ::google::protobuf::down_cast<const ::maidsafe::StoreRequest*>(request),
             ::google::protobuf::down_cast< ::maidsafe::StoreResponse*>(response),
             done);
      break;
    case 5:
      StoreChunkReference(controller,
             ::google::protobuf::down_cast<const ::maidsafe::StoreReferenceRequest*>(request),
             ::google::protobuf::down_cast< ::maidsafe::StoreReferenceResponse*>(response),
             done);
      break;
    case 6:
      CheckChunk(controller,
             ::google::protobuf::down_cast<const ::maidsafe::CheckChunkRequest*>(request),
             ::google::protobuf::down_cast< ::maidsafe::CheckChunkResponse*>(response),
             done);
      break;
    case 7:
      Get(controller,
             ::google::protobuf::down_cast<const ::maidsafe::GetRequest*>(request),
             ::google::protobuf::down_cast< ::maidsafe::GetResponse*>(response),
             done);
      break;
    case 8:
      Update(controller,
             ::google::protobuf::down_cast<const ::maidsafe::UpdateRequest*>(request),
             ::google::protobuf::down_cast< ::maidsafe::UpdateResponse*>(response),
             done);
      break;
    case 9:
      GetMessages(controller,
             ::google::protobuf::down_cast<const ::maidsafe::GetMessagesRequest*>(request),
             ::google::protobuf::down_cast< ::maidsafe::GetMessagesResponse*>(response),
             done);
      break;
    case 10:
      Delete(controller,
             ::google::protobuf::down_cast<const ::maidsafe::DeleteRequest*>(request),
             ::google::protobuf::down_cast< ::maidsafe::DeleteResponse*>(response),
             done);
      break;
    case 11:
      ValidityCheck(controller,
             ::google::protobuf::down_cast<const ::maidsafe::ValidityCheckRequest*>(request),
             ::google::protobuf::down_cast< ::maidsafe::ValidityCheckResponse*>(response),
             done);
      break;
    case 12:
      SwapChunk(controller,
             ::google::protobuf::down_cast<const ::maidsafe::SwapChunkRequest*>(request),
             ::google::protobuf::down_cast< ::maidsafe::SwapChunkResponse*>(response),
             done);
      break;
    case 13:
      VaultStatus(controller,
             ::google::protobuf::down_cast<const ::maidsafe::VaultStatusRequest*>(request),
             ::google::protobuf::down_cast< ::maidsafe::VaultStatusResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& MaidsafeService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::maidsafe::StorePrepRequest::default_instance();
    case 1:
      return ::maidsafe::StoreIOURequest::default_instance();
    case 2:
      return ::maidsafe::IOUDoneRequest::default_instance();
    case 3:
      return ::maidsafe::StoreRequest::default_instance();
    case 4:
      return ::maidsafe::StoreRequest::default_instance();
    case 5:
      return ::maidsafe::StoreReferenceRequest::default_instance();
    case 6:
      return ::maidsafe::CheckChunkRequest::default_instance();
    case 7:
      return ::maidsafe::GetRequest::default_instance();
    case 8:
      return ::maidsafe::UpdateRequest::default_instance();
    case 9:
      return ::maidsafe::GetMessagesRequest::default_instance();
    case 10:
      return ::maidsafe::DeleteRequest::default_instance();
    case 11:
      return ::maidsafe::ValidityCheckRequest::default_instance();
    case 12:
      return ::maidsafe::SwapChunkRequest::default_instance();
    case 13:
      return ::maidsafe::VaultStatusRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& MaidsafeService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::maidsafe::StorePrepResponse::default_instance();
    case 1:
      return ::maidsafe::StoreIOUResponse::default_instance();
    case 2:
      return ::maidsafe::IOUDoneResponse::default_instance();
    case 3:
      return ::maidsafe::StoreResponse::default_instance();
    case 4:
      return ::maidsafe::StoreResponse::default_instance();
    case 5:
      return ::maidsafe::StoreReferenceResponse::default_instance();
    case 6:
      return ::maidsafe::CheckChunkResponse::default_instance();
    case 7:
      return ::maidsafe::GetResponse::default_instance();
    case 8:
      return ::maidsafe::UpdateResponse::default_instance();
    case 9:
      return ::maidsafe::GetMessagesResponse::default_instance();
    case 10:
      return ::maidsafe::DeleteResponse::default_instance();
    case 11:
      return ::maidsafe::ValidityCheckResponse::default_instance();
    case 12:
      return ::maidsafe::SwapChunkResponse::default_instance();
    case 13:
      return ::maidsafe::VaultStatusResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

MaidsafeService_Stub::MaidsafeService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
MaidsafeService_Stub::MaidsafeService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
MaidsafeService_Stub::~MaidsafeService_Stub() {
  if (owns_channel_) delete channel_;
}

void MaidsafeService_Stub::StoreChunkPrep(::google::protobuf::RpcController* controller,
                              const ::maidsafe::StorePrepRequest* request,
                              ::maidsafe::StorePrepResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void MaidsafeService_Stub::StoreIOU(::google::protobuf::RpcController* controller,
                              const ::maidsafe::StoreIOURequest* request,
                              ::maidsafe::StoreIOUResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void MaidsafeService_Stub::IOUDone(::google::protobuf::RpcController* controller,
                              const ::maidsafe::IOUDoneRequest* request,
                              ::maidsafe::IOUDoneResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void MaidsafeService_Stub::StoreChunk(::google::protobuf::RpcController* controller,
                              const ::maidsafe::StoreRequest* request,
                              ::maidsafe::StoreResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void MaidsafeService_Stub::StorePacketChunk(::google::protobuf::RpcController* controller,
                              const ::maidsafe::StoreRequest* request,
                              ::maidsafe::StoreResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void MaidsafeService_Stub::StoreChunkReference(::google::protobuf::RpcController* controller,
                              const ::maidsafe::StoreReferenceRequest* request,
                              ::maidsafe::StoreReferenceResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}
void MaidsafeService_Stub::CheckChunk(::google::protobuf::RpcController* controller,
                              const ::maidsafe::CheckChunkRequest* request,
                              ::maidsafe::CheckChunkResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(6),
                       controller, request, response, done);
}
void MaidsafeService_Stub::Get(::google::protobuf::RpcController* controller,
                              const ::maidsafe::GetRequest* request,
                              ::maidsafe::GetResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(7),
                       controller, request, response, done);
}
void MaidsafeService_Stub::Update(::google::protobuf::RpcController* controller,
                              const ::maidsafe::UpdateRequest* request,
                              ::maidsafe::UpdateResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(8),
                       controller, request, response, done);
}
void MaidsafeService_Stub::GetMessages(::google::protobuf::RpcController* controller,
                              const ::maidsafe::GetMessagesRequest* request,
                              ::maidsafe::GetMessagesResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(9),
                       controller, request, response, done);
}
void MaidsafeService_Stub::Delete(::google::protobuf::RpcController* controller,
                              const ::maidsafe::DeleteRequest* request,
                              ::maidsafe::DeleteResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(10),
                       controller, request, response, done);
}
void MaidsafeService_Stub::ValidityCheck(::google::protobuf::RpcController* controller,
                              const ::maidsafe::ValidityCheckRequest* request,
                              ::maidsafe::ValidityCheckResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(11),
                       controller, request, response, done);
}
void MaidsafeService_Stub::SwapChunk(::google::protobuf::RpcController* controller,
                              const ::maidsafe::SwapChunkRequest* request,
                              ::maidsafe::SwapChunkResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(12),
                       controller, request, response, done);
}
void MaidsafeService_Stub::VaultStatus(::google::protobuf::RpcController* controller,
                              const ::maidsafe::VaultStatusRequest* request,
                              ::maidsafe::VaultStatusResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(13),
                       controller, request, response, done);
}
// ===================================================================

VaultRegistration::~VaultRegistration() {}

const ::google::protobuf::ServiceDescriptor* VaultRegistration::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VaultRegistration_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* VaultRegistration::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return VaultRegistration_descriptor_;
}

void VaultRegistration::OwnVault(::google::protobuf::RpcController* controller,
                         const ::maidsafe::OwnVaultRequest*,
                         ::maidsafe::OwnVaultResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method OwnVault() not implemented.");
  done->Run();
}

void VaultRegistration::IsVaultOwned(::google::protobuf::RpcController* controller,
                         const ::maidsafe::IsOwnedRequest*,
                         ::maidsafe::IsOwnedResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method IsVaultOwned() not implemented.");
  done->Run();
}

void VaultRegistration::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), VaultRegistration_descriptor_);
  switch(method->index()) {
    case 0:
      OwnVault(controller,
             ::google::protobuf::down_cast<const ::maidsafe::OwnVaultRequest*>(request),
             ::google::protobuf::down_cast< ::maidsafe::OwnVaultResponse*>(response),
             done);
      break;
    case 1:
      IsVaultOwned(controller,
             ::google::protobuf::down_cast<const ::maidsafe::IsOwnedRequest*>(request),
             ::google::protobuf::down_cast< ::maidsafe::IsOwnedResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& VaultRegistration::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::maidsafe::OwnVaultRequest::default_instance();
    case 1:
      return ::maidsafe::IsOwnedRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& VaultRegistration::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::maidsafe::OwnVaultResponse::default_instance();
    case 1:
      return ::maidsafe::IsOwnedResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

VaultRegistration_Stub::VaultRegistration_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
VaultRegistration_Stub::VaultRegistration_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
VaultRegistration_Stub::~VaultRegistration_Stub() {
  if (owns_channel_) delete channel_;
}

void VaultRegistration_Stub::OwnVault(::google::protobuf::RpcController* controller,
                              const ::maidsafe::OwnVaultRequest* request,
                              ::maidsafe::OwnVaultResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void VaultRegistration_Stub::IsVaultOwned(::google::protobuf::RpcController* controller,
                              const ::maidsafe::IsOwnedRequest* request,
                              ::maidsafe::IsOwnedResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}

}  // namespace maidsafe
