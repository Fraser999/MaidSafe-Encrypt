// Maidsafe rpc arguments and responses
// data_type is defined in  maidsafe/maidsafe.h as the enum ValueType
// In comments throughout, where a client is requesting a store to a vault, the
// requester provides the pmid of (one of) his vault(s) - known as "client's
// PMID" and the recipient's is know as "vault's PMID".

import "packet.proto";

package maidsafe;

message IOUAuthority {
  required uint64 data_size = 1;
  required bytes pmid = 2;  // client's PMID
}

message IOU {
  required bytes serialised_iou_authority = 1;
  required bytes signed_iou_authority = 2;  // field 1, signed by vault's PMID
  required bytes signature = 3;  // signed_iou_authority signed by client's PMID
}

message StorePrepRequest {
  required bytes chunkname = 1;
  required uint64 data_size = 2;
  required bytes pmid = 3;  // client's PMID
  required bytes public_key = 4;
  required bytes signed_public_key = 5;
  required bytes signed_request = 6;
}

message StorePrepResponse {
  required uint32 result = 1;
  optional bytes pmid_id = 2;  // vault's PMID
  optional bytes iou_authority = 3;  // serialised IOUAuthority
  optional bytes signed_iou_authority = 4;  // serialised IOUAuthority, signed
                                            // by vault's PMID
}

message StoreRequest {
  required bytes chunkname = 1;
  required bytes data = 2;
  optional bytes pmid = 3;  // client's PMID
  required bytes public_key = 4;
  required bytes signed_public_key = 5;
  required bytes signed_request = 6;
  required int32 data_type = 7;
  optional uint32 offset = 8;
  optional uint32 chunklet_size = 9;
}

message StoreResponse {
  required uint32 result = 1;
  optional bytes pmid_id = 2;  // vault's PMID
}

message StoreIOURequest {
  required bytes chunkname = 1;
  required uint64 data_size = 2;
  required bytes collector_pmid = 3;  // vault's PMID
  required bytes iou = 4;  // serialised IOU
  required bytes own_pmid = 5;  // client's PMID
  required bytes public_key = 6;
  required bytes signed_public_key = 7;
  required bytes signed_request = 8;
}

message StoreIOUResponse {
  required uint32 result = 1;
  optional bytes pmid_id = 2;  // ref-holder's PMID
}

message IOUDoneRequest {
  required bytes chunkname = 1;
  required bytes public_key = 2;
  required bytes own_pmid = 3;  // client's PMID
  required bytes signed_public_key = 4;
  required bytes signed_request = 5;
}

message IOUDoneResponse {
  required uint32 result = 1;
  optional bytes pmid_id = 2;  // vault's PMID
}

message RankAuthority {
  required bytes chunkname = 1;
  required uint64 data_size = 2;
  required bytes pmid = 3;  // vault's PMID
}

message StoreReferenceRequest {
  required bytes chunkname = 1;
  required bytes pmid = 2;  // vault's PMID
  required bytes signed_pmid = 3;
  required bytes public_key = 4;
  required bytes signed_public_key = 5;
  required bytes signed_request = 6;
  optional bool no_iou_rank = 7;
}

message StoreReferenceResponse {
  required uint32 result = 1;
  optional bytes rank_authority = 2;  // serialised RankAuthority
  optional bytes signed_rank_authority = 3;  // rank_authority signed by
                                             // ref-holder's PMID
  optional bytes iou = 4;  // serialised IOU
  optional bytes pmid_id = 5;  // ref-holder's PMID
  optional bytes public_key = 6;
  optional bytes signed_public_key = 7;
}

message StorePacketRequest {
  required bytes packetname = 1;
  repeated GenericPacket signed_data = 2;
  optional bytes key_id = 3;  // ID of e.g. ANMID, ANTMID, ...
  optional bytes public_key = 4;
  optional bytes public_key_signature = 5;
  optional bytes request_signature = 6;
  required int32 data_type = 7;
  required bool append = 8;
}

message StorePacketResponse {
  required uint32 result = 1;
  optional bytes pmid_id = 2;  // vault's PMID
  optional bytes public_key = 3;
  optional bytes public_key_signature = 4;
  optional bytes response_signature = 5;
  optional bytes checksum = 6;
}

message DeleteRequest {
  required bytes chunkname = 1;
  required bytes pmid_id = 2;  // vault's PMID
  required bytes public_key = 3;
  required bytes signed_public_key = 4;
  required bytes signed_request = 5;
  required int32 data_type = 6;
}

message DeleteResponse {
  required uint32 result = 1;
  optional bytes pmid_id = 2;
}

message GetRequest {
  required bytes chunkname = 1;
}

message GetResponse {
  required uint32 result = 1;
  optional bytes content = 2;
  optional bytes pmid_id = 3;
}

message GetPacketRequest {
  required bytes packetname = 1;
  optional bytes key_id = 2;  // ID of e.g. ANMID, ANTMID, ...
  optional bytes public_key = 3;
  optional bytes public_key_signature = 4;
  optional bytes request_signature = 5;
}

message GetPacketResponse {
  required uint32 result = 1;
  repeated GenericPacket content = 2;
  optional bytes pmid_id = 3;
}

message CheckChunkRequest {
  required bytes chunkname = 1;
}

message CheckChunkResponse {
  required uint32 result = 1;
  required bytes pmid_id = 2;
}

message ValidityCheckRequest {
  required bytes chunkname = 1;
  required bytes random_data = 2;
}

message ValidityCheckResponse {
  required uint32 result = 1;
  optional bytes hash_content = 2;
  required bytes pmid_id = 3;
}

message UpdateRequest {
  required bytes chunkname = 1;
  required bytes data = 2;
  required bytes pmid_id = 3;  // vault's PMID
  required bytes public_key = 4;
  required bytes signed_public_key = 5;
  required bytes signed_request = 6;
  required int32 data_type = 7;
}

message UpdateResponse {
  required uint32 result = 1;
  optional bytes pmid_id = 2;
}

message SwapChunkRequest {
  required int32 request_type = 1;
  required bytes chunkname1 = 2;
  optional bytes chunkcontent1 = 3;
  optional int32 size1 = 4;
  optional bytes chunkname2 = 5;
}

message SwapChunkResponse {
  required int32 request_type = 1;
  required uint32 result = 2;
  optional bytes chunkname1 = 3;
  optional bytes chunkcontent1 = 4;
  optional int32 size1 = 5;
  optional bytes chunkname2 = 6;
  optional bytes chunkcontent2 = 7;
  optional int32 size2 = 8;
  required bytes pmid_id = 9;
}

message VaultCommunication {
  optional bytes chunkstore = 1;
  optional uint64 offered_space = 2;
  optional uint64 free_space = 3;
  optional bytes ip = 4;
  optional uint32 port = 5;
  required uint32 timestamp = 6;
}

message VaultStatusRequest {
  required bytes encrypted_request = 1;  // Serialised encrypted VaultCommunication
}

message VaultStatusResponse {
  required uint32 result = 1;
  optional bytes encrypted_response = 2;  // Serialised encrypted VaultCommunication
}

enum OwnVaultResult {
  OWNED_SUCCESS = 0;
  VAULT_ALREADY_OWNED = 1;
  VAULT_IS_DOWN = 2;
  INVALID_RSA_KEYS = 3;
  NOT_ENOUGH_SPACE = 4;
  NO_SPACE_ALLOCATED = 5;
  INVALID_PORT = 6;
  FAILED_TO_START_VAULT = 7;
  INVALID_OWNREQUEST = 8;
  INVALID_PMID_NAME = 9;
}

message OwnVaultRequest {
  required bytes public_key = 1;
  required bytes private_key = 2;
  required bytes signed_public_key = 3;
  required bytes chunkstore_dir = 4;
  required uint32 port = 5;
  required uint64 space = 6;
}

message OwnVaultResponse {
  required OwnVaultResult result = 1;
  optional bytes pmid_name = 2;
}

enum VaultStatus {
  NOT_OWNED = 0;
  OWNED = 1;
  DOWN = 2;
  ISOWNRPC_CANCELLED = 3;
}

message IsOwnedRequest {}

message IsOwnedResponse {
  required VaultStatus status = 1;
}

// Buffer Packet Ops

message CreateBPRequest {
  required bytes bufferpacket_name = 1;
  required bytes data = 2;
  required bytes pmid = 3;
  required bytes public_key = 4;
  required bytes signed_public_key = 5;
  required bytes signed_request = 6;
}

message CreateBPResponse {
  required uint32 result = 1;
  optional bytes pmid_id = 2;
  optional bytes public_key = 3;
  optional bytes signed_public_key = 4;
}

message ModifyBPInfoRequest {
  required bytes bufferpacket_name = 1;
  required bytes data = 2;
  required bytes pmid = 3;
  required bytes public_key = 4;
  required bytes signed_public_key = 5;
  required bytes signed_request = 6;
}

message ModifyBPInfoResponse {
  required uint32 result = 1;
  optional bytes pmid_id = 2;
  optional bytes public_key = 3;
  optional bytes signed_public_key = 4;
}

message GetBPMessagesRequest {
  required bytes bufferpacket_name = 1;
  required bytes public_key = 2;
  required bytes pmid = 3;
  required bytes signed_public_key = 4;
  required bytes signed_request = 5;
}

message GetBPMessagesResponse {
  required uint32 result = 1;
  repeated bytes messages = 2;
  optional bytes pmid_id = 3;
  optional bytes public_key = 4;
  optional bytes signed_public_key = 5;
}

message AddBPMessageRequest {
  required bytes bufferpacket_name = 1;
  required bytes data = 2;
  required bytes pmid = 3;
  required bytes public_key = 4;
  required bytes signed_public_key = 5;
  required bytes signed_request = 6;
}

message AddBPMessageResponse {
  required uint32 result = 1;
  optional bytes pmid_id = 2;
  optional bytes public_key = 3;
  optional bytes signed_public_key = 4;
}

message ContactInfoRequest {
  required bytes bufferpacket_name = 1;
  required bytes id = 2;
  required bytes pmid = 3;
  required bytes public_key = 4;
  required bytes public_key_signature = 5;
  required bytes request_signature = 6;
}

message ContactInfoResponse {
  required uint32 result = 1;
  optional bytes pmid_id = 2;
  optional bytes public_key = 3;
  optional bytes public_key_signature = 4;
  optional EndPoint ep = 5;
  optional uint32 status = 6;
}
