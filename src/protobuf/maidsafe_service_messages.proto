// Maidsafe rpc arguments and responses
// data_type is defined in  maidsafe/maidsafe.h as the enum value_types
// In comments throughout, where a client is requesting a store to a vault, the
// requester provides the pmid of (one of) his vault(s) - known as "client's
// PMID" and the recipient's is know as "vault's PMID".

package maidsafe;

message IOUAuthority {
  required uint64 data_size = 1;
  required bytes pmid = 2;  // client's PMID
};

message IOU {
  required bytes serialised_iou_authority = 1;
  required bytes signed_iou_authority = 2;  // field 1, signed by vault's PMID
  required bytes signature = 3;  // signed_iou_authority signed by client's PMID
}

message StorePrepRequest {
  required bytes chunkname = 1;
  required uint64 data_size = 2;
  required bytes pmid = 3;  // client's PMID
  required bytes public_key = 4;
  required bytes signed_public_key = 5;
  required bytes signed_request = 6;
};

message StorePrepResponse {
  required uint32 result = 1;
  optional bytes pmid_id = 2;  // vault's PMID
  optional bytes iou_authority = 3;  // serialised IOUAuthority
  optional bytes signed_iou_authority = 4;  // serialised IOUAuthority, signed
                                            // by vault's PMID
};

message StoreRequest {
  required bytes chunkname = 1;
  required bytes data = 2;
  required bytes pmid = 3;  // client's PMID
  required bytes public_key = 4;
  required bytes signed_public_key = 5;
  required bytes signed_request = 6;
  required uint32 data_type = 7;
  optional uint32 offset = 8;
  optional uint32 chunklet_size = 9;
};

message StoreResponse {
  required uint32 result = 1;
  optional bytes pmid_id = 2;  // vault's PMID
};

message StoreIOURequest {
  required bytes chunkname = 1;
  required uint64 data_size = 2;
  required bytes collector_pmid = 3;  // vault's PMID
  required bytes iou = 4;  // serialised IOU
  required bytes own_pmid = 5;  // client's PMID
  required bytes public_key = 6;
  required bytes signed_public_key = 7;
  required bytes signed_request = 8;
};

message StoreIOUResponse {
  required uint32 result = 1;
  optional bytes pmid_id = 2;  // ref-holder's PMID
};

message IOUDoneRequest {
  required bytes chunkname = 1;
  required bytes public_key = 2;
  required bytes signed_public_key = 3;
  required bytes signed_request = 4;
};

message IOUDoneResponse {
  required uint32 result = 1;
  optional bytes pmid_id = 2;  // vault's PMID
};

message RankAuthority {
  required bytes chunkname = 1;
  required uint64 data_size = 2;
  required bytes pmid = 3;  // vault's PMID
};

message StoreReferenceRequest {
  required bytes chunkname = 1;
  required bytes pmid = 2;  // vault's PMID
  required bytes signed_pmid = 3;
  required bytes public_key = 4;
  required bytes signed_public_key = 5;
  required bytes signed_request = 6;
};

message StoreReferenceResponse {
  required uint32 result = 1;
  optional bytes rank_authority = 2;  // serialised RankAuthority
  optional bytes signed_rank_authority = 3;  // rank_authority signed by
                                             // ref-holder's PMID
  optional bytes iou = 4;  // serialised IOU
  optional bytes pmid_id = 5;  // ref-holder's PMID
  optional bytes public_key = 6;
  optional bytes signed_public_key = 7;
};

message DeleteRequest {
  required bytes chunkname = 1;
  required bytes public_key = 2;
  required bytes signed_public_key = 3;
  required bytes signed_request = 4;
  required int32 data_type = 5;
};

message DeleteResponse {
  required uint32 result = 1;
  optional bytes pmid_id = 2;
};

message GetRequest {
  required bytes chunkname = 1;
};

message GetResponse {
  required uint32 result = 1;
  optional bytes content = 2;
  optional bytes pmid_id = 3;
};

message CheckChunkRequest {
  required bytes chunkname = 1;
};

message CheckChunkResponse {
  required uint32 result = 1;
  required bytes pmid_id = 2;
};

message ValidityCheckRequest {
  required bytes chunkname = 1;
  required bytes random_data = 2;
};

message ValidityCheckResponse {
  required uint32 result = 1;
  optional bytes hash_content = 2;
  required bytes pmid_id = 3;
};

message UpdateRequest {
  required bytes chunkname = 1;
  required bytes data = 2;
  required bytes public_key = 3;
  required bytes signed_public_key = 4;
  required bytes signed_request = 5;
  required int32 data_type = 6;
};

message UpdateResponse {
  required uint32 result = 1;
  optional bytes pmid_id = 2;
};

message GetMessagesRequest {
  required bytes buffer_packet_name = 1;
  required bytes public_key = 2;
  required bytes signed_public_key = 3;
};

message GetMessagesResponse {
  required uint32 result = 1;
  repeated bytes messages = 2;
  optional bytes pmid_id = 3;
};

message SwapChunkRequest {
  required int32 request_type = 1;
  required bytes chunkname1 = 2;
  optional bytes chunkcontent1 = 3;
  optional int32 size1 = 4;
  optional bytes chunkname2 = 5;
};

message SwapChunkResponse {
  required int32 request_type = 1;
  required uint32 result = 2;
  optional bytes chunkname1 = 3;
  optional bytes chunkcontent1 = 4;
  optional int32 size1 = 5;
  optional bytes chunkname2 = 6;
  optional bytes chunkcontent2 = 7;
  optional int32 size2 = 8;
  required bytes pmid_id = 9;
};
