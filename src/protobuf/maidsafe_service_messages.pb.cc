// Generated by the protocol buffer compiler.  DO NOT EDIT!

#include "maidsafe_service_messages.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format_inl.h>

namespace maidsafe {

namespace {

const ::google::protobuf::Descriptor* SignedSize_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SignedSize_reflection_ = NULL;
const ::google::protobuf::Descriptor* StoreContract_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StoreContract_reflection_ = NULL;
const ::google::protobuf::Descriptor* StoreContract_InnerContract_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StoreContract_InnerContract_reflection_ = NULL;
const ::google::protobuf::Descriptor* StorePrepRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StorePrepRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* StorePrepResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StorePrepResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* StoreChunkRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StoreChunkRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* StoreChunkResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StoreChunkResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* StorePacketRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StorePacketRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* StorePacketResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StorePacketResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddToWatchListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddToWatchListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddToWatchListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddToWatchListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemoveFromWatchListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemoveFromWatchListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemoveFromWatchListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemoveFromWatchListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddToReferenceListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddToReferenceListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddToReferenceListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddToReferenceListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemoveFromReferenceListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemoveFromReferenceListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemoveFromReferenceListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemoveFromReferenceListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* AmendAccountRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AmendAccountRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* AmendAccountRequest_Amendment_descriptor_ = NULL;
const ::google::protobuf::Descriptor* AmendAccountResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AmendAccountResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetAccountStatusRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAccountStatusRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetAccountStatusResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAccountStatusResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CheckChunkRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CheckChunkRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CheckChunkResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CheckChunkResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetChunkRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetChunkRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetChunkResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetChunkResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetPacketRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetPacketRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetPacketResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetPacketResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateChunkRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateChunkRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateChunkResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateChunkResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteChunkRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteChunkRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteChunkResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteChunkResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ValidityCheckRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ValidityCheckRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ValidityCheckResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ValidityCheckResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SwapChunkRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SwapChunkRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SwapChunkResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SwapChunkResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* VaultCommunication_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VaultCommunication_reflection_ = NULL;
const ::google::protobuf::Descriptor* VaultStatusRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VaultStatusRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* VaultStatusResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VaultStatusResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* OwnVaultRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OwnVaultRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* OwnVaultResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OwnVaultResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* IsOwnedRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IsOwnedRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* IsOwnedResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IsOwnedResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateBPRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateBPRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateBPResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateBPResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModifyBPInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModifyBPInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModifyBPInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModifyBPInfoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetBPMessagesRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetBPMessagesRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetBPMessagesResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetBPMessagesResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddBPMessageRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddBPMessageRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddBPMessageResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddBPMessageResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* OwnVaultResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* VaultStatus_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_maidsafe_5fservice_5fmessages_2eproto() {
  protobuf_AddDesc_maidsafe_5fservice_5fmessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "maidsafe_service_messages.proto");
  GOOGLE_CHECK(file != NULL);
  SignedSize_descriptor_ = file->message_type(0);
  static const int SignedSize_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignedSize, data_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignedSize, signature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignedSize, pmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignedSize, public_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignedSize, public_key_signature_),
  };
  SignedSize_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SignedSize_descriptor_,
      SignedSize::default_instance_,
      SignedSize_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignedSize, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignedSize, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SignedSize));
  StoreContract_descriptor_ = file->message_type(1);
  static const int StoreContract_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreContract, inner_contract_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreContract, signature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreContract, pmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreContract, public_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreContract, public_key_signature_),
  };
  StoreContract_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StoreContract_descriptor_,
      StoreContract::default_instance_,
      StoreContract_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreContract, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreContract, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StoreContract));
  StoreContract_InnerContract_descriptor_ = StoreContract_descriptor_->nested_type(0);
  static const int StoreContract_InnerContract_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreContract_InnerContract, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreContract_InnerContract, size_signature_),
  };
  StoreContract_InnerContract_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StoreContract_InnerContract_descriptor_,
      StoreContract_InnerContract::default_instance_,
      StoreContract_InnerContract_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreContract_InnerContract, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreContract_InnerContract, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StoreContract_InnerContract));
  StorePrepRequest_descriptor_ = file->message_type(2);
  static const int StorePrepRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorePrepRequest, chunkname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorePrepRequest, signed_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorePrepRequest, request_signature_),
  };
  StorePrepRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StorePrepRequest_descriptor_,
      StorePrepRequest::default_instance_,
      StorePrepRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorePrepRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorePrepRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StorePrepRequest));
  StorePrepResponse_descriptor_ = file->message_type(3);
  static const int StorePrepResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorePrepResponse, store_contract_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorePrepResponse, response_signature_),
  };
  StorePrepResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StorePrepResponse_descriptor_,
      StorePrepResponse::default_instance_,
      StorePrepResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorePrepResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorePrepResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StorePrepResponse));
  StoreChunkRequest_descriptor_ = file->message_type(4);
  static const int StoreChunkRequest_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreChunkRequest, chunkname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreChunkRequest, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreChunkRequest, pmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreChunkRequest, public_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreChunkRequest, public_key_signature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreChunkRequest, request_signature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreChunkRequest, data_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreChunkRequest, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreChunkRequest, chunklet_size_),
  };
  StoreChunkRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StoreChunkRequest_descriptor_,
      StoreChunkRequest::default_instance_,
      StoreChunkRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreChunkRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreChunkRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StoreChunkRequest));
  StoreChunkResponse_descriptor_ = file->message_type(5);
  static const int StoreChunkResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreChunkResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreChunkResponse, pmid_),
  };
  StoreChunkResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StoreChunkResponse_descriptor_,
      StoreChunkResponse::default_instance_,
      StoreChunkResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreChunkResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreChunkResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StoreChunkResponse));
  StorePacketRequest_descriptor_ = file->message_type(6);
  static const int StorePacketRequest_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorePacketRequest, packetname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorePacketRequest, signed_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorePacketRequest, key_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorePacketRequest, public_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorePacketRequest, public_key_signature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorePacketRequest, request_signature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorePacketRequest, data_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorePacketRequest, append_),
  };
  StorePacketRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StorePacketRequest_descriptor_,
      StorePacketRequest::default_instance_,
      StorePacketRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorePacketRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorePacketRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StorePacketRequest));
  StorePacketResponse_descriptor_ = file->message_type(7);
  static const int StorePacketResponse_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorePacketResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorePacketResponse, pmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorePacketResponse, public_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorePacketResponse, public_key_signature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorePacketResponse, response_signature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorePacketResponse, checksum_),
  };
  StorePacketResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StorePacketResponse_descriptor_,
      StorePacketResponse::default_instance_,
      StorePacketResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorePacketResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorePacketResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StorePacketResponse));
  AddToWatchListRequest_descriptor_ = file->message_type(8);
  static const int AddToWatchListRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddToWatchListRequest, watch_list_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddToWatchListRequest, signed_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddToWatchListRequest, store_contract_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddToWatchListRequest, request_signature_),
  };
  AddToWatchListRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddToWatchListRequest_descriptor_,
      AddToWatchListRequest::default_instance_,
      AddToWatchListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddToWatchListRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddToWatchListRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddToWatchListRequest));
  AddToWatchListResponse_descriptor_ = file->message_type(9);
  static const int AddToWatchListResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddToWatchListResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddToWatchListResponse, pmid_),
  };
  AddToWatchListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddToWatchListResponse_descriptor_,
      AddToWatchListResponse::default_instance_,
      AddToWatchListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddToWatchListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddToWatchListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddToWatchListResponse));
  RemoveFromWatchListRequest_descriptor_ = file->message_type(10);
  static const int RemoveFromWatchListRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveFromWatchListRequest, watchlist_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveFromWatchListRequest, signed_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveFromWatchListRequest, request_signature_),
  };
  RemoveFromWatchListRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RemoveFromWatchListRequest_descriptor_,
      RemoveFromWatchListRequest::default_instance_,
      RemoveFromWatchListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveFromWatchListRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveFromWatchListRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RemoveFromWatchListRequest));
  RemoveFromWatchListResponse_descriptor_ = file->message_type(11);
  static const int RemoveFromWatchListResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveFromWatchListResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveFromWatchListResponse, pmid_),
  };
  RemoveFromWatchListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RemoveFromWatchListResponse_descriptor_,
      RemoveFromWatchListResponse::default_instance_,
      RemoveFromWatchListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveFromWatchListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveFromWatchListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RemoveFromWatchListResponse));
  AddToReferenceListRequest_descriptor_ = file->message_type(12);
  static const int AddToReferenceListRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddToReferenceListRequest, chunkname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddToReferenceListRequest, store_contract_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddToReferenceListRequest, request_signature_),
  };
  AddToReferenceListRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddToReferenceListRequest_descriptor_,
      AddToReferenceListRequest::default_instance_,
      AddToReferenceListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddToReferenceListRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddToReferenceListRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddToReferenceListRequest));
  AddToReferenceListResponse_descriptor_ = file->message_type(13);
  static const int AddToReferenceListResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddToReferenceListResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddToReferenceListResponse, pmid_),
  };
  AddToReferenceListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddToReferenceListResponse_descriptor_,
      AddToReferenceListResponse::default_instance_,
      AddToReferenceListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddToReferenceListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddToReferenceListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddToReferenceListResponse));
  RemoveFromReferenceListRequest_descriptor_ = file->message_type(14);
  static const int RemoveFromReferenceListRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveFromReferenceListRequest, chunkname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveFromReferenceListRequest, signed_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveFromReferenceListRequest, pmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveFromReferenceListRequest, public_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveFromReferenceListRequest, public_key_signature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveFromReferenceListRequest, request_signature_),
  };
  RemoveFromReferenceListRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RemoveFromReferenceListRequest_descriptor_,
      RemoveFromReferenceListRequest::default_instance_,
      RemoveFromReferenceListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveFromReferenceListRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveFromReferenceListRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RemoveFromReferenceListRequest));
  RemoveFromReferenceListResponse_descriptor_ = file->message_type(15);
  static const int RemoveFromReferenceListResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveFromReferenceListResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveFromReferenceListResponse, pmid_),
  };
  RemoveFromReferenceListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RemoveFromReferenceListResponse_descriptor_,
      RemoveFromReferenceListResponse::default_instance_,
      RemoveFromReferenceListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveFromReferenceListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveFromReferenceListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RemoveFromReferenceListResponse));
  AmendAccountRequest_descriptor_ = file->message_type(16);
  static const int AmendAccountRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AmendAccountRequest, amendment_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AmendAccountRequest, signature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AmendAccountRequest, store_prep_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AmendAccountRequest, signed_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AmendAccountRequest, store_contract_),
  };
  AmendAccountRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AmendAccountRequest_descriptor_,
      AmendAccountRequest::default_instance_,
      AmendAccountRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AmendAccountRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AmendAccountRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AmendAccountRequest));
  AmendAccountRequest_Amendment_descriptor_ = AmendAccountRequest_descriptor_->enum_type(0);
  AmendAccountResponse_descriptor_ = file->message_type(17);
  static const int AmendAccountResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AmendAccountResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AmendAccountResponse, pmid_),
  };
  AmendAccountResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AmendAccountResponse_descriptor_,
      AmendAccountResponse::default_instance_,
      AmendAccountResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AmendAccountResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AmendAccountResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AmendAccountResponse));
  GetAccountStatusRequest_descriptor_ = file->message_type(18);
  static const int GetAccountStatusRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccountStatusRequest, pmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccountStatusRequest, public_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccountStatusRequest, public_key_signature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccountStatusRequest, request_signature_),
  };
  GetAccountStatusRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAccountStatusRequest_descriptor_,
      GetAccountStatusRequest::default_instance_,
      GetAccountStatusRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccountStatusRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccountStatusRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAccountStatusRequest));
  GetAccountStatusResponse_descriptor_ = file->message_type(19);
  static const int GetAccountStatusResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccountStatusResponse, space_offered_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccountStatusResponse, space_given_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccountStatusResponse, space_taken_),
  };
  GetAccountStatusResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAccountStatusResponse_descriptor_,
      GetAccountStatusResponse::default_instance_,
      GetAccountStatusResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccountStatusResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccountStatusResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAccountStatusResponse));
  CheckChunkRequest_descriptor_ = file->message_type(20);
  static const int CheckChunkRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckChunkRequest, chunkname_),
  };
  CheckChunkRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CheckChunkRequest_descriptor_,
      CheckChunkRequest::default_instance_,
      CheckChunkRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckChunkRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckChunkRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CheckChunkRequest));
  CheckChunkResponse_descriptor_ = file->message_type(21);
  static const int CheckChunkResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckChunkResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckChunkResponse, pmid_),
  };
  CheckChunkResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CheckChunkResponse_descriptor_,
      CheckChunkResponse::default_instance_,
      CheckChunkResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckChunkResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckChunkResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CheckChunkResponse));
  GetChunkRequest_descriptor_ = file->message_type(22);
  static const int GetChunkRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChunkRequest, chunkname_),
  };
  GetChunkRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetChunkRequest_descriptor_,
      GetChunkRequest::default_instance_,
      GetChunkRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChunkRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChunkRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetChunkRequest));
  GetChunkResponse_descriptor_ = file->message_type(23);
  static const int GetChunkResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChunkResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChunkResponse, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChunkResponse, pmid_),
  };
  GetChunkResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetChunkResponse_descriptor_,
      GetChunkResponse::default_instance_,
      GetChunkResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChunkResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChunkResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetChunkResponse));
  GetPacketRequest_descriptor_ = file->message_type(24);
  static const int GetPacketRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPacketRequest, packetname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPacketRequest, key_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPacketRequest, public_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPacketRequest, public_key_signature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPacketRequest, request_signature_),
  };
  GetPacketRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetPacketRequest_descriptor_,
      GetPacketRequest::default_instance_,
      GetPacketRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPacketRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPacketRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetPacketRequest));
  GetPacketResponse_descriptor_ = file->message_type(25);
  static const int GetPacketResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPacketResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPacketResponse, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPacketResponse, pmid_),
  };
  GetPacketResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetPacketResponse_descriptor_,
      GetPacketResponse::default_instance_,
      GetPacketResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPacketResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPacketResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetPacketResponse));
  UpdateChunkRequest_descriptor_ = file->message_type(26);
  static const int UpdateChunkRequest_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateChunkRequest, chunkname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateChunkRequest, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateChunkRequest, pmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateChunkRequest, public_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateChunkRequest, public_key_signature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateChunkRequest, request_signature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateChunkRequest, data_type_),
  };
  UpdateChunkRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateChunkRequest_descriptor_,
      UpdateChunkRequest::default_instance_,
      UpdateChunkRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateChunkRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateChunkRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateChunkRequest));
  UpdateChunkResponse_descriptor_ = file->message_type(27);
  static const int UpdateChunkResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateChunkResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateChunkResponse, pmid_),
  };
  UpdateChunkResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateChunkResponse_descriptor_,
      UpdateChunkResponse::default_instance_,
      UpdateChunkResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateChunkResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateChunkResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateChunkResponse));
  DeleteChunkRequest_descriptor_ = file->message_type(28);
  static const int DeleteChunkRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteChunkRequest, chunkname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteChunkRequest, signed_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteChunkRequest, request_signature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteChunkRequest, data_type_),
  };
  DeleteChunkRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteChunkRequest_descriptor_,
      DeleteChunkRequest::default_instance_,
      DeleteChunkRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteChunkRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteChunkRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteChunkRequest));
  DeleteChunkResponse_descriptor_ = file->message_type(29);
  static const int DeleteChunkResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteChunkResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteChunkResponse, pmid_),
  };
  DeleteChunkResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteChunkResponse_descriptor_,
      DeleteChunkResponse::default_instance_,
      DeleteChunkResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteChunkResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteChunkResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteChunkResponse));
  ValidityCheckRequest_descriptor_ = file->message_type(30);
  static const int ValidityCheckRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValidityCheckRequest, chunkname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValidityCheckRequest, random_data_),
  };
  ValidityCheckRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ValidityCheckRequest_descriptor_,
      ValidityCheckRequest::default_instance_,
      ValidityCheckRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValidityCheckRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValidityCheckRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ValidityCheckRequest));
  ValidityCheckResponse_descriptor_ = file->message_type(31);
  static const int ValidityCheckResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValidityCheckResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValidityCheckResponse, hash_content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValidityCheckResponse, pmid_),
  };
  ValidityCheckResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ValidityCheckResponse_descriptor_,
      ValidityCheckResponse::default_instance_,
      ValidityCheckResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValidityCheckResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValidityCheckResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ValidityCheckResponse));
  SwapChunkRequest_descriptor_ = file->message_type(32);
  static const int SwapChunkRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapChunkRequest, request_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapChunkRequest, chunkname1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapChunkRequest, chunkcontent1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapChunkRequest, size1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapChunkRequest, chunkname2_),
  };
  SwapChunkRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SwapChunkRequest_descriptor_,
      SwapChunkRequest::default_instance_,
      SwapChunkRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapChunkRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapChunkRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SwapChunkRequest));
  SwapChunkResponse_descriptor_ = file->message_type(33);
  static const int SwapChunkResponse_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapChunkResponse, request_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapChunkResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapChunkResponse, chunkname1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapChunkResponse, chunkcontent1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapChunkResponse, size1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapChunkResponse, chunkname2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapChunkResponse, chunkcontent2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapChunkResponse, size2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapChunkResponse, pmid_),
  };
  SwapChunkResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SwapChunkResponse_descriptor_,
      SwapChunkResponse::default_instance_,
      SwapChunkResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapChunkResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapChunkResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SwapChunkResponse));
  VaultCommunication_descriptor_ = file->message_type(34);
  static const int VaultCommunication_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VaultCommunication, chunkstore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VaultCommunication, offered_space_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VaultCommunication, free_space_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VaultCommunication, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VaultCommunication, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VaultCommunication, timestamp_),
  };
  VaultCommunication_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VaultCommunication_descriptor_,
      VaultCommunication::default_instance_,
      VaultCommunication_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VaultCommunication, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VaultCommunication, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VaultCommunication));
  VaultStatusRequest_descriptor_ = file->message_type(35);
  static const int VaultStatusRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VaultStatusRequest, encrypted_request_),
  };
  VaultStatusRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VaultStatusRequest_descriptor_,
      VaultStatusRequest::default_instance_,
      VaultStatusRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VaultStatusRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VaultStatusRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VaultStatusRequest));
  VaultStatusResponse_descriptor_ = file->message_type(36);
  static const int VaultStatusResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VaultStatusResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VaultStatusResponse, encrypted_response_),
  };
  VaultStatusResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VaultStatusResponse_descriptor_,
      VaultStatusResponse::default_instance_,
      VaultStatusResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VaultStatusResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VaultStatusResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VaultStatusResponse));
  OwnVaultRequest_descriptor_ = file->message_type(37);
  static const int OwnVaultRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OwnVaultRequest, public_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OwnVaultRequest, private_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OwnVaultRequest, signed_public_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OwnVaultRequest, chunkstore_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OwnVaultRequest, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OwnVaultRequest, space_),
  };
  OwnVaultRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OwnVaultRequest_descriptor_,
      OwnVaultRequest::default_instance_,
      OwnVaultRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OwnVaultRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OwnVaultRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OwnVaultRequest));
  OwnVaultResponse_descriptor_ = file->message_type(38);
  static const int OwnVaultResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OwnVaultResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OwnVaultResponse, pmid_name_),
  };
  OwnVaultResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OwnVaultResponse_descriptor_,
      OwnVaultResponse::default_instance_,
      OwnVaultResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OwnVaultResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OwnVaultResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OwnVaultResponse));
  IsOwnedRequest_descriptor_ = file->message_type(39);
  static const int IsOwnedRequest_offsets_[1] = {
  };
  IsOwnedRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IsOwnedRequest_descriptor_,
      IsOwnedRequest::default_instance_,
      IsOwnedRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsOwnedRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsOwnedRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IsOwnedRequest));
  IsOwnedResponse_descriptor_ = file->message_type(40);
  static const int IsOwnedResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsOwnedResponse, status_),
  };
  IsOwnedResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IsOwnedResponse_descriptor_,
      IsOwnedResponse::default_instance_,
      IsOwnedResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsOwnedResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsOwnedResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IsOwnedResponse));
  CreateBPRequest_descriptor_ = file->message_type(41);
  static const int CreateBPRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateBPRequest, bufferpacket_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateBPRequest, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateBPRequest, pmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateBPRequest, public_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateBPRequest, signed_public_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateBPRequest, signed_request_),
  };
  CreateBPRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateBPRequest_descriptor_,
      CreateBPRequest::default_instance_,
      CreateBPRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateBPRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateBPRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateBPRequest));
  CreateBPResponse_descriptor_ = file->message_type(42);
  static const int CreateBPResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateBPResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateBPResponse, pmid_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateBPResponse, public_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateBPResponse, signed_public_key_),
  };
  CreateBPResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateBPResponse_descriptor_,
      CreateBPResponse::default_instance_,
      CreateBPResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateBPResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateBPResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateBPResponse));
  ModifyBPInfoRequest_descriptor_ = file->message_type(43);
  static const int ModifyBPInfoRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyBPInfoRequest, bufferpacket_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyBPInfoRequest, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyBPInfoRequest, pmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyBPInfoRequest, public_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyBPInfoRequest, signed_public_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyBPInfoRequest, signed_request_),
  };
  ModifyBPInfoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModifyBPInfoRequest_descriptor_,
      ModifyBPInfoRequest::default_instance_,
      ModifyBPInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyBPInfoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyBPInfoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModifyBPInfoRequest));
  ModifyBPInfoResponse_descriptor_ = file->message_type(44);
  static const int ModifyBPInfoResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyBPInfoResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyBPInfoResponse, pmid_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyBPInfoResponse, public_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyBPInfoResponse, signed_public_key_),
  };
  ModifyBPInfoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModifyBPInfoResponse_descriptor_,
      ModifyBPInfoResponse::default_instance_,
      ModifyBPInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyBPInfoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyBPInfoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModifyBPInfoResponse));
  GetBPMessagesRequest_descriptor_ = file->message_type(45);
  static const int GetBPMessagesRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBPMessagesRequest, bufferpacket_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBPMessagesRequest, public_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBPMessagesRequest, pmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBPMessagesRequest, signed_public_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBPMessagesRequest, signed_request_),
  };
  GetBPMessagesRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetBPMessagesRequest_descriptor_,
      GetBPMessagesRequest::default_instance_,
      GetBPMessagesRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBPMessagesRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBPMessagesRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetBPMessagesRequest));
  GetBPMessagesResponse_descriptor_ = file->message_type(46);
  static const int GetBPMessagesResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBPMessagesResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBPMessagesResponse, messages_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBPMessagesResponse, pmid_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBPMessagesResponse, public_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBPMessagesResponse, signed_public_key_),
  };
  GetBPMessagesResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetBPMessagesResponse_descriptor_,
      GetBPMessagesResponse::default_instance_,
      GetBPMessagesResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBPMessagesResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBPMessagesResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetBPMessagesResponse));
  AddBPMessageRequest_descriptor_ = file->message_type(47);
  static const int AddBPMessageRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBPMessageRequest, bufferpacket_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBPMessageRequest, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBPMessageRequest, pmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBPMessageRequest, public_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBPMessageRequest, signed_public_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBPMessageRequest, signed_request_),
  };
  AddBPMessageRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddBPMessageRequest_descriptor_,
      AddBPMessageRequest::default_instance_,
      AddBPMessageRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBPMessageRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBPMessageRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddBPMessageRequest));
  AddBPMessageResponse_descriptor_ = file->message_type(48);
  static const int AddBPMessageResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBPMessageResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBPMessageResponse, pmid_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBPMessageResponse, public_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBPMessageResponse, signed_public_key_),
  };
  AddBPMessageResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddBPMessageResponse_descriptor_,
      AddBPMessageResponse::default_instance_,
      AddBPMessageResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBPMessageResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBPMessageResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddBPMessageResponse));
  OwnVaultResult_descriptor_ = file->enum_type(0);
  VaultStatus_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_maidsafe_5fservice_5fmessages_2eproto);
}

void protobuf_RegisterTypes() {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SignedSize_descriptor_, &SignedSize::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StoreContract_descriptor_, &StoreContract::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StoreContract_InnerContract_descriptor_, &StoreContract_InnerContract::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StorePrepRequest_descriptor_, &StorePrepRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StorePrepResponse_descriptor_, &StorePrepResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StoreChunkRequest_descriptor_, &StoreChunkRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StoreChunkResponse_descriptor_, &StoreChunkResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StorePacketRequest_descriptor_, &StorePacketRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StorePacketResponse_descriptor_, &StorePacketResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddToWatchListRequest_descriptor_, &AddToWatchListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddToWatchListResponse_descriptor_, &AddToWatchListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RemoveFromWatchListRequest_descriptor_, &RemoveFromWatchListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RemoveFromWatchListResponse_descriptor_, &RemoveFromWatchListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddToReferenceListRequest_descriptor_, &AddToReferenceListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddToReferenceListResponse_descriptor_, &AddToReferenceListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RemoveFromReferenceListRequest_descriptor_, &RemoveFromReferenceListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RemoveFromReferenceListResponse_descriptor_, &RemoveFromReferenceListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AmendAccountRequest_descriptor_, &AmendAccountRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AmendAccountResponse_descriptor_, &AmendAccountResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAccountStatusRequest_descriptor_, &GetAccountStatusRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAccountStatusResponse_descriptor_, &GetAccountStatusResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CheckChunkRequest_descriptor_, &CheckChunkRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CheckChunkResponse_descriptor_, &CheckChunkResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetChunkRequest_descriptor_, &GetChunkRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetChunkResponse_descriptor_, &GetChunkResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetPacketRequest_descriptor_, &GetPacketRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetPacketResponse_descriptor_, &GetPacketResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateChunkRequest_descriptor_, &UpdateChunkRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateChunkResponse_descriptor_, &UpdateChunkResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteChunkRequest_descriptor_, &DeleteChunkRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteChunkResponse_descriptor_, &DeleteChunkResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ValidityCheckRequest_descriptor_, &ValidityCheckRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ValidityCheckResponse_descriptor_, &ValidityCheckResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SwapChunkRequest_descriptor_, &SwapChunkRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SwapChunkResponse_descriptor_, &SwapChunkResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VaultCommunication_descriptor_, &VaultCommunication::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VaultStatusRequest_descriptor_, &VaultStatusRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VaultStatusResponse_descriptor_, &VaultStatusResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OwnVaultRequest_descriptor_, &OwnVaultRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OwnVaultResponse_descriptor_, &OwnVaultResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IsOwnedRequest_descriptor_, &IsOwnedRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IsOwnedResponse_descriptor_, &IsOwnedResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateBPRequest_descriptor_, &CreateBPRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateBPResponse_descriptor_, &CreateBPResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModifyBPInfoRequest_descriptor_, &ModifyBPInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModifyBPInfoResponse_descriptor_, &ModifyBPInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetBPMessagesRequest_descriptor_, &GetBPMessagesRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetBPMessagesResponse_descriptor_, &GetBPMessagesResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddBPMessageRequest_descriptor_, &AddBPMessageRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddBPMessageResponse_descriptor_, &AddBPMessageResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_maidsafe_5fservice_5fmessages_2eproto() {
  delete SignedSize::default_instance_;
  delete SignedSize_reflection_;
  delete StoreContract::default_instance_;
  delete StoreContract_reflection_;
  delete StoreContract_InnerContract::default_instance_;
  delete StoreContract_InnerContract_reflection_;
  delete StorePrepRequest::default_instance_;
  delete StorePrepRequest_reflection_;
  delete StorePrepResponse::default_instance_;
  delete StorePrepResponse_reflection_;
  delete StoreChunkRequest::default_instance_;
  delete StoreChunkRequest_reflection_;
  delete StoreChunkResponse::default_instance_;
  delete StoreChunkResponse_reflection_;
  delete StorePacketRequest::default_instance_;
  delete StorePacketRequest_reflection_;
  delete StorePacketResponse::default_instance_;
  delete StorePacketResponse_reflection_;
  delete AddToWatchListRequest::default_instance_;
  delete AddToWatchListRequest_reflection_;
  delete AddToWatchListResponse::default_instance_;
  delete AddToWatchListResponse_reflection_;
  delete RemoveFromWatchListRequest::default_instance_;
  delete RemoveFromWatchListRequest_reflection_;
  delete RemoveFromWatchListResponse::default_instance_;
  delete RemoveFromWatchListResponse_reflection_;
  delete AddToReferenceListRequest::default_instance_;
  delete AddToReferenceListRequest_reflection_;
  delete AddToReferenceListResponse::default_instance_;
  delete AddToReferenceListResponse_reflection_;
  delete RemoveFromReferenceListRequest::default_instance_;
  delete RemoveFromReferenceListRequest_reflection_;
  delete RemoveFromReferenceListResponse::default_instance_;
  delete RemoveFromReferenceListResponse_reflection_;
  delete AmendAccountRequest::default_instance_;
  delete AmendAccountRequest_reflection_;
  delete AmendAccountResponse::default_instance_;
  delete AmendAccountResponse_reflection_;
  delete GetAccountStatusRequest::default_instance_;
  delete GetAccountStatusRequest_reflection_;
  delete GetAccountStatusResponse::default_instance_;
  delete GetAccountStatusResponse_reflection_;
  delete CheckChunkRequest::default_instance_;
  delete CheckChunkRequest_reflection_;
  delete CheckChunkResponse::default_instance_;
  delete CheckChunkResponse_reflection_;
  delete GetChunkRequest::default_instance_;
  delete GetChunkRequest_reflection_;
  delete GetChunkResponse::default_instance_;
  delete GetChunkResponse_reflection_;
  delete GetPacketRequest::default_instance_;
  delete GetPacketRequest_reflection_;
  delete GetPacketResponse::default_instance_;
  delete GetPacketResponse_reflection_;
  delete UpdateChunkRequest::default_instance_;
  delete UpdateChunkRequest_reflection_;
  delete UpdateChunkResponse::default_instance_;
  delete UpdateChunkResponse_reflection_;
  delete DeleteChunkRequest::default_instance_;
  delete DeleteChunkRequest_reflection_;
  delete DeleteChunkResponse::default_instance_;
  delete DeleteChunkResponse_reflection_;
  delete ValidityCheckRequest::default_instance_;
  delete ValidityCheckRequest_reflection_;
  delete ValidityCheckResponse::default_instance_;
  delete ValidityCheckResponse_reflection_;
  delete SwapChunkRequest::default_instance_;
  delete SwapChunkRequest_reflection_;
  delete SwapChunkResponse::default_instance_;
  delete SwapChunkResponse_reflection_;
  delete VaultCommunication::default_instance_;
  delete VaultCommunication_reflection_;
  delete VaultStatusRequest::default_instance_;
  delete VaultStatusRequest_reflection_;
  delete VaultStatusResponse::default_instance_;
  delete VaultStatusResponse_reflection_;
  delete OwnVaultRequest::default_instance_;
  delete OwnVaultRequest_reflection_;
  delete OwnVaultResponse::default_instance_;
  delete OwnVaultResponse_reflection_;
  delete IsOwnedRequest::default_instance_;
  delete IsOwnedRequest_reflection_;
  delete IsOwnedResponse::default_instance_;
  delete IsOwnedResponse_reflection_;
  delete CreateBPRequest::default_instance_;
  delete CreateBPRequest_reflection_;
  delete CreateBPResponse::default_instance_;
  delete CreateBPResponse_reflection_;
  delete ModifyBPInfoRequest::default_instance_;
  delete ModifyBPInfoRequest_reflection_;
  delete ModifyBPInfoResponse::default_instance_;
  delete ModifyBPInfoResponse_reflection_;
  delete GetBPMessagesRequest::default_instance_;
  delete GetBPMessagesRequest_reflection_;
  delete GetBPMessagesResponse::default_instance_;
  delete GetBPMessagesResponse_reflection_;
  delete AddBPMessageRequest::default_instance_;
  delete AddBPMessageRequest_reflection_;
  delete AddBPMessageResponse::default_instance_;
  delete AddBPMessageResponse_reflection_;
}

void protobuf_AddDesc_maidsafe_5fservice_5fmessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::maidsafe::protobuf_AddDesc_packet_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\037maidsafe_service_messages.proto\022\010maids"
    "afe\032\014packet.proto\"r\n\nSignedSize\022\021\n\tdata_"
    "size\030\001 \002(\004\022\021\n\tsignature\030\002 \002(\014\022\014\n\004pmid\030\003 "
    "\002(\014\022\022\n\npublic_key\030\004 \002(\014\022\034\n\024public_key_si"
    "gnature\030\005 \002(\014\"\360\001\n\rStoreContract\022=\n\016inner"
    "_contract\030\001 \002(\0132%.maidsafe.StoreContract"
    ".InnerContract\022\021\n\tsignature\030\002 \002(\014\022\014\n\004pmi"
    "d\030\003 \002(\014\022\022\n\npublic_key\030\004 \002(\014\022\034\n\024public_ke"
    "y_signature\030\005 \002(\014\032M\n\rInnerContract\022\016\n\006re"
    "sult\030\001 \002(\r\022,\n\016size_signature\030\002 \002(\0132\024.mai"
    "dsafe.SignedSize\"k\n\020StorePrepRequest\022\021\n\t"
    "chunkname\030\001 \002(\014\022)\n\013signed_size\030\002 \002(\0132\024.m"
    "aidsafe.SignedSize\022\031\n\021request_signature\030"
    "\003 \002(\014\"`\n\021StorePrepResponse\022/\n\016store_cont"
    "ract\030\001 \002(\0132\027.maidsafe.StoreContract\022\032\n\022r"
    "esponse_signature\030\002 \002(\014\"\311\001\n\021StoreChunkRe"
    "quest\022\021\n\tchunkname\030\001 \002(\014\022\014\n\004data\030\002 \002(\014\022\014"
    "\n\004pmid\030\003 \002(\014\022\022\n\npublic_key\030\004 \002(\014\022\034\n\024publ"
    "ic_key_signature\030\005 \002(\014\022\031\n\021request_signat"
    "ure\030\006 \002(\014\022\021\n\tdata_type\030\007 \002(\005\022\016\n\006offset\030\010"
    " \001(\r\022\025\n\rchunklet_size\030\t \001(\r\"2\n\022StoreChun"
    "kResponse\022\016\n\006result\030\001 \002(\r\022\014\n\004pmid\030\002 \001(\014\""
    "\326\001\n\022StorePacketRequest\022\022\n\npacketname\030\001 \002"
    "(\014\022,\n\013signed_data\030\002 \003(\0132\027.maidsafe.Gener"
    "icPacket\022\016\n\006key_id\030\003 \001(\014\022\022\n\npublic_key\030\004"
    " \001(\014\022\034\n\024public_key_signature\030\005 \001(\014\022\031\n\021re"
    "quest_signature\030\006 \001(\014\022\021\n\tdata_type\030\007 \002(\005"
    "\022\016\n\006append\030\010 \002(\010\"\223\001\n\023StorePacketResponse"
    "\022\016\n\006result\030\001 \002(\r\022\014\n\004pmid\030\002 \001(\014\022\022\n\npublic"
    "_key\030\003 \001(\014\022\034\n\024public_key_signature\030\004 \001(\014"
    "\022\032\n\022response_signature\030\005 \001(\014\022\020\n\010checksum"
    "\030\006 \001(\014\"\247\001\n\025AddToWatchListRequest\022\027\n\017watc"
    "h_list_name\030\001 \002(\014\022)\n\013signed_size\030\002 \001(\0132\024"
    ".maidsafe.SignedSize\022/\n\016store_contract\030\003"
    " \001(\0132\027.maidsafe.StoreContract\022\031\n\021request"
    "_signature\030\004 \002(\014\"6\n\026AddToWatchListRespon"
    "se\022\016\n\006result\030\001 \002(\r\022\014\n\004pmid\030\002 \001(\014\"z\n\032Remo"
    "veFromWatchListRequest\022\026\n\016watchlist_name"
    "\030\001 \002(\014\022)\n\013signed_size\030\002 \002(\0132\024.maidsafe.S"
    "ignedSize\022\031\n\021request_signature\030\003 \002(\014\";\n\033"
    "RemoveFromWatchListResponse\022\016\n\006result\030\001 "
    "\002(\r\022\014\n\004pmid\030\002 \001(\014\"z\n\031AddToReferenceListR"
    "equest\022\021\n\tchunkname\030\001 \002(\014\022/\n\016store_contr"
    "act\030\002 \002(\0132\027.maidsafe.StoreContract\022\031\n\021re"
    "quest_signature\030\003 \002(\014\":\n\032AddToReferenceL"
    "istResponse\022\016\n\006result\030\001 \002(\r\022\014\n\004pmid\030\002 \001("
    "\014\"\271\001\n\036RemoveFromReferenceListRequest\022\021\n\t"
    "chunkname\030\001 \002(\014\022)\n\013signed_size\030\002 \002(\0132\024.m"
    "aidsafe.SignedSize\022\014\n\004pmid\030\003 \002(\014\022\022\n\npubl"
    "ic_key\030\004 \002(\014\022\034\n\024public_key_signature\030\005 \002"
    "(\014\022\031\n\021request_signature\030\006 \002(\014\"?\n\037RemoveF"
    "romReferenceListResponse\022\016\n\006result\030\001 \002(\r"
    "\022\014\n\004pmid\030\002 \001(\014\"\213\003\n\023AmendAccountRequest\022?"
    "\n\016amendment_type\030\001 \002(\0162\'.maidsafe.AmendA"
    "ccountRequest.Amendment\022\021\n\tsignature\030\002 \002"
    "(\014\0228\n\023store_prep_response\030\003 \001(\0132\033.maidsa"
    "fe.StorePrepResponse\022)\n\013signed_size\030\004 \001("
    "\0132\024.maidsafe.SignedSize\022/\n\016store_contrac"
    "t\030\005 \001(\0132\027.maidsafe.StoreContract\"\211\001\n\tAme"
    "ndment\022\021\n\rkSpaceOffered\020\000\022\022\n\016kSpaceGiven"
    "Inc\020\001\022\022\n\016kSpaceGivenDec\020\002\022\022\n\016kSpaceTaken"
    "Inc\020\003\022\022\n\016kSpaceTakenDec\020\004\022\031\n\025kFailedStor"
    "eAgreement\020\005\"4\n\024AmendAccountResponse\022\016\n\006"
    "result\030\001 \002(\r\022\014\n\004pmid\030\002 \001(\014\"t\n\027GetAccount"
    "StatusRequest\022\014\n\004pmid\030\001 \002(\014\022\022\n\npublic_ke"
    "y\030\002 \001(\014\022\034\n\024public_key_signature\030\003 \001(\014\022\031\n"
    "\021request_signature\030\004 \001(\014\"[\n\030GetAccountSt"
    "atusResponse\022\025\n\rspace_offered\030\001 \001(\004\022\023\n\013s"
    "pace_given\030\002 \001(\004\022\023\n\013space_taken\030\003 \001(\004\"&\n"
    "\021CheckChunkRequest\022\021\n\tchunkname\030\001 \002(\014\"2\n"
    "\022CheckChunkResponse\022\016\n\006result\030\001 \002(\r\022\014\n\004p"
    "mid\030\002 \002(\014\"$\n\017GetChunkRequest\022\021\n\tchunknam"
    "e\030\001 \002(\014\"A\n\020GetChunkResponse\022\016\n\006result\030\001 "
    "\002(\r\022\017\n\007content\030\002 \001(\014\022\014\n\004pmid\030\003 \001(\014\"\203\001\n\020G"
    "etPacketRequest\022\022\n\npacketname\030\001 \002(\014\022\016\n\006k"
    "ey_id\030\002 \001(\014\022\022\n\npublic_key\030\003 \001(\014\022\034\n\024publi"
    "c_key_signature\030\004 \001(\014\022\031\n\021request_signatu"
    "re\030\005 \001(\014\"[\n\021GetPacketResponse\022\016\n\006result\030"
    "\001 \002(\r\022(\n\007content\030\002 \003(\0132\027.maidsafe.Generi"
    "cPacket\022\014\n\004pmid\030\003 \001(\014\"\243\001\n\022UpdateChunkReq"
    "uest\022\021\n\tchunkname\030\001 \002(\014\022\014\n\004data\030\002 \002(\014\022\014\n"
    "\004pmid\030\003 \002(\014\022\022\n\npublic_key\030\004 \002(\014\022\034\n\024publi"
    "c_key_signature\030\005 \002(\014\022\031\n\021request_signatu"
    "re\030\006 \002(\014\022\021\n\tdata_type\030\007 \002(\005\"3\n\023UpdateChu"
    "nkResponse\022\016\n\006result\030\001 \002(\r\022\014\n\004pmid\030\002 \001(\014"
    "\"\200\001\n\022DeleteChunkRequest\022\021\n\tchunkname\030\001 \002"
    "(\014\022)\n\013signed_size\030\002 \002(\0132\024.maidsafe.Signe"
    "dSize\022\031\n\021request_signature\030\003 \002(\014\022\021\n\tdata"
    "_type\030\004 \002(\005\"3\n\023DeleteChunkResponse\022\016\n\006re"
    "sult\030\001 \002(\r\022\014\n\004pmid\030\002 \001(\014\">\n\024ValidityChec"
    "kRequest\022\021\n\tchunkname\030\001 \002(\014\022\023\n\013random_da"
    "ta\030\002 \002(\014\"K\n\025ValidityCheckResponse\022\016\n\006res"
    "ult\030\001 \002(\r\022\024\n\014hash_content\030\002 \001(\014\022\014\n\004pmid\030"
    "\003 \002(\014\"v\n\020SwapChunkRequest\022\024\n\014request_typ"
    "e\030\001 \002(\005\022\022\n\nchunkname1\030\002 \002(\014\022\025\n\rchunkcont"
    "ent1\030\003 \001(\014\022\r\n\005size1\030\004 \001(\005\022\022\n\nchunkname2\030"
    "\005 \001(\014\"\273\001\n\021SwapChunkResponse\022\024\n\014request_t"
    "ype\030\001 \002(\005\022\016\n\006result\030\002 \002(\r\022\022\n\nchunkname1\030"
    "\003 \001(\014\022\025\n\rchunkcontent1\030\004 \001(\014\022\r\n\005size1\030\005 "
    "\001(\005\022\022\n\nchunkname2\030\006 \001(\014\022\025\n\rchunkcontent2"
    "\030\007 \001(\014\022\r\n\005size2\030\010 \001(\005\022\014\n\004pmid\030\t \002(\014\"\200\001\n\022"
    "VaultCommunication\022\022\n\nchunkstore\030\001 \001(\014\022\025"
    "\n\roffered_space\030\002 \001(\004\022\022\n\nfree_space\030\003 \001("
    "\004\022\n\n\002ip\030\004 \001(\014\022\014\n\004port\030\005 \001(\r\022\021\n\ttimestamp"
    "\030\006 \002(\r\"/\n\022VaultStatusRequest\022\031\n\021encrypte"
    "d_request\030\001 \002(\014\"A\n\023VaultStatusResponse\022\016"
    "\n\006result\030\001 \002(\r\022\032\n\022encrypted_response\030\002 \001"
    "(\014\"\212\001\n\017OwnVaultRequest\022\022\n\npublic_key\030\001 \002"
    "(\014\022\023\n\013private_key\030\002 \002(\014\022\031\n\021signed_public"
    "_key\030\003 \002(\014\022\026\n\016chunkstore_dir\030\004 \002(\014\022\014\n\004po"
    "rt\030\005 \002(\r\022\r\n\005space\030\006 \002(\004\"O\n\020OwnVaultRespo"
    "nse\022(\n\006result\030\001 \002(\0162\030.maidsafe.OwnVaultR"
    "esult\022\021\n\tpmid_name\030\002 \001(\014\"\020\n\016IsOwnedReque"
    "st\"8\n\017IsOwnedResponse\022%\n\006status\030\001 \002(\0162\025."
    "maidsafe.VaultStatus\"\217\001\n\017CreateBPRequest"
    "\022\031\n\021bufferpacket_name\030\001 \002(\014\022\014\n\004data\030\002 \002("
    "\014\022\014\n\004pmid\030\003 \002(\014\022\022\n\npublic_key\030\004 \002(\014\022\031\n\021s"
    "igned_public_key\030\005 \002(\014\022\026\n\016signed_request"
    "\030\006 \002(\014\"b\n\020CreateBPResponse\022\016\n\006result\030\001 \002"
    "(\r\022\017\n\007pmid_id\030\002 \001(\014\022\022\n\npublic_key\030\003 \001(\014\022"
    "\031\n\021signed_public_key\030\004 \001(\014\"\223\001\n\023ModifyBPI"
    "nfoRequest\022\031\n\021bufferpacket_name\030\001 \002(\014\022\014\n"
    "\004data\030\002 \002(\014\022\014\n\004pmid\030\003 \002(\014\022\022\n\npublic_key\030"
    "\004 \002(\014\022\031\n\021signed_public_key\030\005 \002(\014\022\026\n\016sign"
    "ed_request\030\006 \002(\014\"f\n\024ModifyBPInfoResponse"
    "\022\016\n\006result\030\001 \002(\r\022\017\n\007pmid_id\030\002 \001(\014\022\022\n\npub"
    "lic_key\030\003 \001(\014\022\031\n\021signed_public_key\030\004 \001(\014"
    "\"\206\001\n\024GetBPMessagesRequest\022\031\n\021bufferpacke"
    "t_name\030\001 \002(\014\022\022\n\npublic_key\030\002 \002(\014\022\014\n\004pmid"
    "\030\003 \002(\014\022\031\n\021signed_public_key\030\004 \002(\014\022\026\n\016sig"
    "ned_request\030\005 \002(\014\"y\n\025GetBPMessagesRespon"
    "se\022\016\n\006result\030\001 \002(\r\022\020\n\010messages\030\002 \003(\014\022\017\n\007"
    "pmid_id\030\003 \001(\014\022\022\n\npublic_key\030\004 \001(\014\022\031\n\021sig"
    "ned_public_key\030\005 \001(\014\"\223\001\n\023AddBPMessageReq"
    "uest\022\031\n\021bufferpacket_name\030\001 \002(\014\022\014\n\004data\030"
    "\002 \002(\014\022\014\n\004pmid\030\003 \002(\014\022\022\n\npublic_key\030\004 \002(\014\022"
    "\031\n\021signed_public_key\030\005 \002(\014\022\026\n\016signed_req"
    "uest\030\006 \002(\014\"f\n\024AddBPMessageResponse\022\016\n\006re"
    "sult\030\001 \002(\r\022\017\n\007pmid_id\030\002 \001(\014\022\022\n\npublic_ke"
    "y\030\003 \001(\014\022\031\n\021signed_public_key\030\004 \001(\014*\357\001\n\016O"
    "wnVaultResult\022\021\n\rOWNED_SUCCESS\020\000\022\027\n\023VAUL"
    "T_ALREADY_OWNED\020\001\022\021\n\rVAULT_IS_DOWN\020\002\022\024\n\020"
    "INVALID_RSA_KEYS\020\003\022\024\n\020NOT_ENOUGH_SPACE\020\004"
    "\022\026\n\022NO_SPACE_ALLOCATED\020\005\022\020\n\014INVALID_PORT"
    "\020\006\022\031\n\025FAILED_TO_START_VAULT\020\007\022\026\n\022INVALID"
    "_OWNREQUEST\020\010\022\025\n\021INVALID_PMID_NAME\020\t*I\n\013"
    "VaultStatus\022\r\n\tNOT_OWNED\020\000\022\t\n\005OWNED\020\001\022\010\n"
    "\004DOWN\020\002\022\026\n\022ISOWNRPC_CANCELLED\020\003", 5911);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "maidsafe_service_messages.proto", &protobuf_RegisterTypes);
  SignedSize::default_instance_ = new SignedSize();
  StoreContract::default_instance_ = new StoreContract();
  StoreContract_InnerContract::default_instance_ = new StoreContract_InnerContract();
  StorePrepRequest::default_instance_ = new StorePrepRequest();
  StorePrepResponse::default_instance_ = new StorePrepResponse();
  StoreChunkRequest::default_instance_ = new StoreChunkRequest();
  StoreChunkResponse::default_instance_ = new StoreChunkResponse();
  StorePacketRequest::default_instance_ = new StorePacketRequest();
  StorePacketResponse::default_instance_ = new StorePacketResponse();
  AddToWatchListRequest::default_instance_ = new AddToWatchListRequest();
  AddToWatchListResponse::default_instance_ = new AddToWatchListResponse();
  RemoveFromWatchListRequest::default_instance_ = new RemoveFromWatchListRequest();
  RemoveFromWatchListResponse::default_instance_ = new RemoveFromWatchListResponse();
  AddToReferenceListRequest::default_instance_ = new AddToReferenceListRequest();
  AddToReferenceListResponse::default_instance_ = new AddToReferenceListResponse();
  RemoveFromReferenceListRequest::default_instance_ = new RemoveFromReferenceListRequest();
  RemoveFromReferenceListResponse::default_instance_ = new RemoveFromReferenceListResponse();
  AmendAccountRequest::default_instance_ = new AmendAccountRequest();
  AmendAccountResponse::default_instance_ = new AmendAccountResponse();
  GetAccountStatusRequest::default_instance_ = new GetAccountStatusRequest();
  GetAccountStatusResponse::default_instance_ = new GetAccountStatusResponse();
  CheckChunkRequest::default_instance_ = new CheckChunkRequest();
  CheckChunkResponse::default_instance_ = new CheckChunkResponse();
  GetChunkRequest::default_instance_ = new GetChunkRequest();
  GetChunkResponse::default_instance_ = new GetChunkResponse();
  GetPacketRequest::default_instance_ = new GetPacketRequest();
  GetPacketResponse::default_instance_ = new GetPacketResponse();
  UpdateChunkRequest::default_instance_ = new UpdateChunkRequest();
  UpdateChunkResponse::default_instance_ = new UpdateChunkResponse();
  DeleteChunkRequest::default_instance_ = new DeleteChunkRequest();
  DeleteChunkResponse::default_instance_ = new DeleteChunkResponse();
  ValidityCheckRequest::default_instance_ = new ValidityCheckRequest();
  ValidityCheckResponse::default_instance_ = new ValidityCheckResponse();
  SwapChunkRequest::default_instance_ = new SwapChunkRequest();
  SwapChunkResponse::default_instance_ = new SwapChunkResponse();
  VaultCommunication::default_instance_ = new VaultCommunication();
  VaultStatusRequest::default_instance_ = new VaultStatusRequest();
  VaultStatusResponse::default_instance_ = new VaultStatusResponse();
  OwnVaultRequest::default_instance_ = new OwnVaultRequest();
  OwnVaultResponse::default_instance_ = new OwnVaultResponse();
  IsOwnedRequest::default_instance_ = new IsOwnedRequest();
  IsOwnedResponse::default_instance_ = new IsOwnedResponse();
  CreateBPRequest::default_instance_ = new CreateBPRequest();
  CreateBPResponse::default_instance_ = new CreateBPResponse();
  ModifyBPInfoRequest::default_instance_ = new ModifyBPInfoRequest();
  ModifyBPInfoResponse::default_instance_ = new ModifyBPInfoResponse();
  GetBPMessagesRequest::default_instance_ = new GetBPMessagesRequest();
  GetBPMessagesResponse::default_instance_ = new GetBPMessagesResponse();
  AddBPMessageRequest::default_instance_ = new AddBPMessageRequest();
  AddBPMessageResponse::default_instance_ = new AddBPMessageResponse();
  SignedSize::default_instance_->InitAsDefaultInstance();
  StoreContract::default_instance_->InitAsDefaultInstance();
  StoreContract_InnerContract::default_instance_->InitAsDefaultInstance();
  StorePrepRequest::default_instance_->InitAsDefaultInstance();
  StorePrepResponse::default_instance_->InitAsDefaultInstance();
  StoreChunkRequest::default_instance_->InitAsDefaultInstance();
  StoreChunkResponse::default_instance_->InitAsDefaultInstance();
  StorePacketRequest::default_instance_->InitAsDefaultInstance();
  StorePacketResponse::default_instance_->InitAsDefaultInstance();
  AddToWatchListRequest::default_instance_->InitAsDefaultInstance();
  AddToWatchListResponse::default_instance_->InitAsDefaultInstance();
  RemoveFromWatchListRequest::default_instance_->InitAsDefaultInstance();
  RemoveFromWatchListResponse::default_instance_->InitAsDefaultInstance();
  AddToReferenceListRequest::default_instance_->InitAsDefaultInstance();
  AddToReferenceListResponse::default_instance_->InitAsDefaultInstance();
  RemoveFromReferenceListRequest::default_instance_->InitAsDefaultInstance();
  RemoveFromReferenceListResponse::default_instance_->InitAsDefaultInstance();
  AmendAccountRequest::default_instance_->InitAsDefaultInstance();
  AmendAccountResponse::default_instance_->InitAsDefaultInstance();
  GetAccountStatusRequest::default_instance_->InitAsDefaultInstance();
  GetAccountStatusResponse::default_instance_->InitAsDefaultInstance();
  CheckChunkRequest::default_instance_->InitAsDefaultInstance();
  CheckChunkResponse::default_instance_->InitAsDefaultInstance();
  GetChunkRequest::default_instance_->InitAsDefaultInstance();
  GetChunkResponse::default_instance_->InitAsDefaultInstance();
  GetPacketRequest::default_instance_->InitAsDefaultInstance();
  GetPacketResponse::default_instance_->InitAsDefaultInstance();
  UpdateChunkRequest::default_instance_->InitAsDefaultInstance();
  UpdateChunkResponse::default_instance_->InitAsDefaultInstance();
  DeleteChunkRequest::default_instance_->InitAsDefaultInstance();
  DeleteChunkResponse::default_instance_->InitAsDefaultInstance();
  ValidityCheckRequest::default_instance_->InitAsDefaultInstance();
  ValidityCheckResponse::default_instance_->InitAsDefaultInstance();
  SwapChunkRequest::default_instance_->InitAsDefaultInstance();
  SwapChunkResponse::default_instance_->InitAsDefaultInstance();
  VaultCommunication::default_instance_->InitAsDefaultInstance();
  VaultStatusRequest::default_instance_->InitAsDefaultInstance();
  VaultStatusResponse::default_instance_->InitAsDefaultInstance();
  OwnVaultRequest::default_instance_->InitAsDefaultInstance();
  OwnVaultResponse::default_instance_->InitAsDefaultInstance();
  IsOwnedRequest::default_instance_->InitAsDefaultInstance();
  IsOwnedResponse::default_instance_->InitAsDefaultInstance();
  CreateBPRequest::default_instance_->InitAsDefaultInstance();
  CreateBPResponse::default_instance_->InitAsDefaultInstance();
  ModifyBPInfoRequest::default_instance_->InitAsDefaultInstance();
  ModifyBPInfoResponse::default_instance_->InitAsDefaultInstance();
  GetBPMessagesRequest::default_instance_->InitAsDefaultInstance();
  GetBPMessagesResponse::default_instance_->InitAsDefaultInstance();
  AddBPMessageRequest::default_instance_->InitAsDefaultInstance();
  AddBPMessageResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_maidsafe_5fservice_5fmessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_maidsafe_5fservice_5fmessages_2eproto {
  StaticDescriptorInitializer_maidsafe_5fservice_5fmessages_2eproto() {
    protobuf_AddDesc_maidsafe_5fservice_5fmessages_2eproto();
  }
} static_descriptor_initializer_maidsafe_5fservice_5fmessages_2eproto_;

const ::google::protobuf::EnumDescriptor* OwnVaultResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OwnVaultResult_descriptor_;
}
bool OwnVaultResult_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* VaultStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VaultStatus_descriptor_;
}
bool VaultStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::std::string SignedSize::_default_signature_;
const ::std::string SignedSize::_default_pmid_;
const ::std::string SignedSize::_default_public_key_;
const ::std::string SignedSize::_default_public_key_signature_;
#ifndef _MSC_VER
const int SignedSize::kDataSizeFieldNumber;
const int SignedSize::kSignatureFieldNumber;
const int SignedSize::kPmidFieldNumber;
const int SignedSize::kPublicKeyFieldNumber;
const int SignedSize::kPublicKeySignatureFieldNumber;
#endif  // !_MSC_VER

SignedSize::SignedSize()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    data_size_(GOOGLE_ULONGLONG(0)),
    signature_(const_cast< ::std::string*>(&_default_signature_)),
    pmid_(const_cast< ::std::string*>(&_default_pmid_)),
    public_key_(const_cast< ::std::string*>(&_default_public_key_)),
    public_key_signature_(const_cast< ::std::string*>(&_default_public_key_signature_)) {
  SharedCtor();
}

void SignedSize::InitAsDefaultInstance() {}

SignedSize::SignedSize(const SignedSize& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    data_size_(GOOGLE_ULONGLONG(0)),
    signature_(const_cast< ::std::string*>(&_default_signature_)),
    pmid_(const_cast< ::std::string*>(&_default_pmid_)),
    public_key_(const_cast< ::std::string*>(&_default_public_key_)),
    public_key_signature_(const_cast< ::std::string*>(&_default_public_key_signature_)) {
  SharedCtor();
  MergeFrom(from);
}

void SignedSize::SharedCtor() {
  _cached_size_ = 0;
  data_size_ = GOOGLE_ULONGLONG(0);
  signature_ = const_cast< ::std::string*>(&_default_signature_);
  pmid_ = const_cast< ::std::string*>(&_default_pmid_);
  public_key_ = const_cast< ::std::string*>(&_default_public_key_);
  public_key_signature_ = const_cast< ::std::string*>(&_default_public_key_signature_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SignedSize::~SignedSize() {
  SharedDtor();
}

void SignedSize::SharedDtor() {
  if (signature_ != &_default_signature_) {
    delete signature_;
  }
  if (pmid_ != &_default_pmid_) {
    delete pmid_;
  }
  if (public_key_ != &_default_public_key_) {
    delete public_key_;
  }
  if (public_key_signature_ != &_default_public_key_signature_) {
    delete public_key_signature_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* SignedSize::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignedSize_descriptor_;
}

const SignedSize& SignedSize::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_5fservice_5fmessages_2eproto();  return *default_instance_;
}

SignedSize* SignedSize::default_instance_ = NULL;

SignedSize* SignedSize::New() const {
  return new SignedSize;
}

void SignedSize::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    data_size_ = GOOGLE_ULONGLONG(0);
    if (_has_bit(1)) {
      if (signature_ != &_default_signature_) {
        signature_->clear();
      }
    }
    if (_has_bit(2)) {
      if (pmid_ != &_default_pmid_) {
        pmid_->clear();
      }
    }
    if (_has_bit(3)) {
      if (public_key_ != &_default_public_key_) {
        public_key_->clear();
      }
    }
    if (_has_bit(4)) {
      if (public_key_signature_ != &_default_public_key_signature_) {
        public_key_signature_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SignedSize::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required uint64 data_size = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt64(
              input, &data_size_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_signature;
        break;
      }
      
      // required bytes signature = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_signature:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_signature()));
        if (input->ExpectTag(26)) goto parse_pmid;
        break;
      }
      
      // required bytes pmid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_pmid:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_pmid()));
        if (input->ExpectTag(34)) goto parse_public_key;
        break;
      }
      
      // required bytes public_key = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_public_key:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_public_key()));
        if (input->ExpectTag(42)) goto parse_public_key_signature;
        break;
      }
      
      // required bytes public_key_signature = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_public_key_signature:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_public_key_signature()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SignedSize::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    SignedSize::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint64 data_size = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt64(1, this->data_size(), output);
  }
  
  // required bytes signature = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(2, this->signature(), output);
  }
  
  // required bytes pmid = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(3, this->pmid(), output);
  }
  
  // required bytes public_key = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(4, this->public_key(), output);
  }
  
  // required bytes public_key_signature = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(5, this->public_key_signature(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SignedSize::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 data_size = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt64ToArray(1, this->data_size(), target);
  }
  
  // required bytes signature = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(2, this->signature(), target);
  }
  
  // required bytes pmid = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(3, this->pmid(), target);
  }
  
  // required bytes public_key = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(4, this->public_key(), target);
  }
  
  // required bytes public_key_signature = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(5, this->public_key_signature(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SignedSize::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 data_size = 1;
    if (has_data_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt64Size(
          this->data_size());
    }
    
    // required bytes signature = 2;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->signature());
    }
    
    // required bytes pmid = 3;
    if (has_pmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->pmid());
    }
    
    // required bytes public_key = 4;
    if (has_public_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->public_key());
    }
    
    // required bytes public_key_signature = 5;
    if (has_public_key_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->public_key_signature());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void SignedSize::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SignedSize* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SignedSize*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SignedSize::MergeFrom(const SignedSize& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_data_size(from.data_size());
    }
    if (from._has_bit(1)) {
      set_signature(from.signature());
    }
    if (from._has_bit(2)) {
      set_pmid(from.pmid());
    }
    if (from._has_bit(3)) {
      set_public_key(from.public_key());
    }
    if (from._has_bit(4)) {
      set_public_key_signature(from.public_key_signature());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SignedSize::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignedSize::CopyFrom(const SignedSize& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignedSize::Swap(SignedSize* other) {
  if (other != this) {
    std::swap(data_size_, other->data_size_);
    std::swap(signature_, other->signature_);
    std::swap(pmid_, other->pmid_);
    std::swap(public_key_, other->public_key_);
    std::swap(public_key_signature_, other->public_key_signature_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool SignedSize::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* SignedSize::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* SignedSize::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return SignedSize_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int StoreContract_InnerContract::kResultFieldNumber;
const int StoreContract_InnerContract::kSizeSignatureFieldNumber;
#endif  // !_MSC_VER

StoreContract_InnerContract::StoreContract_InnerContract()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    result_(0u),
    size_signature_(NULL) {
  SharedCtor();
}

void StoreContract_InnerContract::InitAsDefaultInstance() {  size_signature_ = const_cast< ::maidsafe::SignedSize*>(&::maidsafe::SignedSize::default_instance());
}

StoreContract_InnerContract::StoreContract_InnerContract(const StoreContract_InnerContract& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    result_(0u),
    size_signature_(NULL) {
  SharedCtor();
  MergeFrom(from);
}

void StoreContract_InnerContract::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  size_signature_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StoreContract_InnerContract::~StoreContract_InnerContract() {
  SharedDtor();
}

void StoreContract_InnerContract::SharedDtor() {
  if (this != default_instance_) {
    delete size_signature_;
  }
}

const ::google::protobuf::Descriptor* StoreContract_InnerContract::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StoreContract_InnerContract_descriptor_;
}

const StoreContract_InnerContract& StoreContract_InnerContract::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_5fservice_5fmessages_2eproto();  return *default_instance_;
}

StoreContract_InnerContract* StoreContract_InnerContract::default_instance_ = NULL;

StoreContract_InnerContract* StoreContract_InnerContract::New() const {
  return new StoreContract_InnerContract;
}

void StoreContract_InnerContract::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    if (_has_bit(1)) {
      if (size_signature_ != NULL) size_signature_->::maidsafe::SignedSize::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StoreContract_InnerContract::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_size_signature;
        break;
      }
      
      // required .maidsafe.SignedSize size_signature = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_size_signature:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_size_signature()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StoreContract_InnerContract::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    StoreContract_InnerContract::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->result(), output);
  }
  
  // required .maidsafe.SignedSize size_signature = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->size_signature(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StoreContract_InnerContract::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->result(), target);
  }
  
  // required .maidsafe.SignedSize size_signature = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->size_signature(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StoreContract_InnerContract::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
    // required .maidsafe.SignedSize size_signature = 2;
    if (has_size_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->size_signature());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void StoreContract_InnerContract::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StoreContract_InnerContract* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StoreContract_InnerContract*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StoreContract_InnerContract::MergeFrom(const StoreContract_InnerContract& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_result(from.result());
    }
    if (from._has_bit(1)) {
      mutable_size_signature()->::maidsafe::SignedSize::MergeFrom(from.size_signature());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StoreContract_InnerContract::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoreContract_InnerContract::CopyFrom(const StoreContract_InnerContract& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoreContract_InnerContract::Swap(StoreContract_InnerContract* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(size_signature_, other->size_signature_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool StoreContract_InnerContract::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_size_signature()) {
    if (!this->size_signature().IsInitialized()) return false;
  }
  return true;
}

const ::google::protobuf::Descriptor* StoreContract_InnerContract::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* StoreContract_InnerContract::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return StoreContract_InnerContract_reflection_;
}

// -------------------------------------------------------------------

const ::std::string StoreContract::_default_signature_;
const ::std::string StoreContract::_default_pmid_;
const ::std::string StoreContract::_default_public_key_;
const ::std::string StoreContract::_default_public_key_signature_;
#ifndef _MSC_VER
const int StoreContract::kInnerContractFieldNumber;
const int StoreContract::kSignatureFieldNumber;
const int StoreContract::kPmidFieldNumber;
const int StoreContract::kPublicKeyFieldNumber;
const int StoreContract::kPublicKeySignatureFieldNumber;
#endif  // !_MSC_VER

StoreContract::StoreContract()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    inner_contract_(NULL),
    signature_(const_cast< ::std::string*>(&_default_signature_)),
    pmid_(const_cast< ::std::string*>(&_default_pmid_)),
    public_key_(const_cast< ::std::string*>(&_default_public_key_)),
    public_key_signature_(const_cast< ::std::string*>(&_default_public_key_signature_)) {
  SharedCtor();
}

void StoreContract::InitAsDefaultInstance() {  inner_contract_ = const_cast< ::maidsafe::StoreContract_InnerContract*>(&::maidsafe::StoreContract_InnerContract::default_instance());
}

StoreContract::StoreContract(const StoreContract& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    inner_contract_(NULL),
    signature_(const_cast< ::std::string*>(&_default_signature_)),
    pmid_(const_cast< ::std::string*>(&_default_pmid_)),
    public_key_(const_cast< ::std::string*>(&_default_public_key_)),
    public_key_signature_(const_cast< ::std::string*>(&_default_public_key_signature_)) {
  SharedCtor();
  MergeFrom(from);
}

void StoreContract::SharedCtor() {
  _cached_size_ = 0;
  inner_contract_ = NULL;
  signature_ = const_cast< ::std::string*>(&_default_signature_);
  pmid_ = const_cast< ::std::string*>(&_default_pmid_);
  public_key_ = const_cast< ::std::string*>(&_default_public_key_);
  public_key_signature_ = const_cast< ::std::string*>(&_default_public_key_signature_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StoreContract::~StoreContract() {
  SharedDtor();
}

void StoreContract::SharedDtor() {
  if (signature_ != &_default_signature_) {
    delete signature_;
  }
  if (pmid_ != &_default_pmid_) {
    delete pmid_;
  }
  if (public_key_ != &_default_public_key_) {
    delete public_key_;
  }
  if (public_key_signature_ != &_default_public_key_signature_) {
    delete public_key_signature_;
  }
  if (this != default_instance_) {
    delete inner_contract_;
  }
}

const ::google::protobuf::Descriptor* StoreContract::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StoreContract_descriptor_;
}

const StoreContract& StoreContract::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_5fservice_5fmessages_2eproto();  return *default_instance_;
}

StoreContract* StoreContract::default_instance_ = NULL;

StoreContract* StoreContract::New() const {
  return new StoreContract;
}

void StoreContract::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (inner_contract_ != NULL) inner_contract_->::maidsafe::StoreContract_InnerContract::Clear();
    }
    if (_has_bit(1)) {
      if (signature_ != &_default_signature_) {
        signature_->clear();
      }
    }
    if (_has_bit(2)) {
      if (pmid_ != &_default_pmid_) {
        pmid_->clear();
      }
    }
    if (_has_bit(3)) {
      if (public_key_ != &_default_public_key_) {
        public_key_->clear();
      }
    }
    if (_has_bit(4)) {
      if (public_key_signature_ != &_default_public_key_signature_) {
        public_key_signature_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StoreContract::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required .maidsafe.StoreContract.InnerContract inner_contract = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_inner_contract()));
        if (input->ExpectTag(18)) goto parse_signature;
        break;
      }
      
      // required bytes signature = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_signature:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_signature()));
        if (input->ExpectTag(26)) goto parse_pmid;
        break;
      }
      
      // required bytes pmid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_pmid:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_pmid()));
        if (input->ExpectTag(34)) goto parse_public_key;
        break;
      }
      
      // required bytes public_key = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_public_key:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_public_key()));
        if (input->ExpectTag(42)) goto parse_public_key_signature;
        break;
      }
      
      // required bytes public_key_signature = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_public_key_signature:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_public_key_signature()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StoreContract::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    StoreContract::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required .maidsafe.StoreContract.InnerContract inner_contract = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->inner_contract(), output);
  }
  
  // required bytes signature = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(2, this->signature(), output);
  }
  
  // required bytes pmid = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(3, this->pmid(), output);
  }
  
  // required bytes public_key = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(4, this->public_key(), output);
  }
  
  // required bytes public_key_signature = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(5, this->public_key_signature(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StoreContract::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .maidsafe.StoreContract.InnerContract inner_contract = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->inner_contract(), target);
  }
  
  // required bytes signature = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(2, this->signature(), target);
  }
  
  // required bytes pmid = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(3, this->pmid(), target);
  }
  
  // required bytes public_key = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(4, this->public_key(), target);
  }
  
  // required bytes public_key_signature = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(5, this->public_key_signature(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StoreContract::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .maidsafe.StoreContract.InnerContract inner_contract = 1;
    if (has_inner_contract()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->inner_contract());
    }
    
    // required bytes signature = 2;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->signature());
    }
    
    // required bytes pmid = 3;
    if (has_pmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->pmid());
    }
    
    // required bytes public_key = 4;
    if (has_public_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->public_key());
    }
    
    // required bytes public_key_signature = 5;
    if (has_public_key_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->public_key_signature());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void StoreContract::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StoreContract* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StoreContract*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StoreContract::MergeFrom(const StoreContract& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_inner_contract()->::maidsafe::StoreContract_InnerContract::MergeFrom(from.inner_contract());
    }
    if (from._has_bit(1)) {
      set_signature(from.signature());
    }
    if (from._has_bit(2)) {
      set_pmid(from.pmid());
    }
    if (from._has_bit(3)) {
      set_public_key(from.public_key());
    }
    if (from._has_bit(4)) {
      set_public_key_signature(from.public_key_signature());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StoreContract::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoreContract::CopyFrom(const StoreContract& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoreContract::Swap(StoreContract* other) {
  if (other != this) {
    std::swap(inner_contract_, other->inner_contract_);
    std::swap(signature_, other->signature_);
    std::swap(pmid_, other->pmid_);
    std::swap(public_key_, other->public_key_);
    std::swap(public_key_signature_, other->public_key_signature_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool StoreContract::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  if (has_inner_contract()) {
    if (!this->inner_contract().IsInitialized()) return false;
  }
  return true;
}

const ::google::protobuf::Descriptor* StoreContract::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* StoreContract::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return StoreContract_reflection_;
}

// ===================================================================

const ::std::string StorePrepRequest::_default_chunkname_;
const ::std::string StorePrepRequest::_default_request_signature_;
#ifndef _MSC_VER
const int StorePrepRequest::kChunknameFieldNumber;
const int StorePrepRequest::kSignedSizeFieldNumber;
const int StorePrepRequest::kRequestSignatureFieldNumber;
#endif  // !_MSC_VER

StorePrepRequest::StorePrepRequest()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    chunkname_(const_cast< ::std::string*>(&_default_chunkname_)),
    signed_size_(NULL),
    request_signature_(const_cast< ::std::string*>(&_default_request_signature_)) {
  SharedCtor();
}

void StorePrepRequest::InitAsDefaultInstance() {  signed_size_ = const_cast< ::maidsafe::SignedSize*>(&::maidsafe::SignedSize::default_instance());
}

StorePrepRequest::StorePrepRequest(const StorePrepRequest& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    chunkname_(const_cast< ::std::string*>(&_default_chunkname_)),
    signed_size_(NULL),
    request_signature_(const_cast< ::std::string*>(&_default_request_signature_)) {
  SharedCtor();
  MergeFrom(from);
}

void StorePrepRequest::SharedCtor() {
  _cached_size_ = 0;
  chunkname_ = const_cast< ::std::string*>(&_default_chunkname_);
  signed_size_ = NULL;
  request_signature_ = const_cast< ::std::string*>(&_default_request_signature_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StorePrepRequest::~StorePrepRequest() {
  SharedDtor();
}

void StorePrepRequest::SharedDtor() {
  if (chunkname_ != &_default_chunkname_) {
    delete chunkname_;
  }
  if (request_signature_ != &_default_request_signature_) {
    delete request_signature_;
  }
  if (this != default_instance_) {
    delete signed_size_;
  }
}

const ::google::protobuf::Descriptor* StorePrepRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StorePrepRequest_descriptor_;
}

const StorePrepRequest& StorePrepRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_5fservice_5fmessages_2eproto();  return *default_instance_;
}

StorePrepRequest* StorePrepRequest::default_instance_ = NULL;

StorePrepRequest* StorePrepRequest::New() const {
  return new StorePrepRequest;
}

void StorePrepRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (chunkname_ != &_default_chunkname_) {
        chunkname_->clear();
      }
    }
    if (_has_bit(1)) {
      if (signed_size_ != NULL) signed_size_->::maidsafe::SignedSize::Clear();
    }
    if (_has_bit(2)) {
      if (request_signature_ != &_default_request_signature_) {
        request_signature_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StorePrepRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required bytes chunkname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_chunkname()));
        if (input->ExpectTag(18)) goto parse_signed_size;
        break;
      }
      
      // required .maidsafe.SignedSize signed_size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_signed_size:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_signed_size()));
        if (input->ExpectTag(26)) goto parse_request_signature;
        break;
      }
      
      // required bytes request_signature = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_request_signature:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_request_signature()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StorePrepRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    StorePrepRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required bytes chunkname = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(1, this->chunkname(), output);
  }
  
  // required .maidsafe.SignedSize signed_size = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->signed_size(), output);
  }
  
  // required bytes request_signature = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(3, this->request_signature(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StorePrepRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes chunkname = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(1, this->chunkname(), target);
  }
  
  // required .maidsafe.SignedSize signed_size = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->signed_size(), target);
  }
  
  // required bytes request_signature = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(3, this->request_signature(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StorePrepRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes chunkname = 1;
    if (has_chunkname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->chunkname());
    }
    
    // required .maidsafe.SignedSize signed_size = 2;
    if (has_signed_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->signed_size());
    }
    
    // required bytes request_signature = 3;
    if (has_request_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->request_signature());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void StorePrepRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StorePrepRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StorePrepRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StorePrepRequest::MergeFrom(const StorePrepRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_chunkname(from.chunkname());
    }
    if (from._has_bit(1)) {
      mutable_signed_size()->::maidsafe::SignedSize::MergeFrom(from.signed_size());
    }
    if (from._has_bit(2)) {
      set_request_signature(from.request_signature());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StorePrepRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StorePrepRequest::CopyFrom(const StorePrepRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StorePrepRequest::Swap(StorePrepRequest* other) {
  if (other != this) {
    std::swap(chunkname_, other->chunkname_);
    std::swap(signed_size_, other->signed_size_);
    std::swap(request_signature_, other->request_signature_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool StorePrepRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_signed_size()) {
    if (!this->signed_size().IsInitialized()) return false;
  }
  return true;
}

const ::google::protobuf::Descriptor* StorePrepRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* StorePrepRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return StorePrepRequest_reflection_;
}

// ===================================================================

const ::std::string StorePrepResponse::_default_response_signature_;
#ifndef _MSC_VER
const int StorePrepResponse::kStoreContractFieldNumber;
const int StorePrepResponse::kResponseSignatureFieldNumber;
#endif  // !_MSC_VER

StorePrepResponse::StorePrepResponse()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    store_contract_(NULL),
    response_signature_(const_cast< ::std::string*>(&_default_response_signature_)) {
  SharedCtor();
}

void StorePrepResponse::InitAsDefaultInstance() {  store_contract_ = const_cast< ::maidsafe::StoreContract*>(&::maidsafe::StoreContract::default_instance());
}

StorePrepResponse::StorePrepResponse(const StorePrepResponse& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    store_contract_(NULL),
    response_signature_(const_cast< ::std::string*>(&_default_response_signature_)) {
  SharedCtor();
  MergeFrom(from);
}

void StorePrepResponse::SharedCtor() {
  _cached_size_ = 0;
  store_contract_ = NULL;
  response_signature_ = const_cast< ::std::string*>(&_default_response_signature_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StorePrepResponse::~StorePrepResponse() {
  SharedDtor();
}

void StorePrepResponse::SharedDtor() {
  if (response_signature_ != &_default_response_signature_) {
    delete response_signature_;
  }
  if (this != default_instance_) {
    delete store_contract_;
  }
}

const ::google::protobuf::Descriptor* StorePrepResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StorePrepResponse_descriptor_;
}

const StorePrepResponse& StorePrepResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_5fservice_5fmessages_2eproto();  return *default_instance_;
}

StorePrepResponse* StorePrepResponse::default_instance_ = NULL;

StorePrepResponse* StorePrepResponse::New() const {
  return new StorePrepResponse;
}

void StorePrepResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (store_contract_ != NULL) store_contract_->::maidsafe::StoreContract::Clear();
    }
    if (_has_bit(1)) {
      if (response_signature_ != &_default_response_signature_) {
        response_signature_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StorePrepResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required .maidsafe.StoreContract store_contract = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_store_contract()));
        if (input->ExpectTag(18)) goto parse_response_signature;
        break;
      }
      
      // required bytes response_signature = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_response_signature:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_response_signature()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StorePrepResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    StorePrepResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required .maidsafe.StoreContract store_contract = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(1, this->store_contract(), output);
  }
  
  // required bytes response_signature = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(2, this->response_signature(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StorePrepResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .maidsafe.StoreContract store_contract = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(1, this->store_contract(), target);
  }
  
  // required bytes response_signature = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(2, this->response_signature(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StorePrepResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .maidsafe.StoreContract store_contract = 1;
    if (has_store_contract()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->store_contract());
    }
    
    // required bytes response_signature = 2;
    if (has_response_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->response_signature());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void StorePrepResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StorePrepResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StorePrepResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StorePrepResponse::MergeFrom(const StorePrepResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_store_contract()->::maidsafe::StoreContract::MergeFrom(from.store_contract());
    }
    if (from._has_bit(1)) {
      set_response_signature(from.response_signature());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StorePrepResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StorePrepResponse::CopyFrom(const StorePrepResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StorePrepResponse::Swap(StorePrepResponse* other) {
  if (other != this) {
    std::swap(store_contract_, other->store_contract_);
    std::swap(response_signature_, other->response_signature_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool StorePrepResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_store_contract()) {
    if (!this->store_contract().IsInitialized()) return false;
  }
  return true;
}

const ::google::protobuf::Descriptor* StorePrepResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* StorePrepResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return StorePrepResponse_reflection_;
}

// ===================================================================

const ::std::string StoreChunkRequest::_default_chunkname_;
const ::std::string StoreChunkRequest::_default_data_;
const ::std::string StoreChunkRequest::_default_pmid_;
const ::std::string StoreChunkRequest::_default_public_key_;
const ::std::string StoreChunkRequest::_default_public_key_signature_;
const ::std::string StoreChunkRequest::_default_request_signature_;
#ifndef _MSC_VER
const int StoreChunkRequest::kChunknameFieldNumber;
const int StoreChunkRequest::kDataFieldNumber;
const int StoreChunkRequest::kPmidFieldNumber;
const int StoreChunkRequest::kPublicKeyFieldNumber;
const int StoreChunkRequest::kPublicKeySignatureFieldNumber;
const int StoreChunkRequest::kRequestSignatureFieldNumber;
const int StoreChunkRequest::kDataTypeFieldNumber;
const int StoreChunkRequest::kOffsetFieldNumber;
const int StoreChunkRequest::kChunkletSizeFieldNumber;
#endif  // !_MSC_VER

StoreChunkRequest::StoreChunkRequest()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    chunkname_(const_cast< ::std::string*>(&_default_chunkname_)),
    data_(const_cast< ::std::string*>(&_default_data_)),
    pmid_(const_cast< ::std::string*>(&_default_pmid_)),
    public_key_(const_cast< ::std::string*>(&_default_public_key_)),
    public_key_signature_(const_cast< ::std::string*>(&_default_public_key_signature_)),
    request_signature_(const_cast< ::std::string*>(&_default_request_signature_)),
    data_type_(0),
    offset_(0u),
    chunklet_size_(0u) {
  SharedCtor();
}

void StoreChunkRequest::InitAsDefaultInstance() {}

StoreChunkRequest::StoreChunkRequest(const StoreChunkRequest& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    chunkname_(const_cast< ::std::string*>(&_default_chunkname_)),
    data_(const_cast< ::std::string*>(&_default_data_)),
    pmid_(const_cast< ::std::string*>(&_default_pmid_)),
    public_key_(const_cast< ::std::string*>(&_default_public_key_)),
    public_key_signature_(const_cast< ::std::string*>(&_default_public_key_signature_)),
    request_signature_(const_cast< ::std::string*>(&_default_request_signature_)),
    data_type_(0),
    offset_(0u),
    chunklet_size_(0u) {
  SharedCtor();
  MergeFrom(from);
}

void StoreChunkRequest::SharedCtor() {
  _cached_size_ = 0;
  chunkname_ = const_cast< ::std::string*>(&_default_chunkname_);
  data_ = const_cast< ::std::string*>(&_default_data_);
  pmid_ = const_cast< ::std::string*>(&_default_pmid_);
  public_key_ = const_cast< ::std::string*>(&_default_public_key_);
  public_key_signature_ = const_cast< ::std::string*>(&_default_public_key_signature_);
  request_signature_ = const_cast< ::std::string*>(&_default_request_signature_);
  data_type_ = 0;
  offset_ = 0u;
  chunklet_size_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StoreChunkRequest::~StoreChunkRequest() {
  SharedDtor();
}

void StoreChunkRequest::SharedDtor() {
  if (chunkname_ != &_default_chunkname_) {
    delete chunkname_;
  }
  if (data_ != &_default_data_) {
    delete data_;
  }
  if (pmid_ != &_default_pmid_) {
    delete pmid_;
  }
  if (public_key_ != &_default_public_key_) {
    delete public_key_;
  }
  if (public_key_signature_ != &_default_public_key_signature_) {
    delete public_key_signature_;
  }
  if (request_signature_ != &_default_request_signature_) {
    delete request_signature_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* StoreChunkRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StoreChunkRequest_descriptor_;
}

const StoreChunkRequest& StoreChunkRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_5fservice_5fmessages_2eproto();  return *default_instance_;
}

StoreChunkRequest* StoreChunkRequest::default_instance_ = NULL;

StoreChunkRequest* StoreChunkRequest::New() const {
  return new StoreChunkRequest;
}

void StoreChunkRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (chunkname_ != &_default_chunkname_) {
        chunkname_->clear();
      }
    }
    if (_has_bit(1)) {
      if (data_ != &_default_data_) {
        data_->clear();
      }
    }
    if (_has_bit(2)) {
      if (pmid_ != &_default_pmid_) {
        pmid_->clear();
      }
    }
    if (_has_bit(3)) {
      if (public_key_ != &_default_public_key_) {
        public_key_->clear();
      }
    }
    if (_has_bit(4)) {
      if (public_key_signature_ != &_default_public_key_signature_) {
        public_key_signature_->clear();
      }
    }
    if (_has_bit(5)) {
      if (request_signature_ != &_default_request_signature_) {
        request_signature_->clear();
      }
    }
    data_type_ = 0;
    offset_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    chunklet_size_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StoreChunkRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required bytes chunkname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_chunkname()));
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }
      
      // required bytes data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_data:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_data()));
        if (input->ExpectTag(26)) goto parse_pmid;
        break;
      }
      
      // required bytes pmid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_pmid:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_pmid()));
        if (input->ExpectTag(34)) goto parse_public_key;
        break;
      }
      
      // required bytes public_key = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_public_key:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_public_key()));
        if (input->ExpectTag(42)) goto parse_public_key_signature;
        break;
      }
      
      // required bytes public_key_signature = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_public_key_signature:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_public_key_signature()));
        if (input->ExpectTag(50)) goto parse_request_signature;
        break;
      }
      
      // required bytes request_signature = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_request_signature:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_request_signature()));
        if (input->ExpectTag(56)) goto parse_data_type;
        break;
      }
      
      // required int32 data_type = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_data_type:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &data_type_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_offset;
        break;
      }
      
      // optional uint32 offset = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_offset:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &offset_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_chunklet_size;
        break;
      }
      
      // optional uint32 chunklet_size = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_chunklet_size:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &chunklet_size_));
        _set_bit(8);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StoreChunkRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    StoreChunkRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required bytes chunkname = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(1, this->chunkname(), output);
  }
  
  // required bytes data = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(2, this->data(), output);
  }
  
  // required bytes pmid = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(3, this->pmid(), output);
  }
  
  // required bytes public_key = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(4, this->public_key(), output);
  }
  
  // required bytes public_key_signature = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(5, this->public_key_signature(), output);
  }
  
  // required bytes request_signature = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(6, this->request_signature(), output);
  }
  
  // required int32 data_type = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(7, this->data_type(), output);
  }
  
  // optional uint32 offset = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->offset(), output);
  }
  
  // optional uint32 chunklet_size = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->chunklet_size(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StoreChunkRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes chunkname = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(1, this->chunkname(), target);
  }
  
  // required bytes data = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(2, this->data(), target);
  }
  
  // required bytes pmid = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(3, this->pmid(), target);
  }
  
  // required bytes public_key = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(4, this->public_key(), target);
  }
  
  // required bytes public_key_signature = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(5, this->public_key_signature(), target);
  }
  
  // required bytes request_signature = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(6, this->request_signature(), target);
  }
  
  // required int32 data_type = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(7, this->data_type(), target);
  }
  
  // optional uint32 offset = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->offset(), target);
  }
  
  // optional uint32 chunklet_size = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->chunklet_size(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StoreChunkRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes chunkname = 1;
    if (has_chunkname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->chunkname());
    }
    
    // required bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->data());
    }
    
    // required bytes pmid = 3;
    if (has_pmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->pmid());
    }
    
    // required bytes public_key = 4;
    if (has_public_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->public_key());
    }
    
    // required bytes public_key_signature = 5;
    if (has_public_key_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->public_key_signature());
    }
    
    // required bytes request_signature = 6;
    if (has_request_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->request_signature());
    }
    
    // required int32 data_type = 7;
    if (has_data_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->data_type());
    }
    
    // optional uint32 offset = 8;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->offset());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 chunklet_size = 9;
    if (has_chunklet_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->chunklet_size());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void StoreChunkRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StoreChunkRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StoreChunkRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StoreChunkRequest::MergeFrom(const StoreChunkRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_chunkname(from.chunkname());
    }
    if (from._has_bit(1)) {
      set_data(from.data());
    }
    if (from._has_bit(2)) {
      set_pmid(from.pmid());
    }
    if (from._has_bit(3)) {
      set_public_key(from.public_key());
    }
    if (from._has_bit(4)) {
      set_public_key_signature(from.public_key_signature());
    }
    if (from._has_bit(5)) {
      set_request_signature(from.request_signature());
    }
    if (from._has_bit(6)) {
      set_data_type(from.data_type());
    }
    if (from._has_bit(7)) {
      set_offset(from.offset());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_chunklet_size(from.chunklet_size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StoreChunkRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoreChunkRequest::CopyFrom(const StoreChunkRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoreChunkRequest::Swap(StoreChunkRequest* other) {
  if (other != this) {
    std::swap(chunkname_, other->chunkname_);
    std::swap(data_, other->data_);
    std::swap(pmid_, other->pmid_);
    std::swap(public_key_, other->public_key_);
    std::swap(public_key_signature_, other->public_key_signature_);
    std::swap(request_signature_, other->request_signature_);
    std::swap(data_type_, other->data_type_);
    std::swap(offset_, other->offset_);
    std::swap(chunklet_size_, other->chunklet_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool StoreChunkRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* StoreChunkRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* StoreChunkRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return StoreChunkRequest_reflection_;
}

// ===================================================================

const ::std::string StoreChunkResponse::_default_pmid_;
#ifndef _MSC_VER
const int StoreChunkResponse::kResultFieldNumber;
const int StoreChunkResponse::kPmidFieldNumber;
#endif  // !_MSC_VER

StoreChunkResponse::StoreChunkResponse()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    result_(0u),
    pmid_(const_cast< ::std::string*>(&_default_pmid_)) {
  SharedCtor();
}

void StoreChunkResponse::InitAsDefaultInstance() {}

StoreChunkResponse::StoreChunkResponse(const StoreChunkResponse& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    result_(0u),
    pmid_(const_cast< ::std::string*>(&_default_pmid_)) {
  SharedCtor();
  MergeFrom(from);
}

void StoreChunkResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  pmid_ = const_cast< ::std::string*>(&_default_pmid_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StoreChunkResponse::~StoreChunkResponse() {
  SharedDtor();
}

void StoreChunkResponse::SharedDtor() {
  if (pmid_ != &_default_pmid_) {
    delete pmid_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* StoreChunkResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StoreChunkResponse_descriptor_;
}

const StoreChunkResponse& StoreChunkResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_5fservice_5fmessages_2eproto();  return *default_instance_;
}

StoreChunkResponse* StoreChunkResponse::default_instance_ = NULL;

StoreChunkResponse* StoreChunkResponse::New() const {
  return new StoreChunkResponse;
}

void StoreChunkResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    if (_has_bit(1)) {
      if (pmid_ != &_default_pmid_) {
        pmid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StoreChunkResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_pmid;
        break;
      }
      
      // optional bytes pmid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_pmid:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_pmid()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StoreChunkResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    StoreChunkResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->result(), output);
  }
  
  // optional bytes pmid = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(2, this->pmid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StoreChunkResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->result(), target);
  }
  
  // optional bytes pmid = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(2, this->pmid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StoreChunkResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
    // optional bytes pmid = 2;
    if (has_pmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->pmid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void StoreChunkResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StoreChunkResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StoreChunkResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StoreChunkResponse::MergeFrom(const StoreChunkResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_result(from.result());
    }
    if (from._has_bit(1)) {
      set_pmid(from.pmid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StoreChunkResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoreChunkResponse::CopyFrom(const StoreChunkResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoreChunkResponse::Swap(StoreChunkResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(pmid_, other->pmid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool StoreChunkResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* StoreChunkResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* StoreChunkResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return StoreChunkResponse_reflection_;
}

// ===================================================================

const ::std::string StorePacketRequest::_default_packetname_;
const ::std::string StorePacketRequest::_default_key_id_;
const ::std::string StorePacketRequest::_default_public_key_;
const ::std::string StorePacketRequest::_default_public_key_signature_;
const ::std::string StorePacketRequest::_default_request_signature_;
#ifndef _MSC_VER
const int StorePacketRequest::kPacketnameFieldNumber;
const int StorePacketRequest::kSignedDataFieldNumber;
const int StorePacketRequest::kKeyIdFieldNumber;
const int StorePacketRequest::kPublicKeyFieldNumber;
const int StorePacketRequest::kPublicKeySignatureFieldNumber;
const int StorePacketRequest::kRequestSignatureFieldNumber;
const int StorePacketRequest::kDataTypeFieldNumber;
const int StorePacketRequest::kAppendFieldNumber;
#endif  // !_MSC_VER

StorePacketRequest::StorePacketRequest()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    packetname_(const_cast< ::std::string*>(&_default_packetname_)),
    signed_data_(),
    key_id_(const_cast< ::std::string*>(&_default_key_id_)),
    public_key_(const_cast< ::std::string*>(&_default_public_key_)),
    public_key_signature_(const_cast< ::std::string*>(&_default_public_key_signature_)),
    request_signature_(const_cast< ::std::string*>(&_default_request_signature_)),
    data_type_(0),
    append_(false) {
  SharedCtor();
}

void StorePacketRequest::InitAsDefaultInstance() {}

StorePacketRequest::StorePacketRequest(const StorePacketRequest& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    packetname_(const_cast< ::std::string*>(&_default_packetname_)),
    signed_data_(),
    key_id_(const_cast< ::std::string*>(&_default_key_id_)),
    public_key_(const_cast< ::std::string*>(&_default_public_key_)),
    public_key_signature_(const_cast< ::std::string*>(&_default_public_key_signature_)),
    request_signature_(const_cast< ::std::string*>(&_default_request_signature_)),
    data_type_(0),
    append_(false) {
  SharedCtor();
  MergeFrom(from);
}

void StorePacketRequest::SharedCtor() {
  _cached_size_ = 0;
  packetname_ = const_cast< ::std::string*>(&_default_packetname_);
  key_id_ = const_cast< ::std::string*>(&_default_key_id_);
  public_key_ = const_cast< ::std::string*>(&_default_public_key_);
  public_key_signature_ = const_cast< ::std::string*>(&_default_public_key_signature_);
  request_signature_ = const_cast< ::std::string*>(&_default_request_signature_);
  data_type_ = 0;
  append_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StorePacketRequest::~StorePacketRequest() {
  SharedDtor();
}

void StorePacketRequest::SharedDtor() {
  if (packetname_ != &_default_packetname_) {
    delete packetname_;
  }
  if (key_id_ != &_default_key_id_) {
    delete key_id_;
  }
  if (public_key_ != &_default_public_key_) {
    delete public_key_;
  }
  if (public_key_signature_ != &_default_public_key_signature_) {
    delete public_key_signature_;
  }
  if (request_signature_ != &_default_request_signature_) {
    delete request_signature_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* StorePacketRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StorePacketRequest_descriptor_;
}

const StorePacketRequest& StorePacketRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_5fservice_5fmessages_2eproto();  return *default_instance_;
}

StorePacketRequest* StorePacketRequest::default_instance_ = NULL;

StorePacketRequest* StorePacketRequest::New() const {
  return new StorePacketRequest;
}

void StorePacketRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (packetname_ != &_default_packetname_) {
        packetname_->clear();
      }
    }
    if (_has_bit(2)) {
      if (key_id_ != &_default_key_id_) {
        key_id_->clear();
      }
    }
    if (_has_bit(3)) {
      if (public_key_ != &_default_public_key_) {
        public_key_->clear();
      }
    }
    if (_has_bit(4)) {
      if (public_key_signature_ != &_default_public_key_signature_) {
        public_key_signature_->clear();
      }
    }
    if (_has_bit(5)) {
      if (request_signature_ != &_default_request_signature_) {
        request_signature_->clear();
      }
    }
    data_type_ = 0;
    append_ = false;
  }
  signed_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StorePacketRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required bytes packetname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_packetname()));
        if (input->ExpectTag(18)) goto parse_signed_data;
        break;
      }
      
      // repeated .maidsafe.GenericPacket signed_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_signed_data:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_signed_data()));
        if (input->ExpectTag(18)) goto parse_signed_data;
        if (input->ExpectTag(26)) goto parse_key_id;
        break;
      }
      
      // optional bytes key_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_key_id:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_key_id()));
        if (input->ExpectTag(34)) goto parse_public_key;
        break;
      }
      
      // optional bytes public_key = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_public_key:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_public_key()));
        if (input->ExpectTag(42)) goto parse_public_key_signature;
        break;
      }
      
      // optional bytes public_key_signature = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_public_key_signature:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_public_key_signature()));
        if (input->ExpectTag(50)) goto parse_request_signature;
        break;
      }
      
      // optional bytes request_signature = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_request_signature:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_request_signature()));
        if (input->ExpectTag(56)) goto parse_data_type;
        break;
      }
      
      // required int32 data_type = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_data_type:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &data_type_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_append;
        break;
      }
      
      // required bool append = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_append:
        DO_(::google::protobuf::internal::WireFormat::ReadBool(
              input, &append_));
        _set_bit(7);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StorePacketRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    StorePacketRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required bytes packetname = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(1, this->packetname(), output);
  }
  
  // repeated .maidsafe.GenericPacket signed_data = 2;
  for (int i = 0; i < this->signed_data_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->signed_data(i), output);
  }
  
  // optional bytes key_id = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(3, this->key_id(), output);
  }
  
  // optional bytes public_key = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(4, this->public_key(), output);
  }
  
  // optional bytes public_key_signature = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(5, this->public_key_signature(), output);
  }
  
  // optional bytes request_signature = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(6, this->request_signature(), output);
  }
  
  // required int32 data_type = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(7, this->data_type(), output);
  }
  
  // required bool append = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteBool(8, this->append(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StorePacketRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes packetname = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(1, this->packetname(), target);
  }
  
  // repeated .maidsafe.GenericPacket signed_data = 2;
  for (int i = 0; i < this->signed_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->signed_data(i), target);
  }
  
  // optional bytes key_id = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(3, this->key_id(), target);
  }
  
  // optional bytes public_key = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(4, this->public_key(), target);
  }
  
  // optional bytes public_key_signature = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(5, this->public_key_signature(), target);
  }
  
  // optional bytes request_signature = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(6, this->request_signature(), target);
  }
  
  // required int32 data_type = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(7, this->data_type(), target);
  }
  
  // required bool append = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteBoolToArray(8, this->append(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StorePacketRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes packetname = 1;
    if (has_packetname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->packetname());
    }
    
    // optional bytes key_id = 3;
    if (has_key_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->key_id());
    }
    
    // optional bytes public_key = 4;
    if (has_public_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->public_key());
    }
    
    // optional bytes public_key_signature = 5;
    if (has_public_key_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->public_key_signature());
    }
    
    // optional bytes request_signature = 6;
    if (has_request_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->request_signature());
    }
    
    // required int32 data_type = 7;
    if (has_data_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->data_type());
    }
    
    // required bool append = 8;
    if (has_append()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .maidsafe.GenericPacket signed_data = 2;
  total_size += 1 * this->signed_data_size();
  for (int i = 0; i < this->signed_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->signed_data(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void StorePacketRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StorePacketRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StorePacketRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StorePacketRequest::MergeFrom(const StorePacketRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  signed_data_.MergeFrom(from.signed_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_packetname(from.packetname());
    }
    if (from._has_bit(2)) {
      set_key_id(from.key_id());
    }
    if (from._has_bit(3)) {
      set_public_key(from.public_key());
    }
    if (from._has_bit(4)) {
      set_public_key_signature(from.public_key_signature());
    }
    if (from._has_bit(5)) {
      set_request_signature(from.request_signature());
    }
    if (from._has_bit(6)) {
      set_data_type(from.data_type());
    }
    if (from._has_bit(7)) {
      set_append(from.append());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StorePacketRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StorePacketRequest::CopyFrom(const StorePacketRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StorePacketRequest::Swap(StorePacketRequest* other) {
  if (other != this) {
    std::swap(packetname_, other->packetname_);
    signed_data_.Swap(&other->signed_data_);
    std::swap(key_id_, other->key_id_);
    std::swap(public_key_, other->public_key_);
    std::swap(public_key_signature_, other->public_key_signature_);
    std::swap(request_signature_, other->request_signature_);
    std::swap(data_type_, other->data_type_);
    std::swap(append_, other->append_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool StorePacketRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000c1) != 0x000000c1) return false;
  
  for (int i = 0; i < signed_data_size(); i++) {
    if (!this->signed_data(i).IsInitialized()) return false;
  }
  return true;
}

const ::google::protobuf::Descriptor* StorePacketRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* StorePacketRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return StorePacketRequest_reflection_;
}

// ===================================================================

const ::std::string StorePacketResponse::_default_pmid_;
const ::std::string StorePacketResponse::_default_public_key_;
const ::std::string StorePacketResponse::_default_public_key_signature_;
const ::std::string StorePacketResponse::_default_response_signature_;
const ::std::string StorePacketResponse::_default_checksum_;
#ifndef _MSC_VER
const int StorePacketResponse::kResultFieldNumber;
const int StorePacketResponse::kPmidFieldNumber;
const int StorePacketResponse::kPublicKeyFieldNumber;
const int StorePacketResponse::kPublicKeySignatureFieldNumber;
const int StorePacketResponse::kResponseSignatureFieldNumber;
const int StorePacketResponse::kChecksumFieldNumber;
#endif  // !_MSC_VER

StorePacketResponse::StorePacketResponse()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    result_(0u),
    pmid_(const_cast< ::std::string*>(&_default_pmid_)),
    public_key_(const_cast< ::std::string*>(&_default_public_key_)),
    public_key_signature_(const_cast< ::std::string*>(&_default_public_key_signature_)),
    response_signature_(const_cast< ::std::string*>(&_default_response_signature_)),
    checksum_(const_cast< ::std::string*>(&_default_checksum_)) {
  SharedCtor();
}

void StorePacketResponse::InitAsDefaultInstance() {}

StorePacketResponse::StorePacketResponse(const StorePacketResponse& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    result_(0u),
    pmid_(const_cast< ::std::string*>(&_default_pmid_)),
    public_key_(const_cast< ::std::string*>(&_default_public_key_)),
    public_key_signature_(const_cast< ::std::string*>(&_default_public_key_signature_)),
    response_signature_(const_cast< ::std::string*>(&_default_response_signature_)),
    checksum_(const_cast< ::std::string*>(&_default_checksum_)) {
  SharedCtor();
  MergeFrom(from);
}

void StorePacketResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  pmid_ = const_cast< ::std::string*>(&_default_pmid_);
  public_key_ = const_cast< ::std::string*>(&_default_public_key_);
  public_key_signature_ = const_cast< ::std::string*>(&_default_public_key_signature_);
  response_signature_ = const_cast< ::std::string*>(&_default_response_signature_);
  checksum_ = const_cast< ::std::string*>(&_default_checksum_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StorePacketResponse::~StorePacketResponse() {
  SharedDtor();
}

void StorePacketResponse::SharedDtor() {
  if (pmid_ != &_default_pmid_) {
    delete pmid_;
  }
  if (public_key_ != &_default_public_key_) {
    delete public_key_;
  }
  if (public_key_signature_ != &_default_public_key_signature_) {
    delete public_key_signature_;
  }
  if (response_signature_ != &_default_response_signature_) {
    delete response_signature_;
  }
  if (checksum_ != &_default_checksum_) {
    delete checksum_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* StorePacketResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StorePacketResponse_descriptor_;
}

const StorePacketResponse& StorePacketResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_5fservice_5fmessages_2eproto();  return *default_instance_;
}

StorePacketResponse* StorePacketResponse::default_instance_ = NULL;

StorePacketResponse* StorePacketResponse::New() const {
  return new StorePacketResponse;
}

void StorePacketResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    if (_has_bit(1)) {
      if (pmid_ != &_default_pmid_) {
        pmid_->clear();
      }
    }
    if (_has_bit(2)) {
      if (public_key_ != &_default_public_key_) {
        public_key_->clear();
      }
    }
    if (_has_bit(3)) {
      if (public_key_signature_ != &_default_public_key_signature_) {
        public_key_signature_->clear();
      }
    }
    if (_has_bit(4)) {
      if (response_signature_ != &_default_response_signature_) {
        response_signature_->clear();
      }
    }
    if (_has_bit(5)) {
      if (checksum_ != &_default_checksum_) {
        checksum_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StorePacketResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_pmid;
        break;
      }
      
      // optional bytes pmid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_pmid:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_pmid()));
        if (input->ExpectTag(26)) goto parse_public_key;
        break;
      }
      
      // optional bytes public_key = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_public_key:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_public_key()));
        if (input->ExpectTag(34)) goto parse_public_key_signature;
        break;
      }
      
      // optional bytes public_key_signature = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_public_key_signature:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_public_key_signature()));
        if (input->ExpectTag(42)) goto parse_response_signature;
        break;
      }
      
      // optional bytes response_signature = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_response_signature:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_response_signature()));
        if (input->ExpectTag(50)) goto parse_checksum;
        break;
      }
      
      // optional bytes checksum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_checksum:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_checksum()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StorePacketResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    StorePacketResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->result(), output);
  }
  
  // optional bytes pmid = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(2, this->pmid(), output);
  }
  
  // optional bytes public_key = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(3, this->public_key(), output);
  }
  
  // optional bytes public_key_signature = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(4, this->public_key_signature(), output);
  }
  
  // optional bytes response_signature = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(5, this->response_signature(), output);
  }
  
  // optional bytes checksum = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(6, this->checksum(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StorePacketResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->result(), target);
  }
  
  // optional bytes pmid = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(2, this->pmid(), target);
  }
  
  // optional bytes public_key = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(3, this->public_key(), target);
  }
  
  // optional bytes public_key_signature = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(4, this->public_key_signature(), target);
  }
  
  // optional bytes response_signature = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(5, this->response_signature(), target);
  }
  
  // optional bytes checksum = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(6, this->checksum(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StorePacketResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
    // optional bytes pmid = 2;
    if (has_pmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->pmid());
    }
    
    // optional bytes public_key = 3;
    if (has_public_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->public_key());
    }
    
    // optional bytes public_key_signature = 4;
    if (has_public_key_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->public_key_signature());
    }
    
    // optional bytes response_signature = 5;
    if (has_response_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->response_signature());
    }
    
    // optional bytes checksum = 6;
    if (has_checksum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->checksum());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void StorePacketResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StorePacketResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StorePacketResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StorePacketResponse::MergeFrom(const StorePacketResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_result(from.result());
    }
    if (from._has_bit(1)) {
      set_pmid(from.pmid());
    }
    if (from._has_bit(2)) {
      set_public_key(from.public_key());
    }
    if (from._has_bit(3)) {
      set_public_key_signature(from.public_key_signature());
    }
    if (from._has_bit(4)) {
      set_response_signature(from.response_signature());
    }
    if (from._has_bit(5)) {
      set_checksum(from.checksum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StorePacketResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StorePacketResponse::CopyFrom(const StorePacketResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StorePacketResponse::Swap(StorePacketResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(pmid_, other->pmid_);
    std::swap(public_key_, other->public_key_);
    std::swap(public_key_signature_, other->public_key_signature_);
    std::swap(response_signature_, other->response_signature_);
    std::swap(checksum_, other->checksum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool StorePacketResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* StorePacketResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* StorePacketResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return StorePacketResponse_reflection_;
}

// ===================================================================

const ::std::string AddToWatchListRequest::_default_watch_list_name_;
const ::std::string AddToWatchListRequest::_default_request_signature_;
#ifndef _MSC_VER
const int AddToWatchListRequest::kWatchListNameFieldNumber;
const int AddToWatchListRequest::kSignedSizeFieldNumber;
const int AddToWatchListRequest::kStoreContractFieldNumber;
const int AddToWatchListRequest::kRequestSignatureFieldNumber;
#endif  // !_MSC_VER

AddToWatchListRequest::AddToWatchListRequest()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    watch_list_name_(const_cast< ::std::string*>(&_default_watch_list_name_)),
    signed_size_(NULL),
    store_contract_(NULL),
    request_signature_(const_cast< ::std::string*>(&_default_request_signature_)) {
  SharedCtor();
}

void AddToWatchListRequest::InitAsDefaultInstance() {  signed_size_ = const_cast< ::maidsafe::SignedSize*>(&::maidsafe::SignedSize::default_instance());
  store_contract_ = const_cast< ::maidsafe::StoreContract*>(&::maidsafe::StoreContract::default_instance());
}

AddToWatchListRequest::AddToWatchListRequest(const AddToWatchListRequest& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    watch_list_name_(const_cast< ::std::string*>(&_default_watch_list_name_)),
    signed_size_(NULL),
    store_contract_(NULL),
    request_signature_(const_cast< ::std::string*>(&_default_request_signature_)) {
  SharedCtor();
  MergeFrom(from);
}

void AddToWatchListRequest::SharedCtor() {
  _cached_size_ = 0;
  watch_list_name_ = const_cast< ::std::string*>(&_default_watch_list_name_);
  signed_size_ = NULL;
  store_contract_ = NULL;
  request_signature_ = const_cast< ::std::string*>(&_default_request_signature_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddToWatchListRequest::~AddToWatchListRequest() {
  SharedDtor();
}

void AddToWatchListRequest::SharedDtor() {
  if (watch_list_name_ != &_default_watch_list_name_) {
    delete watch_list_name_;
  }
  if (request_signature_ != &_default_request_signature_) {
    delete request_signature_;
  }
  if (this != default_instance_) {
    delete signed_size_;
    delete store_contract_;
  }
}

const ::google::protobuf::Descriptor* AddToWatchListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddToWatchListRequest_descriptor_;
}

const AddToWatchListRequest& AddToWatchListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_5fservice_5fmessages_2eproto();  return *default_instance_;
}

AddToWatchListRequest* AddToWatchListRequest::default_instance_ = NULL;

AddToWatchListRequest* AddToWatchListRequest::New() const {
  return new AddToWatchListRequest;
}

void AddToWatchListRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (watch_list_name_ != &_default_watch_list_name_) {
        watch_list_name_->clear();
      }
    }
    if (_has_bit(1)) {
      if (signed_size_ != NULL) signed_size_->::maidsafe::SignedSize::Clear();
    }
    if (_has_bit(2)) {
      if (store_contract_ != NULL) store_contract_->::maidsafe::StoreContract::Clear();
    }
    if (_has_bit(3)) {
      if (request_signature_ != &_default_request_signature_) {
        request_signature_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddToWatchListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required bytes watch_list_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_watch_list_name()));
        if (input->ExpectTag(18)) goto parse_signed_size;
        break;
      }
      
      // optional .maidsafe.SignedSize signed_size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_signed_size:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_signed_size()));
        if (input->ExpectTag(26)) goto parse_store_contract;
        break;
      }
      
      // optional .maidsafe.StoreContract store_contract = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_store_contract:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_store_contract()));
        if (input->ExpectTag(34)) goto parse_request_signature;
        break;
      }
      
      // required bytes request_signature = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_request_signature:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_request_signature()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddToWatchListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    AddToWatchListRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required bytes watch_list_name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(1, this->watch_list_name(), output);
  }
  
  // optional .maidsafe.SignedSize signed_size = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->signed_size(), output);
  }
  
  // optional .maidsafe.StoreContract store_contract = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(3, this->store_contract(), output);
  }
  
  // required bytes request_signature = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(4, this->request_signature(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddToWatchListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes watch_list_name = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(1, this->watch_list_name(), target);
  }
  
  // optional .maidsafe.SignedSize signed_size = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->signed_size(), target);
  }
  
  // optional .maidsafe.StoreContract store_contract = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(3, this->store_contract(), target);
  }
  
  // required bytes request_signature = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(4, this->request_signature(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddToWatchListRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes watch_list_name = 1;
    if (has_watch_list_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->watch_list_name());
    }
    
    // optional .maidsafe.SignedSize signed_size = 2;
    if (has_signed_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->signed_size());
    }
    
    // optional .maidsafe.StoreContract store_contract = 3;
    if (has_store_contract()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->store_contract());
    }
    
    // required bytes request_signature = 4;
    if (has_request_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->request_signature());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void AddToWatchListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddToWatchListRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddToWatchListRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddToWatchListRequest::MergeFrom(const AddToWatchListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_watch_list_name(from.watch_list_name());
    }
    if (from._has_bit(1)) {
      mutable_signed_size()->::maidsafe::SignedSize::MergeFrom(from.signed_size());
    }
    if (from._has_bit(2)) {
      mutable_store_contract()->::maidsafe::StoreContract::MergeFrom(from.store_contract());
    }
    if (from._has_bit(3)) {
      set_request_signature(from.request_signature());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddToWatchListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddToWatchListRequest::CopyFrom(const AddToWatchListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddToWatchListRequest::Swap(AddToWatchListRequest* other) {
  if (other != this) {
    std::swap(watch_list_name_, other->watch_list_name_);
    std::swap(signed_size_, other->signed_size_);
    std::swap(store_contract_, other->store_contract_);
    std::swap(request_signature_, other->request_signature_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool AddToWatchListRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000009) != 0x00000009) return false;
  
  if (has_signed_size()) {
    if (!this->signed_size().IsInitialized()) return false;
  }
  if (has_store_contract()) {
    if (!this->store_contract().IsInitialized()) return false;
  }
  return true;
}

const ::google::protobuf::Descriptor* AddToWatchListRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* AddToWatchListRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return AddToWatchListRequest_reflection_;
}

// ===================================================================

const ::std::string AddToWatchListResponse::_default_pmid_;
#ifndef _MSC_VER
const int AddToWatchListResponse::kResultFieldNumber;
const int AddToWatchListResponse::kPmidFieldNumber;
#endif  // !_MSC_VER

AddToWatchListResponse::AddToWatchListResponse()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    result_(0u),
    pmid_(const_cast< ::std::string*>(&_default_pmid_)) {
  SharedCtor();
}

void AddToWatchListResponse::InitAsDefaultInstance() {}

AddToWatchListResponse::AddToWatchListResponse(const AddToWatchListResponse& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    result_(0u),
    pmid_(const_cast< ::std::string*>(&_default_pmid_)) {
  SharedCtor();
  MergeFrom(from);
}

void AddToWatchListResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  pmid_ = const_cast< ::std::string*>(&_default_pmid_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddToWatchListResponse::~AddToWatchListResponse() {
  SharedDtor();
}

void AddToWatchListResponse::SharedDtor() {
  if (pmid_ != &_default_pmid_) {
    delete pmid_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* AddToWatchListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddToWatchListResponse_descriptor_;
}

const AddToWatchListResponse& AddToWatchListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_5fservice_5fmessages_2eproto();  return *default_instance_;
}

AddToWatchListResponse* AddToWatchListResponse::default_instance_ = NULL;

AddToWatchListResponse* AddToWatchListResponse::New() const {
  return new AddToWatchListResponse;
}

void AddToWatchListResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    if (_has_bit(1)) {
      if (pmid_ != &_default_pmid_) {
        pmid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddToWatchListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_pmid;
        break;
      }
      
      // optional bytes pmid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_pmid:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_pmid()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddToWatchListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    AddToWatchListResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->result(), output);
  }
  
  // optional bytes pmid = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(2, this->pmid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddToWatchListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->result(), target);
  }
  
  // optional bytes pmid = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(2, this->pmid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddToWatchListResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
    // optional bytes pmid = 2;
    if (has_pmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->pmid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void AddToWatchListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddToWatchListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddToWatchListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddToWatchListResponse::MergeFrom(const AddToWatchListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_result(from.result());
    }
    if (from._has_bit(1)) {
      set_pmid(from.pmid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddToWatchListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddToWatchListResponse::CopyFrom(const AddToWatchListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddToWatchListResponse::Swap(AddToWatchListResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(pmid_, other->pmid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool AddToWatchListResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* AddToWatchListResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* AddToWatchListResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return AddToWatchListResponse_reflection_;
}

// ===================================================================

const ::std::string RemoveFromWatchListRequest::_default_watchlist_name_;
const ::std::string RemoveFromWatchListRequest::_default_request_signature_;
#ifndef _MSC_VER
const int RemoveFromWatchListRequest::kWatchlistNameFieldNumber;
const int RemoveFromWatchListRequest::kSignedSizeFieldNumber;
const int RemoveFromWatchListRequest::kRequestSignatureFieldNumber;
#endif  // !_MSC_VER

RemoveFromWatchListRequest::RemoveFromWatchListRequest()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    watchlist_name_(const_cast< ::std::string*>(&_default_watchlist_name_)),
    signed_size_(NULL),
    request_signature_(const_cast< ::std::string*>(&_default_request_signature_)) {
  SharedCtor();
}

void RemoveFromWatchListRequest::InitAsDefaultInstance() {  signed_size_ = const_cast< ::maidsafe::SignedSize*>(&::maidsafe::SignedSize::default_instance());
}

RemoveFromWatchListRequest::RemoveFromWatchListRequest(const RemoveFromWatchListRequest& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    watchlist_name_(const_cast< ::std::string*>(&_default_watchlist_name_)),
    signed_size_(NULL),
    request_signature_(const_cast< ::std::string*>(&_default_request_signature_)) {
  SharedCtor();
  MergeFrom(from);
}

void RemoveFromWatchListRequest::SharedCtor() {
  _cached_size_ = 0;
  watchlist_name_ = const_cast< ::std::string*>(&_default_watchlist_name_);
  signed_size_ = NULL;
  request_signature_ = const_cast< ::std::string*>(&_default_request_signature_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoveFromWatchListRequest::~RemoveFromWatchListRequest() {
  SharedDtor();
}

void RemoveFromWatchListRequest::SharedDtor() {
  if (watchlist_name_ != &_default_watchlist_name_) {
    delete watchlist_name_;
  }
  if (request_signature_ != &_default_request_signature_) {
    delete request_signature_;
  }
  if (this != default_instance_) {
    delete signed_size_;
  }
}

const ::google::protobuf::Descriptor* RemoveFromWatchListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoveFromWatchListRequest_descriptor_;
}

const RemoveFromWatchListRequest& RemoveFromWatchListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_5fservice_5fmessages_2eproto();  return *default_instance_;
}

RemoveFromWatchListRequest* RemoveFromWatchListRequest::default_instance_ = NULL;

RemoveFromWatchListRequest* RemoveFromWatchListRequest::New() const {
  return new RemoveFromWatchListRequest;
}

void RemoveFromWatchListRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (watchlist_name_ != &_default_watchlist_name_) {
        watchlist_name_->clear();
      }
    }
    if (_has_bit(1)) {
      if (signed_size_ != NULL) signed_size_->::maidsafe::SignedSize::Clear();
    }
    if (_has_bit(2)) {
      if (request_signature_ != &_default_request_signature_) {
        request_signature_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RemoveFromWatchListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required bytes watchlist_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_watchlist_name()));
        if (input->ExpectTag(18)) goto parse_signed_size;
        break;
      }
      
      // required .maidsafe.SignedSize signed_size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_signed_size:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_signed_size()));
        if (input->ExpectTag(26)) goto parse_request_signature;
        break;
      }
      
      // required bytes request_signature = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_request_signature:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_request_signature()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RemoveFromWatchListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    RemoveFromWatchListRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required bytes watchlist_name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(1, this->watchlist_name(), output);
  }
  
  // required .maidsafe.SignedSize signed_size = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->signed_size(), output);
  }
  
  // required bytes request_signature = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(3, this->request_signature(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RemoveFromWatchListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes watchlist_name = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(1, this->watchlist_name(), target);
  }
  
  // required .maidsafe.SignedSize signed_size = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->signed_size(), target);
  }
  
  // required bytes request_signature = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(3, this->request_signature(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RemoveFromWatchListRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes watchlist_name = 1;
    if (has_watchlist_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->watchlist_name());
    }
    
    // required .maidsafe.SignedSize signed_size = 2;
    if (has_signed_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->signed_size());
    }
    
    // required bytes request_signature = 3;
    if (has_request_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->request_signature());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void RemoveFromWatchListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RemoveFromWatchListRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RemoveFromWatchListRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemoveFromWatchListRequest::MergeFrom(const RemoveFromWatchListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_watchlist_name(from.watchlist_name());
    }
    if (from._has_bit(1)) {
      mutable_signed_size()->::maidsafe::SignedSize::MergeFrom(from.signed_size());
    }
    if (from._has_bit(2)) {
      set_request_signature(from.request_signature());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RemoveFromWatchListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveFromWatchListRequest::CopyFrom(const RemoveFromWatchListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveFromWatchListRequest::Swap(RemoveFromWatchListRequest* other) {
  if (other != this) {
    std::swap(watchlist_name_, other->watchlist_name_);
    std::swap(signed_size_, other->signed_size_);
    std::swap(request_signature_, other->request_signature_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool RemoveFromWatchListRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_signed_size()) {
    if (!this->signed_size().IsInitialized()) return false;
  }
  return true;
}

const ::google::protobuf::Descriptor* RemoveFromWatchListRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* RemoveFromWatchListRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return RemoveFromWatchListRequest_reflection_;
}

// ===================================================================

const ::std::string RemoveFromWatchListResponse::_default_pmid_;
#ifndef _MSC_VER
const int RemoveFromWatchListResponse::kResultFieldNumber;
const int RemoveFromWatchListResponse::kPmidFieldNumber;
#endif  // !_MSC_VER

RemoveFromWatchListResponse::RemoveFromWatchListResponse()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    result_(0u),
    pmid_(const_cast< ::std::string*>(&_default_pmid_)) {
  SharedCtor();
}

void RemoveFromWatchListResponse::InitAsDefaultInstance() {}

RemoveFromWatchListResponse::RemoveFromWatchListResponse(const RemoveFromWatchListResponse& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    result_(0u),
    pmid_(const_cast< ::std::string*>(&_default_pmid_)) {
  SharedCtor();
  MergeFrom(from);
}

void RemoveFromWatchListResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  pmid_ = const_cast< ::std::string*>(&_default_pmid_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoveFromWatchListResponse::~RemoveFromWatchListResponse() {
  SharedDtor();
}

void RemoveFromWatchListResponse::SharedDtor() {
  if (pmid_ != &_default_pmid_) {
    delete pmid_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* RemoveFromWatchListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoveFromWatchListResponse_descriptor_;
}

const RemoveFromWatchListResponse& RemoveFromWatchListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_5fservice_5fmessages_2eproto();  return *default_instance_;
}

RemoveFromWatchListResponse* RemoveFromWatchListResponse::default_instance_ = NULL;

RemoveFromWatchListResponse* RemoveFromWatchListResponse::New() const {
  return new RemoveFromWatchListResponse;
}

void RemoveFromWatchListResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    if (_has_bit(1)) {
      if (pmid_ != &_default_pmid_) {
        pmid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RemoveFromWatchListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_pmid;
        break;
      }
      
      // optional bytes pmid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_pmid:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_pmid()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RemoveFromWatchListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    RemoveFromWatchListResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->result(), output);
  }
  
  // optional bytes pmid = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(2, this->pmid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RemoveFromWatchListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->result(), target);
  }
  
  // optional bytes pmid = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(2, this->pmid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RemoveFromWatchListResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
    // optional bytes pmid = 2;
    if (has_pmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->pmid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void RemoveFromWatchListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RemoveFromWatchListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RemoveFromWatchListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemoveFromWatchListResponse::MergeFrom(const RemoveFromWatchListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_result(from.result());
    }
    if (from._has_bit(1)) {
      set_pmid(from.pmid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RemoveFromWatchListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveFromWatchListResponse::CopyFrom(const RemoveFromWatchListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveFromWatchListResponse::Swap(RemoveFromWatchListResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(pmid_, other->pmid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool RemoveFromWatchListResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* RemoveFromWatchListResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* RemoveFromWatchListResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return RemoveFromWatchListResponse_reflection_;
}

// ===================================================================

const ::std::string AddToReferenceListRequest::_default_chunkname_;
const ::std::string AddToReferenceListRequest::_default_request_signature_;
#ifndef _MSC_VER
const int AddToReferenceListRequest::kChunknameFieldNumber;
const int AddToReferenceListRequest::kStoreContractFieldNumber;
const int AddToReferenceListRequest::kRequestSignatureFieldNumber;
#endif  // !_MSC_VER

AddToReferenceListRequest::AddToReferenceListRequest()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    chunkname_(const_cast< ::std::string*>(&_default_chunkname_)),
    store_contract_(NULL),
    request_signature_(const_cast< ::std::string*>(&_default_request_signature_)) {
  SharedCtor();
}

void AddToReferenceListRequest::InitAsDefaultInstance() {  store_contract_ = const_cast< ::maidsafe::StoreContract*>(&::maidsafe::StoreContract::default_instance());
}

AddToReferenceListRequest::AddToReferenceListRequest(const AddToReferenceListRequest& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    chunkname_(const_cast< ::std::string*>(&_default_chunkname_)),
    store_contract_(NULL),
    request_signature_(const_cast< ::std::string*>(&_default_request_signature_)) {
  SharedCtor();
  MergeFrom(from);
}

void AddToReferenceListRequest::SharedCtor() {
  _cached_size_ = 0;
  chunkname_ = const_cast< ::std::string*>(&_default_chunkname_);
  store_contract_ = NULL;
  request_signature_ = const_cast< ::std::string*>(&_default_request_signature_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddToReferenceListRequest::~AddToReferenceListRequest() {
  SharedDtor();
}

void AddToReferenceListRequest::SharedDtor() {
  if (chunkname_ != &_default_chunkname_) {
    delete chunkname_;
  }
  if (request_signature_ != &_default_request_signature_) {
    delete request_signature_;
  }
  if (this != default_instance_) {
    delete store_contract_;
  }
}

const ::google::protobuf::Descriptor* AddToReferenceListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddToReferenceListRequest_descriptor_;
}

const AddToReferenceListRequest& AddToReferenceListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_5fservice_5fmessages_2eproto();  return *default_instance_;
}

AddToReferenceListRequest* AddToReferenceListRequest::default_instance_ = NULL;

AddToReferenceListRequest* AddToReferenceListRequest::New() const {
  return new AddToReferenceListRequest;
}

void AddToReferenceListRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (chunkname_ != &_default_chunkname_) {
        chunkname_->clear();
      }
    }
    if (_has_bit(1)) {
      if (store_contract_ != NULL) store_contract_->::maidsafe::StoreContract::Clear();
    }
    if (_has_bit(2)) {
      if (request_signature_ != &_default_request_signature_) {
        request_signature_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddToReferenceListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required bytes chunkname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_chunkname()));
        if (input->ExpectTag(18)) goto parse_store_contract;
        break;
      }
      
      // required .maidsafe.StoreContract store_contract = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_store_contract:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_store_contract()));
        if (input->ExpectTag(26)) goto parse_request_signature;
        break;
      }
      
      // required bytes request_signature = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_request_signature:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_request_signature()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddToReferenceListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    AddToReferenceListRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required bytes chunkname = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(1, this->chunkname(), output);
  }
  
  // required .maidsafe.StoreContract store_contract = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->store_contract(), output);
  }
  
  // required bytes request_signature = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(3, this->request_signature(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddToReferenceListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes chunkname = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(1, this->chunkname(), target);
  }
  
  // required .maidsafe.StoreContract store_contract = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->store_contract(), target);
  }
  
  // required bytes request_signature = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(3, this->request_signature(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddToReferenceListRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes chunkname = 1;
    if (has_chunkname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->chunkname());
    }
    
    // required .maidsafe.StoreContract store_contract = 2;
    if (has_store_contract()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->store_contract());
    }
    
    // required bytes request_signature = 3;
    if (has_request_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->request_signature());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void AddToReferenceListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddToReferenceListRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddToReferenceListRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddToReferenceListRequest::MergeFrom(const AddToReferenceListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_chunkname(from.chunkname());
    }
    if (from._has_bit(1)) {
      mutable_store_contract()->::maidsafe::StoreContract::MergeFrom(from.store_contract());
    }
    if (from._has_bit(2)) {
      set_request_signature(from.request_signature());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddToReferenceListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddToReferenceListRequest::CopyFrom(const AddToReferenceListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddToReferenceListRequest::Swap(AddToReferenceListRequest* other) {
  if (other != this) {
    std::swap(chunkname_, other->chunkname_);
    std::swap(store_contract_, other->store_contract_);
    std::swap(request_signature_, other->request_signature_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool AddToReferenceListRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_store_contract()) {
    if (!this->store_contract().IsInitialized()) return false;
  }
  return true;
}

const ::google::protobuf::Descriptor* AddToReferenceListRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* AddToReferenceListRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return AddToReferenceListRequest_reflection_;
}

// ===================================================================

const ::std::string AddToReferenceListResponse::_default_pmid_;
#ifndef _MSC_VER
const int AddToReferenceListResponse::kResultFieldNumber;
const int AddToReferenceListResponse::kPmidFieldNumber;
#endif  // !_MSC_VER

AddToReferenceListResponse::AddToReferenceListResponse()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    result_(0u),
    pmid_(const_cast< ::std::string*>(&_default_pmid_)) {
  SharedCtor();
}

void AddToReferenceListResponse::InitAsDefaultInstance() {}

AddToReferenceListResponse::AddToReferenceListResponse(const AddToReferenceListResponse& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    result_(0u),
    pmid_(const_cast< ::std::string*>(&_default_pmid_)) {
  SharedCtor();
  MergeFrom(from);
}

void AddToReferenceListResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  pmid_ = const_cast< ::std::string*>(&_default_pmid_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddToReferenceListResponse::~AddToReferenceListResponse() {
  SharedDtor();
}

void AddToReferenceListResponse::SharedDtor() {
  if (pmid_ != &_default_pmid_) {
    delete pmid_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* AddToReferenceListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddToReferenceListResponse_descriptor_;
}

const AddToReferenceListResponse& AddToReferenceListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_5fservice_5fmessages_2eproto();  return *default_instance_;
}

AddToReferenceListResponse* AddToReferenceListResponse::default_instance_ = NULL;

AddToReferenceListResponse* AddToReferenceListResponse::New() const {
  return new AddToReferenceListResponse;
}

void AddToReferenceListResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    if (_has_bit(1)) {
      if (pmid_ != &_default_pmid_) {
        pmid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddToReferenceListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_pmid;
        break;
      }
      
      // optional bytes pmid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_pmid:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_pmid()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddToReferenceListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    AddToReferenceListResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->result(), output);
  }
  
  // optional bytes pmid = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(2, this->pmid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddToReferenceListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->result(), target);
  }
  
  // optional bytes pmid = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(2, this->pmid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddToReferenceListResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
    // optional bytes pmid = 2;
    if (has_pmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->pmid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void AddToReferenceListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddToReferenceListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddToReferenceListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddToReferenceListResponse::MergeFrom(const AddToReferenceListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_result(from.result());
    }
    if (from._has_bit(1)) {
      set_pmid(from.pmid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddToReferenceListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddToReferenceListResponse::CopyFrom(const AddToReferenceListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddToReferenceListResponse::Swap(AddToReferenceListResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(pmid_, other->pmid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool AddToReferenceListResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* AddToReferenceListResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* AddToReferenceListResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return AddToReferenceListResponse_reflection_;
}

// ===================================================================

const ::std::string RemoveFromReferenceListRequest::_default_chunkname_;
const ::std::string RemoveFromReferenceListRequest::_default_pmid_;
const ::std::string RemoveFromReferenceListRequest::_default_public_key_;
const ::std::string RemoveFromReferenceListRequest::_default_public_key_signature_;
const ::std::string RemoveFromReferenceListRequest::_default_request_signature_;
#ifndef _MSC_VER
const int RemoveFromReferenceListRequest::kChunknameFieldNumber;
const int RemoveFromReferenceListRequest::kSignedSizeFieldNumber;
const int RemoveFromReferenceListRequest::kPmidFieldNumber;
const int RemoveFromReferenceListRequest::kPublicKeyFieldNumber;
const int RemoveFromReferenceListRequest::kPublicKeySignatureFieldNumber;
const int RemoveFromReferenceListRequest::kRequestSignatureFieldNumber;
#endif  // !_MSC_VER

RemoveFromReferenceListRequest::RemoveFromReferenceListRequest()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    chunkname_(const_cast< ::std::string*>(&_default_chunkname_)),
    signed_size_(NULL),
    pmid_(const_cast< ::std::string*>(&_default_pmid_)),
    public_key_(const_cast< ::std::string*>(&_default_public_key_)),
    public_key_signature_(const_cast< ::std::string*>(&_default_public_key_signature_)),
    request_signature_(const_cast< ::std::string*>(&_default_request_signature_)) {
  SharedCtor();
}

void RemoveFromReferenceListRequest::InitAsDefaultInstance() {  signed_size_ = const_cast< ::maidsafe::SignedSize*>(&::maidsafe::SignedSize::default_instance());
}

RemoveFromReferenceListRequest::RemoveFromReferenceListRequest(const RemoveFromReferenceListRequest& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    chunkname_(const_cast< ::std::string*>(&_default_chunkname_)),
    signed_size_(NULL),
    pmid_(const_cast< ::std::string*>(&_default_pmid_)),
    public_key_(const_cast< ::std::string*>(&_default_public_key_)),
    public_key_signature_(const_cast< ::std::string*>(&_default_public_key_signature_)),
    request_signature_(const_cast< ::std::string*>(&_default_request_signature_)) {
  SharedCtor();
  MergeFrom(from);
}

void RemoveFromReferenceListRequest::SharedCtor() {
  _cached_size_ = 0;
  chunkname_ = const_cast< ::std::string*>(&_default_chunkname_);
  signed_size_ = NULL;
  pmid_ = const_cast< ::std::string*>(&_default_pmid_);
  public_key_ = const_cast< ::std::string*>(&_default_public_key_);
  public_key_signature_ = const_cast< ::std::string*>(&_default_public_key_signature_);
  request_signature_ = const_cast< ::std::string*>(&_default_request_signature_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoveFromReferenceListRequest::~RemoveFromReferenceListRequest() {
  SharedDtor();
}

void RemoveFromReferenceListRequest::SharedDtor() {
  if (chunkname_ != &_default_chunkname_) {
    delete chunkname_;
  }
  if (pmid_ != &_default_pmid_) {
    delete pmid_;
  }
  if (public_key_ != &_default_public_key_) {
    delete public_key_;
  }
  if (public_key_signature_ != &_default_public_key_signature_) {
    delete public_key_signature_;
  }
  if (request_signature_ != &_default_request_signature_) {
    delete request_signature_;
  }
  if (this != default_instance_) {
    delete signed_size_;
  }
}

const ::google::protobuf::Descriptor* RemoveFromReferenceListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoveFromReferenceListRequest_descriptor_;
}

const RemoveFromReferenceListRequest& RemoveFromReferenceListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_5fservice_5fmessages_2eproto();  return *default_instance_;
}

RemoveFromReferenceListRequest* RemoveFromReferenceListRequest::default_instance_ = NULL;

RemoveFromReferenceListRequest* RemoveFromReferenceListRequest::New() const {
  return new RemoveFromReferenceListRequest;
}

void RemoveFromReferenceListRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (chunkname_ != &_default_chunkname_) {
        chunkname_->clear();
      }
    }
    if (_has_bit(1)) {
      if (signed_size_ != NULL) signed_size_->::maidsafe::SignedSize::Clear();
    }
    if (_has_bit(2)) {
      if (pmid_ != &_default_pmid_) {
        pmid_->clear();
      }
    }
    if (_has_bit(3)) {
      if (public_key_ != &_default_public_key_) {
        public_key_->clear();
      }
    }
    if (_has_bit(4)) {
      if (public_key_signature_ != &_default_public_key_signature_) {
        public_key_signature_->clear();
      }
    }
    if (_has_bit(5)) {
      if (request_signature_ != &_default_request_signature_) {
        request_signature_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RemoveFromReferenceListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required bytes chunkname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_chunkname()));
        if (input->ExpectTag(18)) goto parse_signed_size;
        break;
      }
      
      // required .maidsafe.SignedSize signed_size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_signed_size:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_signed_size()));
        if (input->ExpectTag(26)) goto parse_pmid;
        break;
      }
      
      // required bytes pmid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_pmid:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_pmid()));
        if (input->ExpectTag(34)) goto parse_public_key;
        break;
      }
      
      // required bytes public_key = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_public_key:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_public_key()));
        if (input->ExpectTag(42)) goto parse_public_key_signature;
        break;
      }
      
      // required bytes public_key_signature = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_public_key_signature:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_public_key_signature()));
        if (input->ExpectTag(50)) goto parse_request_signature;
        break;
      }
      
      // required bytes request_signature = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_request_signature:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_request_signature()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RemoveFromReferenceListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    RemoveFromReferenceListRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required bytes chunkname = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(1, this->chunkname(), output);
  }
  
  // required .maidsafe.SignedSize signed_size = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->signed_size(), output);
  }
  
  // required bytes pmid = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(3, this->pmid(), output);
  }
  
  // required bytes public_key = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(4, this->public_key(), output);
  }
  
  // required bytes public_key_signature = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(5, this->public_key_signature(), output);
  }
  
  // required bytes request_signature = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(6, this->request_signature(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RemoveFromReferenceListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes chunkname = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(1, this->chunkname(), target);
  }
  
  // required .maidsafe.SignedSize signed_size = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->signed_size(), target);
  }
  
  // required bytes pmid = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(3, this->pmid(), target);
  }
  
  // required bytes public_key = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(4, this->public_key(), target);
  }
  
  // required bytes public_key_signature = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(5, this->public_key_signature(), target);
  }
  
  // required bytes request_signature = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(6, this->request_signature(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RemoveFromReferenceListRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes chunkname = 1;
    if (has_chunkname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->chunkname());
    }
    
    // required .maidsafe.SignedSize signed_size = 2;
    if (has_signed_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->signed_size());
    }
    
    // required bytes pmid = 3;
    if (has_pmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->pmid());
    }
    
    // required bytes public_key = 4;
    if (has_public_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->public_key());
    }
    
    // required bytes public_key_signature = 5;
    if (has_public_key_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->public_key_signature());
    }
    
    // required bytes request_signature = 6;
    if (has_request_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->request_signature());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void RemoveFromReferenceListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RemoveFromReferenceListRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RemoveFromReferenceListRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemoveFromReferenceListRequest::MergeFrom(const RemoveFromReferenceListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_chunkname(from.chunkname());
    }
    if (from._has_bit(1)) {
      mutable_signed_size()->::maidsafe::SignedSize::MergeFrom(from.signed_size());
    }
    if (from._has_bit(2)) {
      set_pmid(from.pmid());
    }
    if (from._has_bit(3)) {
      set_public_key(from.public_key());
    }
    if (from._has_bit(4)) {
      set_public_key_signature(from.public_key_signature());
    }
    if (from._has_bit(5)) {
      set_request_signature(from.request_signature());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RemoveFromReferenceListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveFromReferenceListRequest::CopyFrom(const RemoveFromReferenceListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveFromReferenceListRequest::Swap(RemoveFromReferenceListRequest* other) {
  if (other != this) {
    std::swap(chunkname_, other->chunkname_);
    std::swap(signed_size_, other->signed_size_);
    std::swap(pmid_, other->pmid_);
    std::swap(public_key_, other->public_key_);
    std::swap(public_key_signature_, other->public_key_signature_);
    std::swap(request_signature_, other->request_signature_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool RemoveFromReferenceListRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  if (has_signed_size()) {
    if (!this->signed_size().IsInitialized()) return false;
  }
  return true;
}

const ::google::protobuf::Descriptor* RemoveFromReferenceListRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* RemoveFromReferenceListRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return RemoveFromReferenceListRequest_reflection_;
}

// ===================================================================

const ::std::string RemoveFromReferenceListResponse::_default_pmid_;
#ifndef _MSC_VER
const int RemoveFromReferenceListResponse::kResultFieldNumber;
const int RemoveFromReferenceListResponse::kPmidFieldNumber;
#endif  // !_MSC_VER

RemoveFromReferenceListResponse::RemoveFromReferenceListResponse()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    result_(0u),
    pmid_(const_cast< ::std::string*>(&_default_pmid_)) {
  SharedCtor();
}

void RemoveFromReferenceListResponse::InitAsDefaultInstance() {}

RemoveFromReferenceListResponse::RemoveFromReferenceListResponse(const RemoveFromReferenceListResponse& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    result_(0u),
    pmid_(const_cast< ::std::string*>(&_default_pmid_)) {
  SharedCtor();
  MergeFrom(from);
}

void RemoveFromReferenceListResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  pmid_ = const_cast< ::std::string*>(&_default_pmid_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoveFromReferenceListResponse::~RemoveFromReferenceListResponse() {
  SharedDtor();
}

void RemoveFromReferenceListResponse::SharedDtor() {
  if (pmid_ != &_default_pmid_) {
    delete pmid_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* RemoveFromReferenceListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoveFromReferenceListResponse_descriptor_;
}

const RemoveFromReferenceListResponse& RemoveFromReferenceListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_5fservice_5fmessages_2eproto();  return *default_instance_;
}

RemoveFromReferenceListResponse* RemoveFromReferenceListResponse::default_instance_ = NULL;

RemoveFromReferenceListResponse* RemoveFromReferenceListResponse::New() const {
  return new RemoveFromReferenceListResponse;
}

void RemoveFromReferenceListResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    if (_has_bit(1)) {
      if (pmid_ != &_default_pmid_) {
        pmid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RemoveFromReferenceListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_pmid;
        break;
      }
      
      // optional bytes pmid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_pmid:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_pmid()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RemoveFromReferenceListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    RemoveFromReferenceListResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->result(), output);
  }
  
  // optional bytes pmid = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(2, this->pmid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RemoveFromReferenceListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->result(), target);
  }
  
  // optional bytes pmid = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(2, this->pmid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RemoveFromReferenceListResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
    // optional bytes pmid = 2;
    if (has_pmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->pmid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void RemoveFromReferenceListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RemoveFromReferenceListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RemoveFromReferenceListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemoveFromReferenceListResponse::MergeFrom(const RemoveFromReferenceListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_result(from.result());
    }
    if (from._has_bit(1)) {
      set_pmid(from.pmid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RemoveFromReferenceListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveFromReferenceListResponse::CopyFrom(const RemoveFromReferenceListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveFromReferenceListResponse::Swap(RemoveFromReferenceListResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(pmid_, other->pmid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool RemoveFromReferenceListResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* RemoveFromReferenceListResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* RemoveFromReferenceListResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return RemoveFromReferenceListResponse_reflection_;
}

// ===================================================================

const ::google::protobuf::EnumDescriptor* AmendAccountRequest_Amendment_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AmendAccountRequest_Amendment_descriptor_;
}
bool AmendAccountRequest_Amendment_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const AmendAccountRequest_Amendment AmendAccountRequest::kSpaceOffered;
const AmendAccountRequest_Amendment AmendAccountRequest::kSpaceGivenInc;
const AmendAccountRequest_Amendment AmendAccountRequest::kSpaceGivenDec;
const AmendAccountRequest_Amendment AmendAccountRequest::kSpaceTakenInc;
const AmendAccountRequest_Amendment AmendAccountRequest::kSpaceTakenDec;
const AmendAccountRequest_Amendment AmendAccountRequest::kFailedStoreAgreement;
const AmendAccountRequest_Amendment AmendAccountRequest::Amendment_MIN;
const AmendAccountRequest_Amendment AmendAccountRequest::Amendment_MAX;
#endif  // _MSC_VER
const ::std::string AmendAccountRequest::_default_signature_;
#ifndef _MSC_VER
const int AmendAccountRequest::kAmendmentTypeFieldNumber;
const int AmendAccountRequest::kSignatureFieldNumber;
const int AmendAccountRequest::kStorePrepResponseFieldNumber;
const int AmendAccountRequest::kSignedSizeFieldNumber;
const int AmendAccountRequest::kStoreContractFieldNumber;
#endif  // !_MSC_VER

AmendAccountRequest::AmendAccountRequest()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    amendment_type_(0),
    signature_(const_cast< ::std::string*>(&_default_signature_)),
    store_prep_response_(NULL),
    signed_size_(NULL),
    store_contract_(NULL) {
  SharedCtor();
}

void AmendAccountRequest::InitAsDefaultInstance() {  store_prep_response_ = const_cast< ::maidsafe::StorePrepResponse*>(&::maidsafe::StorePrepResponse::default_instance());
  signed_size_ = const_cast< ::maidsafe::SignedSize*>(&::maidsafe::SignedSize::default_instance());
  store_contract_ = const_cast< ::maidsafe::StoreContract*>(&::maidsafe::StoreContract::default_instance());
}

AmendAccountRequest::AmendAccountRequest(const AmendAccountRequest& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    amendment_type_(0),
    signature_(const_cast< ::std::string*>(&_default_signature_)),
    store_prep_response_(NULL),
    signed_size_(NULL),
    store_contract_(NULL) {
  SharedCtor();
  MergeFrom(from);
}

void AmendAccountRequest::SharedCtor() {
  _cached_size_ = 0;
  amendment_type_ = 0;
  signature_ = const_cast< ::std::string*>(&_default_signature_);
  store_prep_response_ = NULL;
  signed_size_ = NULL;
  store_contract_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AmendAccountRequest::~AmendAccountRequest() {
  SharedDtor();
}

void AmendAccountRequest::SharedDtor() {
  if (signature_ != &_default_signature_) {
    delete signature_;
  }
  if (this != default_instance_) {
    delete store_prep_response_;
    delete signed_size_;
    delete store_contract_;
  }
}

const ::google::protobuf::Descriptor* AmendAccountRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AmendAccountRequest_descriptor_;
}

const AmendAccountRequest& AmendAccountRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_5fservice_5fmessages_2eproto();  return *default_instance_;
}

AmendAccountRequest* AmendAccountRequest::default_instance_ = NULL;

AmendAccountRequest* AmendAccountRequest::New() const {
  return new AmendAccountRequest;
}

void AmendAccountRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    amendment_type_ = 0;
    if (_has_bit(1)) {
      if (signature_ != &_default_signature_) {
        signature_->clear();
      }
    }
    if (_has_bit(2)) {
      if (store_prep_response_ != NULL) store_prep_response_->::maidsafe::StorePrepResponse::Clear();
    }
    if (_has_bit(3)) {
      if (signed_size_ != NULL) signed_size_->::maidsafe::SignedSize::Clear();
    }
    if (_has_bit(4)) {
      if (store_contract_ != NULL) store_contract_->::maidsafe::StoreContract::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AmendAccountRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required .maidsafe.AmendAccountRequest.Amendment amendment_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        int value;
        DO_(::google::protobuf::internal::WireFormat::ReadEnum(input, &value));
        if (::maidsafe::AmendAccountRequest_Amendment_IsValid(value)) {
          set_amendment_type(static_cast< ::maidsafe::AmendAccountRequest_Amendment >(value));
        } else {
          mutable_unknown_fields()->AddVarint(1, value);
        }
        if (input->ExpectTag(18)) goto parse_signature;
        break;
      }
      
      // required bytes signature = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_signature:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_signature()));
        if (input->ExpectTag(26)) goto parse_store_prep_response;
        break;
      }
      
      // optional .maidsafe.StorePrepResponse store_prep_response = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_store_prep_response:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_store_prep_response()));
        if (input->ExpectTag(34)) goto parse_signed_size;
        break;
      }
      
      // optional .maidsafe.SignedSize signed_size = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_signed_size:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_signed_size()));
        if (input->ExpectTag(42)) goto parse_store_contract;
        break;
      }
      
      // optional .maidsafe.StoreContract store_contract = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_store_contract:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_store_contract()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AmendAccountRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    AmendAccountRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required .maidsafe.AmendAccountRequest.Amendment amendment_type = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteEnum(1, this->amendment_type(), output);
  }
  
  // required bytes signature = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(2, this->signature(), output);
  }
  
  // optional .maidsafe.StorePrepResponse store_prep_response = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(3, this->store_prep_response(), output);
  }
  
  // optional .maidsafe.SignedSize signed_size = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(4, this->signed_size(), output);
  }
  
  // optional .maidsafe.StoreContract store_contract = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(5, this->store_contract(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AmendAccountRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .maidsafe.AmendAccountRequest.Amendment amendment_type = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteEnumToArray(1, this->amendment_type(), target);
  }
  
  // required bytes signature = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(2, this->signature(), target);
  }
  
  // optional .maidsafe.StorePrepResponse store_prep_response = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(3, this->store_prep_response(), target);
  }
  
  // optional .maidsafe.SignedSize signed_size = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(4, this->signed_size(), target);
  }
  
  // optional .maidsafe.StoreContract store_contract = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(5, this->store_contract(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AmendAccountRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .maidsafe.AmendAccountRequest.Amendment amendment_type = 1;
    if (has_amendment_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::EnumSize(this->amendment_type());
    }
    
    // required bytes signature = 2;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->signature());
    }
    
    // optional .maidsafe.StorePrepResponse store_prep_response = 3;
    if (has_store_prep_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->store_prep_response());
    }
    
    // optional .maidsafe.SignedSize signed_size = 4;
    if (has_signed_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->signed_size());
    }
    
    // optional .maidsafe.StoreContract store_contract = 5;
    if (has_store_contract()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->store_contract());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void AmendAccountRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AmendAccountRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AmendAccountRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AmendAccountRequest::MergeFrom(const AmendAccountRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_amendment_type(from.amendment_type());
    }
    if (from._has_bit(1)) {
      set_signature(from.signature());
    }
    if (from._has_bit(2)) {
      mutable_store_prep_response()->::maidsafe::StorePrepResponse::MergeFrom(from.store_prep_response());
    }
    if (from._has_bit(3)) {
      mutable_signed_size()->::maidsafe::SignedSize::MergeFrom(from.signed_size());
    }
    if (from._has_bit(4)) {
      mutable_store_contract()->::maidsafe::StoreContract::MergeFrom(from.store_contract());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AmendAccountRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AmendAccountRequest::CopyFrom(const AmendAccountRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AmendAccountRequest::Swap(AmendAccountRequest* other) {
  if (other != this) {
    std::swap(amendment_type_, other->amendment_type_);
    std::swap(signature_, other->signature_);
    std::swap(store_prep_response_, other->store_prep_response_);
    std::swap(signed_size_, other->signed_size_);
    std::swap(store_contract_, other->store_contract_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool AmendAccountRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_store_prep_response()) {
    if (!this->store_prep_response().IsInitialized()) return false;
  }
  if (has_signed_size()) {
    if (!this->signed_size().IsInitialized()) return false;
  }
  if (has_store_contract()) {
    if (!this->store_contract().IsInitialized()) return false;
  }
  return true;
}

const ::google::protobuf::Descriptor* AmendAccountRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* AmendAccountRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return AmendAccountRequest_reflection_;
}

// ===================================================================

const ::std::string AmendAccountResponse::_default_pmid_;
#ifndef _MSC_VER
const int AmendAccountResponse::kResultFieldNumber;
const int AmendAccountResponse::kPmidFieldNumber;
#endif  // !_MSC_VER

AmendAccountResponse::AmendAccountResponse()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    result_(0u),
    pmid_(const_cast< ::std::string*>(&_default_pmid_)) {
  SharedCtor();
}

void AmendAccountResponse::InitAsDefaultInstance() {}

AmendAccountResponse::AmendAccountResponse(const AmendAccountResponse& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    result_(0u),
    pmid_(const_cast< ::std::string*>(&_default_pmid_)) {
  SharedCtor();
  MergeFrom(from);
}

void AmendAccountResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  pmid_ = const_cast< ::std::string*>(&_default_pmid_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AmendAccountResponse::~AmendAccountResponse() {
  SharedDtor();
}

void AmendAccountResponse::SharedDtor() {
  if (pmid_ != &_default_pmid_) {
    delete pmid_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* AmendAccountResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AmendAccountResponse_descriptor_;
}

const AmendAccountResponse& AmendAccountResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_5fservice_5fmessages_2eproto();  return *default_instance_;
}

AmendAccountResponse* AmendAccountResponse::default_instance_ = NULL;

AmendAccountResponse* AmendAccountResponse::New() const {
  return new AmendAccountResponse;
}

void AmendAccountResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    if (_has_bit(1)) {
      if (pmid_ != &_default_pmid_) {
        pmid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AmendAccountResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_pmid;
        break;
      }
      
      // optional bytes pmid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_pmid:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_pmid()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AmendAccountResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    AmendAccountResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->result(), output);
  }
  
  // optional bytes pmid = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(2, this->pmid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AmendAccountResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->result(), target);
  }
  
  // optional bytes pmid = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(2, this->pmid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AmendAccountResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
    // optional bytes pmid = 2;
    if (has_pmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->pmid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void AmendAccountResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AmendAccountResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AmendAccountResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AmendAccountResponse::MergeFrom(const AmendAccountResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_result(from.result());
    }
    if (from._has_bit(1)) {
      set_pmid(from.pmid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AmendAccountResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AmendAccountResponse::CopyFrom(const AmendAccountResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AmendAccountResponse::Swap(AmendAccountResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(pmid_, other->pmid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool AmendAccountResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* AmendAccountResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* AmendAccountResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return AmendAccountResponse_reflection_;
}

// ===================================================================

const ::std::string GetAccountStatusRequest::_default_pmid_;
const ::std::string GetAccountStatusRequest::_default_public_key_;
const ::std::string GetAccountStatusRequest::_default_public_key_signature_;
const ::std::string GetAccountStatusRequest::_default_request_signature_;
#ifndef _MSC_VER
const int GetAccountStatusRequest::kPmidFieldNumber;
const int GetAccountStatusRequest::kPublicKeyFieldNumber;
const int GetAccountStatusRequest::kPublicKeySignatureFieldNumber;
const int GetAccountStatusRequest::kRequestSignatureFieldNumber;
#endif  // !_MSC_VER

GetAccountStatusRequest::GetAccountStatusRequest()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    pmid_(const_cast< ::std::string*>(&_default_pmid_)),
    public_key_(const_cast< ::std::string*>(&_default_public_key_)),
    public_key_signature_(const_cast< ::std::string*>(&_default_public_key_signature_)),
    request_signature_(const_cast< ::std::string*>(&_default_request_signature_)) {
  SharedCtor();
}

void GetAccountStatusRequest::InitAsDefaultInstance() {}

GetAccountStatusRequest::GetAccountStatusRequest(const GetAccountStatusRequest& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    pmid_(const_cast< ::std::string*>(&_default_pmid_)),
    public_key_(const_cast< ::std::string*>(&_default_public_key_)),
    public_key_signature_(const_cast< ::std::string*>(&_default_public_key_signature_)),
    request_signature_(const_cast< ::std::string*>(&_default_request_signature_)) {
  SharedCtor();
  MergeFrom(from);
}

void GetAccountStatusRequest::SharedCtor() {
  _cached_size_ = 0;
  pmid_ = const_cast< ::std::string*>(&_default_pmid_);
  public_key_ = const_cast< ::std::string*>(&_default_public_key_);
  public_key_signature_ = const_cast< ::std::string*>(&_default_public_key_signature_);
  request_signature_ = const_cast< ::std::string*>(&_default_request_signature_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAccountStatusRequest::~GetAccountStatusRequest() {
  SharedDtor();
}

void GetAccountStatusRequest::SharedDtor() {
  if (pmid_ != &_default_pmid_) {
    delete pmid_;
  }
  if (public_key_ != &_default_public_key_) {
    delete public_key_;
  }
  if (public_key_signature_ != &_default_public_key_signature_) {
    delete public_key_signature_;
  }
  if (request_signature_ != &_default_request_signature_) {
    delete request_signature_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* GetAccountStatusRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAccountStatusRequest_descriptor_;
}

const GetAccountStatusRequest& GetAccountStatusRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_5fservice_5fmessages_2eproto();  return *default_instance_;
}

GetAccountStatusRequest* GetAccountStatusRequest::default_instance_ = NULL;

GetAccountStatusRequest* GetAccountStatusRequest::New() const {
  return new GetAccountStatusRequest;
}

void GetAccountStatusRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (pmid_ != &_default_pmid_) {
        pmid_->clear();
      }
    }
    if (_has_bit(1)) {
      if (public_key_ != &_default_public_key_) {
        public_key_->clear();
      }
    }
    if (_has_bit(2)) {
      if (public_key_signature_ != &_default_public_key_signature_) {
        public_key_signature_->clear();
      }
    }
    if (_has_bit(3)) {
      if (request_signature_ != &_default_request_signature_) {
        request_signature_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAccountStatusRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required bytes pmid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_pmid()));
        if (input->ExpectTag(18)) goto parse_public_key;
        break;
      }
      
      // optional bytes public_key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_public_key:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_public_key()));
        if (input->ExpectTag(26)) goto parse_public_key_signature;
        break;
      }
      
      // optional bytes public_key_signature = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_public_key_signature:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_public_key_signature()));
        if (input->ExpectTag(34)) goto parse_request_signature;
        break;
      }
      
      // optional bytes request_signature = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_request_signature:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_request_signature()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetAccountStatusRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    GetAccountStatusRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required bytes pmid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(1, this->pmid(), output);
  }
  
  // optional bytes public_key = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(2, this->public_key(), output);
  }
  
  // optional bytes public_key_signature = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(3, this->public_key_signature(), output);
  }
  
  // optional bytes request_signature = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(4, this->request_signature(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetAccountStatusRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes pmid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(1, this->pmid(), target);
  }
  
  // optional bytes public_key = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(2, this->public_key(), target);
  }
  
  // optional bytes public_key_signature = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(3, this->public_key_signature(), target);
  }
  
  // optional bytes request_signature = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(4, this->request_signature(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetAccountStatusRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes pmid = 1;
    if (has_pmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->pmid());
    }
    
    // optional bytes public_key = 2;
    if (has_public_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->public_key());
    }
    
    // optional bytes public_key_signature = 3;
    if (has_public_key_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->public_key_signature());
    }
    
    // optional bytes request_signature = 4;
    if (has_request_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->request_signature());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void GetAccountStatusRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAccountStatusRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAccountStatusRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAccountStatusRequest::MergeFrom(const GetAccountStatusRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_pmid(from.pmid());
    }
    if (from._has_bit(1)) {
      set_public_key(from.public_key());
    }
    if (from._has_bit(2)) {
      set_public_key_signature(from.public_key_signature());
    }
    if (from._has_bit(3)) {
      set_request_signature(from.request_signature());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAccountStatusRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAccountStatusRequest::CopyFrom(const GetAccountStatusRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAccountStatusRequest::Swap(GetAccountStatusRequest* other) {
  if (other != this) {
    std::swap(pmid_, other->pmid_);
    std::swap(public_key_, other->public_key_);
    std::swap(public_key_signature_, other->public_key_signature_);
    std::swap(request_signature_, other->request_signature_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool GetAccountStatusRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* GetAccountStatusRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* GetAccountStatusRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return GetAccountStatusRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int GetAccountStatusResponse::kSpaceOfferedFieldNumber;
const int GetAccountStatusResponse::kSpaceGivenFieldNumber;
const int GetAccountStatusResponse::kSpaceTakenFieldNumber;
#endif  // !_MSC_VER

GetAccountStatusResponse::GetAccountStatusResponse()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    space_offered_(GOOGLE_ULONGLONG(0)),
    space_given_(GOOGLE_ULONGLONG(0)),
    space_taken_(GOOGLE_ULONGLONG(0)) {
  SharedCtor();
}

void GetAccountStatusResponse::InitAsDefaultInstance() {}

GetAccountStatusResponse::GetAccountStatusResponse(const GetAccountStatusResponse& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    space_offered_(GOOGLE_ULONGLONG(0)),
    space_given_(GOOGLE_ULONGLONG(0)),
    space_taken_(GOOGLE_ULONGLONG(0)) {
  SharedCtor();
  MergeFrom(from);
}

void GetAccountStatusResponse::SharedCtor() {
  _cached_size_ = 0;
  space_offered_ = GOOGLE_ULONGLONG(0);
  space_given_ = GOOGLE_ULONGLONG(0);
  space_taken_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAccountStatusResponse::~GetAccountStatusResponse() {
  SharedDtor();
}

void GetAccountStatusResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* GetAccountStatusResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAccountStatusResponse_descriptor_;
}

const GetAccountStatusResponse& GetAccountStatusResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_5fservice_5fmessages_2eproto();  return *default_instance_;
}

GetAccountStatusResponse* GetAccountStatusResponse::default_instance_ = NULL;

GetAccountStatusResponse* GetAccountStatusResponse::New() const {
  return new GetAccountStatusResponse;
}

void GetAccountStatusResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    space_offered_ = GOOGLE_ULONGLONG(0);
    space_given_ = GOOGLE_ULONGLONG(0);
    space_taken_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAccountStatusResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional uint64 space_offered = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt64(
              input, &space_offered_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_space_given;
        break;
      }
      
      // optional uint64 space_given = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_space_given:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt64(
              input, &space_given_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_space_taken;
        break;
      }
      
      // optional uint64 space_taken = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_space_taken:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt64(
              input, &space_taken_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetAccountStatusResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    GetAccountStatusResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint64 space_offered = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt64(1, this->space_offered(), output);
  }
  
  // optional uint64 space_given = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt64(2, this->space_given(), output);
  }
  
  // optional uint64 space_taken = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt64(3, this->space_taken(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetAccountStatusResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 space_offered = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt64ToArray(1, this->space_offered(), target);
  }
  
  // optional uint64 space_given = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt64ToArray(2, this->space_given(), target);
  }
  
  // optional uint64 space_taken = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt64ToArray(3, this->space_taken(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetAccountStatusResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 space_offered = 1;
    if (has_space_offered()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt64Size(
          this->space_offered());
    }
    
    // optional uint64 space_given = 2;
    if (has_space_given()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt64Size(
          this->space_given());
    }
    
    // optional uint64 space_taken = 3;
    if (has_space_taken()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt64Size(
          this->space_taken());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void GetAccountStatusResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAccountStatusResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAccountStatusResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAccountStatusResponse::MergeFrom(const GetAccountStatusResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_space_offered(from.space_offered());
    }
    if (from._has_bit(1)) {
      set_space_given(from.space_given());
    }
    if (from._has_bit(2)) {
      set_space_taken(from.space_taken());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAccountStatusResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAccountStatusResponse::CopyFrom(const GetAccountStatusResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAccountStatusResponse::Swap(GetAccountStatusResponse* other) {
  if (other != this) {
    std::swap(space_offered_, other->space_offered_);
    std::swap(space_given_, other->space_given_);
    std::swap(space_taken_, other->space_taken_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool GetAccountStatusResponse::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* GetAccountStatusResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* GetAccountStatusResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return GetAccountStatusResponse_reflection_;
}

// ===================================================================

const ::std::string CheckChunkRequest::_default_chunkname_;
#ifndef _MSC_VER
const int CheckChunkRequest::kChunknameFieldNumber;
#endif  // !_MSC_VER

CheckChunkRequest::CheckChunkRequest()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    chunkname_(const_cast< ::std::string*>(&_default_chunkname_)) {
  SharedCtor();
}

void CheckChunkRequest::InitAsDefaultInstance() {}

CheckChunkRequest::CheckChunkRequest(const CheckChunkRequest& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    chunkname_(const_cast< ::std::string*>(&_default_chunkname_)) {
  SharedCtor();
  MergeFrom(from);
}

void CheckChunkRequest::SharedCtor() {
  _cached_size_ = 0;
  chunkname_ = const_cast< ::std::string*>(&_default_chunkname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CheckChunkRequest::~CheckChunkRequest() {
  SharedDtor();
}

void CheckChunkRequest::SharedDtor() {
  if (chunkname_ != &_default_chunkname_) {
    delete chunkname_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CheckChunkRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CheckChunkRequest_descriptor_;
}

const CheckChunkRequest& CheckChunkRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_5fservice_5fmessages_2eproto();  return *default_instance_;
}

CheckChunkRequest* CheckChunkRequest::default_instance_ = NULL;

CheckChunkRequest* CheckChunkRequest::New() const {
  return new CheckChunkRequest;
}

void CheckChunkRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (chunkname_ != &_default_chunkname_) {
        chunkname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CheckChunkRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required bytes chunkname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_chunkname()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CheckChunkRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CheckChunkRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required bytes chunkname = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(1, this->chunkname(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CheckChunkRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes chunkname = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(1, this->chunkname(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CheckChunkRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes chunkname = 1;
    if (has_chunkname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->chunkname());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CheckChunkRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CheckChunkRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CheckChunkRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CheckChunkRequest::MergeFrom(const CheckChunkRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_chunkname(from.chunkname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CheckChunkRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckChunkRequest::CopyFrom(const CheckChunkRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckChunkRequest::Swap(CheckChunkRequest* other) {
  if (other != this) {
    std::swap(chunkname_, other->chunkname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CheckChunkRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* CheckChunkRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CheckChunkRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CheckChunkRequest_reflection_;
}

// ===================================================================

const ::std::string CheckChunkResponse::_default_pmid_;
#ifndef _MSC_VER
const int CheckChunkResponse::kResultFieldNumber;
const int CheckChunkResponse::kPmidFieldNumber;
#endif  // !_MSC_VER

CheckChunkResponse::CheckChunkResponse()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    result_(0u),
    pmid_(const_cast< ::std::string*>(&_default_pmid_)) {
  SharedCtor();
}

void CheckChunkResponse::InitAsDefaultInstance() {}

CheckChunkResponse::CheckChunkResponse(const CheckChunkResponse& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    result_(0u),
    pmid_(const_cast< ::std::string*>(&_default_pmid_)) {
  SharedCtor();
  MergeFrom(from);
}

void CheckChunkResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  pmid_ = const_cast< ::std::string*>(&_default_pmid_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CheckChunkResponse::~CheckChunkResponse() {
  SharedDtor();
}

void CheckChunkResponse::SharedDtor() {
  if (pmid_ != &_default_pmid_) {
    delete pmid_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CheckChunkResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CheckChunkResponse_descriptor_;
}

const CheckChunkResponse& CheckChunkResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_5fservice_5fmessages_2eproto();  return *default_instance_;
}

CheckChunkResponse* CheckChunkResponse::default_instance_ = NULL;

CheckChunkResponse* CheckChunkResponse::New() const {
  return new CheckChunkResponse;
}

void CheckChunkResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    if (_has_bit(1)) {
      if (pmid_ != &_default_pmid_) {
        pmid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CheckChunkResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_pmid;
        break;
      }
      
      // required bytes pmid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_pmid:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_pmid()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CheckChunkResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CheckChunkResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->result(), output);
  }
  
  // required bytes pmid = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(2, this->pmid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CheckChunkResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->result(), target);
  }
  
  // required bytes pmid = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(2, this->pmid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CheckChunkResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
    // required bytes pmid = 2;
    if (has_pmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->pmid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CheckChunkResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CheckChunkResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CheckChunkResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CheckChunkResponse::MergeFrom(const CheckChunkResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_result(from.result());
    }
    if (from._has_bit(1)) {
      set_pmid(from.pmid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CheckChunkResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckChunkResponse::CopyFrom(const CheckChunkResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckChunkResponse::Swap(CheckChunkResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(pmid_, other->pmid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CheckChunkResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* CheckChunkResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CheckChunkResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CheckChunkResponse_reflection_;
}

// ===================================================================

const ::std::string GetChunkRequest::_default_chunkname_;
#ifndef _MSC_VER
const int GetChunkRequest::kChunknameFieldNumber;
#endif  // !_MSC_VER

GetChunkRequest::GetChunkRequest()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    chunkname_(const_cast< ::std::string*>(&_default_chunkname_)) {
  SharedCtor();
}

void GetChunkRequest::InitAsDefaultInstance() {}

GetChunkRequest::GetChunkRequest(const GetChunkRequest& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    chunkname_(const_cast< ::std::string*>(&_default_chunkname_)) {
  SharedCtor();
  MergeFrom(from);
}

void GetChunkRequest::SharedCtor() {
  _cached_size_ = 0;
  chunkname_ = const_cast< ::std::string*>(&_default_chunkname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetChunkRequest::~GetChunkRequest() {
  SharedDtor();
}

void GetChunkRequest::SharedDtor() {
  if (chunkname_ != &_default_chunkname_) {
    delete chunkname_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* GetChunkRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetChunkRequest_descriptor_;
}

const GetChunkRequest& GetChunkRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_5fservice_5fmessages_2eproto();  return *default_instance_;
}

GetChunkRequest* GetChunkRequest::default_instance_ = NULL;

GetChunkRequest* GetChunkRequest::New() const {
  return new GetChunkRequest;
}

void GetChunkRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (chunkname_ != &_default_chunkname_) {
        chunkname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetChunkRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required bytes chunkname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_chunkname()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetChunkRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    GetChunkRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required bytes chunkname = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(1, this->chunkname(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetChunkRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes chunkname = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(1, this->chunkname(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetChunkRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes chunkname = 1;
    if (has_chunkname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->chunkname());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void GetChunkRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetChunkRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetChunkRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetChunkRequest::MergeFrom(const GetChunkRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_chunkname(from.chunkname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetChunkRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetChunkRequest::CopyFrom(const GetChunkRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetChunkRequest::Swap(GetChunkRequest* other) {
  if (other != this) {
    std::swap(chunkname_, other->chunkname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool GetChunkRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* GetChunkRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* GetChunkRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return GetChunkRequest_reflection_;
}

// ===================================================================

const ::std::string GetChunkResponse::_default_content_;
const ::std::string GetChunkResponse::_default_pmid_;
#ifndef _MSC_VER
const int GetChunkResponse::kResultFieldNumber;
const int GetChunkResponse::kContentFieldNumber;
const int GetChunkResponse::kPmidFieldNumber;
#endif  // !_MSC_VER

GetChunkResponse::GetChunkResponse()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    result_(0u),
    content_(const_cast< ::std::string*>(&_default_content_)),
    pmid_(const_cast< ::std::string*>(&_default_pmid_)) {
  SharedCtor();
}

void GetChunkResponse::InitAsDefaultInstance() {}

GetChunkResponse::GetChunkResponse(const GetChunkResponse& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    result_(0u),
    content_(const_cast< ::std::string*>(&_default_content_)),
    pmid_(const_cast< ::std::string*>(&_default_pmid_)) {
  SharedCtor();
  MergeFrom(from);
}

void GetChunkResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  content_ = const_cast< ::std::string*>(&_default_content_);
  pmid_ = const_cast< ::std::string*>(&_default_pmid_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetChunkResponse::~GetChunkResponse() {
  SharedDtor();
}

void GetChunkResponse::SharedDtor() {
  if (content_ != &_default_content_) {
    delete content_;
  }
  if (pmid_ != &_default_pmid_) {
    delete pmid_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* GetChunkResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetChunkResponse_descriptor_;
}

const GetChunkResponse& GetChunkResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_5fservice_5fmessages_2eproto();  return *default_instance_;
}

GetChunkResponse* GetChunkResponse::default_instance_ = NULL;

GetChunkResponse* GetChunkResponse::New() const {
  return new GetChunkResponse;
}

void GetChunkResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    if (_has_bit(1)) {
      if (content_ != &_default_content_) {
        content_->clear();
      }
    }
    if (_has_bit(2)) {
      if (pmid_ != &_default_pmid_) {
        pmid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetChunkResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }
      
      // optional bytes content = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_content:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_content()));
        if (input->ExpectTag(26)) goto parse_pmid;
        break;
      }
      
      // optional bytes pmid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_pmid:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_pmid()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetChunkResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    GetChunkResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->result(), output);
  }
  
  // optional bytes content = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(2, this->content(), output);
  }
  
  // optional bytes pmid = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(3, this->pmid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetChunkResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->result(), target);
  }
  
  // optional bytes content = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(2, this->content(), target);
  }
  
  // optional bytes pmid = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(3, this->pmid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetChunkResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
    // optional bytes content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->content());
    }
    
    // optional bytes pmid = 3;
    if (has_pmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->pmid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void GetChunkResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetChunkResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetChunkResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetChunkResponse::MergeFrom(const GetChunkResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_result(from.result());
    }
    if (from._has_bit(1)) {
      set_content(from.content());
    }
    if (from._has_bit(2)) {
      set_pmid(from.pmid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetChunkResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetChunkResponse::CopyFrom(const GetChunkResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetChunkResponse::Swap(GetChunkResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(content_, other->content_);
    std::swap(pmid_, other->pmid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool GetChunkResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* GetChunkResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* GetChunkResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return GetChunkResponse_reflection_;
}

// ===================================================================

const ::std::string GetPacketRequest::_default_packetname_;
const ::std::string GetPacketRequest::_default_key_id_;
const ::std::string GetPacketRequest::_default_public_key_;
const ::std::string GetPacketRequest::_default_public_key_signature_;
const ::std::string GetPacketRequest::_default_request_signature_;
#ifndef _MSC_VER
const int GetPacketRequest::kPacketnameFieldNumber;
const int GetPacketRequest::kKeyIdFieldNumber;
const int GetPacketRequest::kPublicKeyFieldNumber;
const int GetPacketRequest::kPublicKeySignatureFieldNumber;
const int GetPacketRequest::kRequestSignatureFieldNumber;
#endif  // !_MSC_VER

GetPacketRequest::GetPacketRequest()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    packetname_(const_cast< ::std::string*>(&_default_packetname_)),
    key_id_(const_cast< ::std::string*>(&_default_key_id_)),
    public_key_(const_cast< ::std::string*>(&_default_public_key_)),
    public_key_signature_(const_cast< ::std::string*>(&_default_public_key_signature_)),
    request_signature_(const_cast< ::std::string*>(&_default_request_signature_)) {
  SharedCtor();
}

void GetPacketRequest::InitAsDefaultInstance() {}

GetPacketRequest::GetPacketRequest(const GetPacketRequest& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    packetname_(const_cast< ::std::string*>(&_default_packetname_)),
    key_id_(const_cast< ::std::string*>(&_default_key_id_)),
    public_key_(const_cast< ::std::string*>(&_default_public_key_)),
    public_key_signature_(const_cast< ::std::string*>(&_default_public_key_signature_)),
    request_signature_(const_cast< ::std::string*>(&_default_request_signature_)) {
  SharedCtor();
  MergeFrom(from);
}

void GetPacketRequest::SharedCtor() {
  _cached_size_ = 0;
  packetname_ = const_cast< ::std::string*>(&_default_packetname_);
  key_id_ = const_cast< ::std::string*>(&_default_key_id_);
  public_key_ = const_cast< ::std::string*>(&_default_public_key_);
  public_key_signature_ = const_cast< ::std::string*>(&_default_public_key_signature_);
  request_signature_ = const_cast< ::std::string*>(&_default_request_signature_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetPacketRequest::~GetPacketRequest() {
  SharedDtor();
}

void GetPacketRequest::SharedDtor() {
  if (packetname_ != &_default_packetname_) {
    delete packetname_;
  }
  if (key_id_ != &_default_key_id_) {
    delete key_id_;
  }
  if (public_key_ != &_default_public_key_) {
    delete public_key_;
  }
  if (public_key_signature_ != &_default_public_key_signature_) {
    delete public_key_signature_;
  }
  if (request_signature_ != &_default_request_signature_) {
    delete request_signature_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* GetPacketRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetPacketRequest_descriptor_;
}

const GetPacketRequest& GetPacketRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_5fservice_5fmessages_2eproto();  return *default_instance_;
}

GetPacketRequest* GetPacketRequest::default_instance_ = NULL;

GetPacketRequest* GetPacketRequest::New() const {
  return new GetPacketRequest;
}

void GetPacketRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (packetname_ != &_default_packetname_) {
        packetname_->clear();
      }
    }
    if (_has_bit(1)) {
      if (key_id_ != &_default_key_id_) {
        key_id_->clear();
      }
    }
    if (_has_bit(2)) {
      if (public_key_ != &_default_public_key_) {
        public_key_->clear();
      }
    }
    if (_has_bit(3)) {
      if (public_key_signature_ != &_default_public_key_signature_) {
        public_key_signature_->clear();
      }
    }
    if (_has_bit(4)) {
      if (request_signature_ != &_default_request_signature_) {
        request_signature_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetPacketRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required bytes packetname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_packetname()));
        if (input->ExpectTag(18)) goto parse_key_id;
        break;
      }
      
      // optional bytes key_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_key_id:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_key_id()));
        if (input->ExpectTag(26)) goto parse_public_key;
        break;
      }
      
      // optional bytes public_key = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_public_key:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_public_key()));
        if (input->ExpectTag(34)) goto parse_public_key_signature;
        break;
      }
      
      // optional bytes public_key_signature = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_public_key_signature:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_public_key_signature()));
        if (input->ExpectTag(42)) goto parse_request_signature;
        break;
      }
      
      // optional bytes request_signature = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_request_signature:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_request_signature()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetPacketRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    GetPacketRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required bytes packetname = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(1, this->packetname(), output);
  }
  
  // optional bytes key_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(2, this->key_id(), output);
  }
  
  // optional bytes public_key = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(3, this->public_key(), output);
  }
  
  // optional bytes public_key_signature = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(4, this->public_key_signature(), output);
  }
  
  // optional bytes request_signature = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(5, this->request_signature(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetPacketRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes packetname = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(1, this->packetname(), target);
  }
  
  // optional bytes key_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(2, this->key_id(), target);
  }
  
  // optional bytes public_key = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(3, this->public_key(), target);
  }
  
  // optional bytes public_key_signature = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(4, this->public_key_signature(), target);
  }
  
  // optional bytes request_signature = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(5, this->request_signature(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetPacketRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes packetname = 1;
    if (has_packetname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->packetname());
    }
    
    // optional bytes key_id = 2;
    if (has_key_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->key_id());
    }
    
    // optional bytes public_key = 3;
    if (has_public_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->public_key());
    }
    
    // optional bytes public_key_signature = 4;
    if (has_public_key_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->public_key_signature());
    }
    
    // optional bytes request_signature = 5;
    if (has_request_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->request_signature());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void GetPacketRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetPacketRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetPacketRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetPacketRequest::MergeFrom(const GetPacketRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_packetname(from.packetname());
    }
    if (from._has_bit(1)) {
      set_key_id(from.key_id());
    }
    if (from._has_bit(2)) {
      set_public_key(from.public_key());
    }
    if (from._has_bit(3)) {
      set_public_key_signature(from.public_key_signature());
    }
    if (from._has_bit(4)) {
      set_request_signature(from.request_signature());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetPacketRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPacketRequest::CopyFrom(const GetPacketRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPacketRequest::Swap(GetPacketRequest* other) {
  if (other != this) {
    std::swap(packetname_, other->packetname_);
    std::swap(key_id_, other->key_id_);
    std::swap(public_key_, other->public_key_);
    std::swap(public_key_signature_, other->public_key_signature_);
    std::swap(request_signature_, other->request_signature_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool GetPacketRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* GetPacketRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* GetPacketRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return GetPacketRequest_reflection_;
}

// ===================================================================

const ::std::string GetPacketResponse::_default_pmid_;
#ifndef _MSC_VER
const int GetPacketResponse::kResultFieldNumber;
const int GetPacketResponse::kContentFieldNumber;
const int GetPacketResponse::kPmidFieldNumber;
#endif  // !_MSC_VER

GetPacketResponse::GetPacketResponse()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    result_(0u),
    content_(),
    pmid_(const_cast< ::std::string*>(&_default_pmid_)) {
  SharedCtor();
}

void GetPacketResponse::InitAsDefaultInstance() {}

GetPacketResponse::GetPacketResponse(const GetPacketResponse& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    result_(0u),
    content_(),
    pmid_(const_cast< ::std::string*>(&_default_pmid_)) {
  SharedCtor();
  MergeFrom(from);
}

void GetPacketResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  pmid_ = const_cast< ::std::string*>(&_default_pmid_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetPacketResponse::~GetPacketResponse() {
  SharedDtor();
}

void GetPacketResponse::SharedDtor() {
  if (pmid_ != &_default_pmid_) {
    delete pmid_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* GetPacketResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetPacketResponse_descriptor_;
}

const GetPacketResponse& GetPacketResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_5fservice_5fmessages_2eproto();  return *default_instance_;
}

GetPacketResponse* GetPacketResponse::default_instance_ = NULL;

GetPacketResponse* GetPacketResponse::New() const {
  return new GetPacketResponse;
}

void GetPacketResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    if (_has_bit(2)) {
      if (pmid_ != &_default_pmid_) {
        pmid_->clear();
      }
    }
  }
  content_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetPacketResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }
      
      // repeated .maidsafe.GenericPacket content = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_content:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_content()));
        if (input->ExpectTag(18)) goto parse_content;
        if (input->ExpectTag(26)) goto parse_pmid;
        break;
      }
      
      // optional bytes pmid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_pmid:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_pmid()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetPacketResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    GetPacketResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->result(), output);
  }
  
  // repeated .maidsafe.GenericPacket content = 2;
  for (int i = 0; i < this->content_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->content(i), output);
  }
  
  // optional bytes pmid = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(3, this->pmid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetPacketResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->result(), target);
  }
  
  // repeated .maidsafe.GenericPacket content = 2;
  for (int i = 0; i < this->content_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->content(i), target);
  }
  
  // optional bytes pmid = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(3, this->pmid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetPacketResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
    // optional bytes pmid = 3;
    if (has_pmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->pmid());
    }
    
  }
  // repeated .maidsafe.GenericPacket content = 2;
  total_size += 1 * this->content_size();
  for (int i = 0; i < this->content_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->content(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void GetPacketResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetPacketResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetPacketResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetPacketResponse::MergeFrom(const GetPacketResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  content_.MergeFrom(from.content_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_result(from.result());
    }
    if (from._has_bit(2)) {
      set_pmid(from.pmid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetPacketResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPacketResponse::CopyFrom(const GetPacketResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPacketResponse::Swap(GetPacketResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    content_.Swap(&other->content_);
    std::swap(pmid_, other->pmid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool GetPacketResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < content_size(); i++) {
    if (!this->content(i).IsInitialized()) return false;
  }
  return true;
}

const ::google::protobuf::Descriptor* GetPacketResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* GetPacketResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return GetPacketResponse_reflection_;
}

// ===================================================================

const ::std::string UpdateChunkRequest::_default_chunkname_;
const ::std::string UpdateChunkRequest::_default_data_;
const ::std::string UpdateChunkRequest::_default_pmid_;
const ::std::string UpdateChunkRequest::_default_public_key_;
const ::std::string UpdateChunkRequest::_default_public_key_signature_;
const ::std::string UpdateChunkRequest::_default_request_signature_;
#ifndef _MSC_VER
const int UpdateChunkRequest::kChunknameFieldNumber;
const int UpdateChunkRequest::kDataFieldNumber;
const int UpdateChunkRequest::kPmidFieldNumber;
const int UpdateChunkRequest::kPublicKeyFieldNumber;
const int UpdateChunkRequest::kPublicKeySignatureFieldNumber;
const int UpdateChunkRequest::kRequestSignatureFieldNumber;
const int UpdateChunkRequest::kDataTypeFieldNumber;
#endif  // !_MSC_VER

UpdateChunkRequest::UpdateChunkRequest()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    chunkname_(const_cast< ::std::string*>(&_default_chunkname_)),
    data_(const_cast< ::std::string*>(&_default_data_)),
    pmid_(const_cast< ::std::string*>(&_default_pmid_)),
    public_key_(const_cast< ::std::string*>(&_default_public_key_)),
    public_key_signature_(const_cast< ::std::string*>(&_default_public_key_signature_)),
    request_signature_(const_cast< ::std::string*>(&_default_request_signature_)),
    data_type_(0) {
  SharedCtor();
}

void UpdateChunkRequest::InitAsDefaultInstance() {}

UpdateChunkRequest::UpdateChunkRequest(const UpdateChunkRequest& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    chunkname_(const_cast< ::std::string*>(&_default_chunkname_)),
    data_(const_cast< ::std::string*>(&_default_data_)),
    pmid_(const_cast< ::std::string*>(&_default_pmid_)),
    public_key_(const_cast< ::std::string*>(&_default_public_key_)),
    public_key_signature_(const_cast< ::std::string*>(&_default_public_key_signature_)),
    request_signature_(const_cast< ::std::string*>(&_default_request_signature_)),
    data_type_(0) {
  SharedCtor();
  MergeFrom(from);
}

void UpdateChunkRequest::SharedCtor() {
  _cached_size_ = 0;
  chunkname_ = const_cast< ::std::string*>(&_default_chunkname_);
  data_ = const_cast< ::std::string*>(&_default_data_);
  pmid_ = const_cast< ::std::string*>(&_default_pmid_);
  public_key_ = const_cast< ::std::string*>(&_default_public_key_);
  public_key_signature_ = const_cast< ::std::string*>(&_default_public_key_signature_);
  request_signature_ = const_cast< ::std::string*>(&_default_request_signature_);
  data_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateChunkRequest::~UpdateChunkRequest() {
  SharedDtor();
}

void UpdateChunkRequest::SharedDtor() {
  if (chunkname_ != &_default_chunkname_) {
    delete chunkname_;
  }
  if (data_ != &_default_data_) {
    delete data_;
  }
  if (pmid_ != &_default_pmid_) {
    delete pmid_;
  }
  if (public_key_ != &_default_public_key_) {
    delete public_key_;
  }
  if (public_key_signature_ != &_default_public_key_signature_) {
    delete public_key_signature_;
  }
  if (request_signature_ != &_default_request_signature_) {
    delete request_signature_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* UpdateChunkRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateChunkRequest_descriptor_;
}

const UpdateChunkRequest& UpdateChunkRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_5fservice_5fmessages_2eproto();  return *default_instance_;
}

UpdateChunkRequest* UpdateChunkRequest::default_instance_ = NULL;

UpdateChunkRequest* UpdateChunkRequest::New() const {
  return new UpdateChunkRequest;
}

void UpdateChunkRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (chunkname_ != &_default_chunkname_) {
        chunkname_->clear();
      }
    }
    if (_has_bit(1)) {
      if (data_ != &_default_data_) {
        data_->clear();
      }
    }
    if (_has_bit(2)) {
      if (pmid_ != &_default_pmid_) {
        pmid_->clear();
      }
    }
    if (_has_bit(3)) {
      if (public_key_ != &_default_public_key_) {
        public_key_->clear();
      }
    }
    if (_has_bit(4)) {
      if (public_key_signature_ != &_default_public_key_signature_) {
        public_key_signature_->clear();
      }
    }
    if (_has_bit(5)) {
      if (request_signature_ != &_default_request_signature_) {
        request_signature_->clear();
      }
    }
    data_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateChunkRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required bytes chunkname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_chunkname()));
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }
      
      // required bytes data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_data:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_data()));
        if (input->ExpectTag(26)) goto parse_pmid;
        break;
      }
      
      // required bytes pmid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_pmid:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_pmid()));
        if (input->ExpectTag(34)) goto parse_public_key;
        break;
      }
      
      // required bytes public_key = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_public_key:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_public_key()));
        if (input->ExpectTag(42)) goto parse_public_key_signature;
        break;
      }
      
      // required bytes public_key_signature = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_public_key_signature:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_public_key_signature()));
        if (input->ExpectTag(50)) goto parse_request_signature;
        break;
      }
      
      // required bytes request_signature = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_request_signature:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_request_signature()));
        if (input->ExpectTag(56)) goto parse_data_type;
        break;
      }
      
      // required int32 data_type = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_data_type:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &data_type_));
        _set_bit(6);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateChunkRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    UpdateChunkRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required bytes chunkname = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(1, this->chunkname(), output);
  }
  
  // required bytes data = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(2, this->data(), output);
  }
  
  // required bytes pmid = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(3, this->pmid(), output);
  }
  
  // required bytes public_key = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(4, this->public_key(), output);
  }
  
  // required bytes public_key_signature = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(5, this->public_key_signature(), output);
  }
  
  // required bytes request_signature = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(6, this->request_signature(), output);
  }
  
  // required int32 data_type = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(7, this->data_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateChunkRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes chunkname = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(1, this->chunkname(), target);
  }
  
  // required bytes data = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(2, this->data(), target);
  }
  
  // required bytes pmid = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(3, this->pmid(), target);
  }
  
  // required bytes public_key = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(4, this->public_key(), target);
  }
  
  // required bytes public_key_signature = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(5, this->public_key_signature(), target);
  }
  
  // required bytes request_signature = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(6, this->request_signature(), target);
  }
  
  // required int32 data_type = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(7, this->data_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateChunkRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes chunkname = 1;
    if (has_chunkname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->chunkname());
    }
    
    // required bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->data());
    }
    
    // required bytes pmid = 3;
    if (has_pmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->pmid());
    }
    
    // required bytes public_key = 4;
    if (has_public_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->public_key());
    }
    
    // required bytes public_key_signature = 5;
    if (has_public_key_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->public_key_signature());
    }
    
    // required bytes request_signature = 6;
    if (has_request_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->request_signature());
    }
    
    // required int32 data_type = 7;
    if (has_data_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->data_type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void UpdateChunkRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateChunkRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateChunkRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateChunkRequest::MergeFrom(const UpdateChunkRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_chunkname(from.chunkname());
    }
    if (from._has_bit(1)) {
      set_data(from.data());
    }
    if (from._has_bit(2)) {
      set_pmid(from.pmid());
    }
    if (from._has_bit(3)) {
      set_public_key(from.public_key());
    }
    if (from._has_bit(4)) {
      set_public_key_signature(from.public_key_signature());
    }
    if (from._has_bit(5)) {
      set_request_signature(from.request_signature());
    }
    if (from._has_bit(6)) {
      set_data_type(from.data_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateChunkRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateChunkRequest::CopyFrom(const UpdateChunkRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateChunkRequest::Swap(UpdateChunkRequest* other) {
  if (other != this) {
    std::swap(chunkname_, other->chunkname_);
    std::swap(data_, other->data_);
    std::swap(pmid_, other->pmid_);
    std::swap(public_key_, other->public_key_);
    std::swap(public_key_signature_, other->public_key_signature_);
    std::swap(request_signature_, other->request_signature_);
    std::swap(data_type_, other->data_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool UpdateChunkRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* UpdateChunkRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* UpdateChunkRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return UpdateChunkRequest_reflection_;
}

// ===================================================================

const ::std::string UpdateChunkResponse::_default_pmid_;
#ifndef _MSC_VER
const int UpdateChunkResponse::kResultFieldNumber;
const int UpdateChunkResponse::kPmidFieldNumber;
#endif  // !_MSC_VER

UpdateChunkResponse::UpdateChunkResponse()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    result_(0u),
    pmid_(const_cast< ::std::string*>(&_default_pmid_)) {
  SharedCtor();
}

void UpdateChunkResponse::InitAsDefaultInstance() {}

UpdateChunkResponse::UpdateChunkResponse(const UpdateChunkResponse& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    result_(0u),
    pmid_(const_cast< ::std::string*>(&_default_pmid_)) {
  SharedCtor();
  MergeFrom(from);
}

void UpdateChunkResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  pmid_ = const_cast< ::std::string*>(&_default_pmid_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateChunkResponse::~UpdateChunkResponse() {
  SharedDtor();
}

void UpdateChunkResponse::SharedDtor() {
  if (pmid_ != &_default_pmid_) {
    delete pmid_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* UpdateChunkResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateChunkResponse_descriptor_;
}

const UpdateChunkResponse& UpdateChunkResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_5fservice_5fmessages_2eproto();  return *default_instance_;
}

UpdateChunkResponse* UpdateChunkResponse::default_instance_ = NULL;

UpdateChunkResponse* UpdateChunkResponse::New() const {
  return new UpdateChunkResponse;
}

void UpdateChunkResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    if (_has_bit(1)) {
      if (pmid_ != &_default_pmid_) {
        pmid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateChunkResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_pmid;
        break;
      }
      
      // optional bytes pmid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_pmid:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_pmid()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateChunkResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    UpdateChunkResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->result(), output);
  }
  
  // optional bytes pmid = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(2, this->pmid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateChunkResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->result(), target);
  }
  
  // optional bytes pmid = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(2, this->pmid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateChunkResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
    // optional bytes pmid = 2;
    if (has_pmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->pmid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void UpdateChunkResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateChunkResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateChunkResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateChunkResponse::MergeFrom(const UpdateChunkResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_result(from.result());
    }
    if (from._has_bit(1)) {
      set_pmid(from.pmid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateChunkResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateChunkResponse::CopyFrom(const UpdateChunkResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateChunkResponse::Swap(UpdateChunkResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(pmid_, other->pmid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool UpdateChunkResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* UpdateChunkResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* UpdateChunkResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return UpdateChunkResponse_reflection_;
}

// ===================================================================

const ::std::string DeleteChunkRequest::_default_chunkname_;
const ::std::string DeleteChunkRequest::_default_request_signature_;
#ifndef _MSC_VER
const int DeleteChunkRequest::kChunknameFieldNumber;
const int DeleteChunkRequest::kSignedSizeFieldNumber;
const int DeleteChunkRequest::kRequestSignatureFieldNumber;
const int DeleteChunkRequest::kDataTypeFieldNumber;
#endif  // !_MSC_VER

DeleteChunkRequest::DeleteChunkRequest()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    chunkname_(const_cast< ::std::string*>(&_default_chunkname_)),
    signed_size_(NULL),
    request_signature_(const_cast< ::std::string*>(&_default_request_signature_)),
    data_type_(0) {
  SharedCtor();
}

void DeleteChunkRequest::InitAsDefaultInstance() {  signed_size_ = const_cast< ::maidsafe::SignedSize*>(&::maidsafe::SignedSize::default_instance());
}

DeleteChunkRequest::DeleteChunkRequest(const DeleteChunkRequest& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    chunkname_(const_cast< ::std::string*>(&_default_chunkname_)),
    signed_size_(NULL),
    request_signature_(const_cast< ::std::string*>(&_default_request_signature_)),
    data_type_(0) {
  SharedCtor();
  MergeFrom(from);
}

void DeleteChunkRequest::SharedCtor() {
  _cached_size_ = 0;
  chunkname_ = const_cast< ::std::string*>(&_default_chunkname_);
  signed_size_ = NULL;
  request_signature_ = const_cast< ::std::string*>(&_default_request_signature_);
  data_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteChunkRequest::~DeleteChunkRequest() {
  SharedDtor();
}

void DeleteChunkRequest::SharedDtor() {
  if (chunkname_ != &_default_chunkname_) {
    delete chunkname_;
  }
  if (request_signature_ != &_default_request_signature_) {
    delete request_signature_;
  }
  if (this != default_instance_) {
    delete signed_size_;
  }
}

const ::google::protobuf::Descriptor* DeleteChunkRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteChunkRequest_descriptor_;
}

const DeleteChunkRequest& DeleteChunkRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_5fservice_5fmessages_2eproto();  return *default_instance_;
}

DeleteChunkRequest* DeleteChunkRequest::default_instance_ = NULL;

DeleteChunkRequest* DeleteChunkRequest::New() const {
  return new DeleteChunkRequest;
}

void DeleteChunkRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (chunkname_ != &_default_chunkname_) {
        chunkname_->clear();
      }
    }
    if (_has_bit(1)) {
      if (signed_size_ != NULL) signed_size_->::maidsafe::SignedSize::Clear();
    }
    if (_has_bit(2)) {
      if (request_signature_ != &_default_request_signature_) {
        request_signature_->clear();
      }
    }
    data_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteChunkRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required bytes chunkname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_chunkname()));
        if (input->ExpectTag(18)) goto parse_signed_size;
        break;
      }
      
      // required .maidsafe.SignedSize signed_size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_signed_size:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, mutable_signed_size()));
        if (input->ExpectTag(26)) goto parse_request_signature;
        break;
      }
      
      // required bytes request_signature = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_request_signature:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_request_signature()));
        if (input->ExpectTag(32)) goto parse_data_type;
        break;
      }
      
      // required int32 data_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_data_type:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &data_type_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeleteChunkRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DeleteChunkRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required bytes chunkname = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(1, this->chunkname(), output);
  }
  
  // required .maidsafe.SignedSize signed_size = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(2, this->signed_size(), output);
  }
  
  // required bytes request_signature = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(3, this->request_signature(), output);
  }
  
  // required int32 data_type = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(4, this->data_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeleteChunkRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes chunkname = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(1, this->chunkname(), target);
  }
  
  // required .maidsafe.SignedSize signed_size = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(2, this->signed_size(), target);
  }
  
  // required bytes request_signature = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(3, this->request_signature(), target);
  }
  
  // required int32 data_type = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(4, this->data_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeleteChunkRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes chunkname = 1;
    if (has_chunkname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->chunkname());
    }
    
    // required .maidsafe.SignedSize signed_size = 2;
    if (has_signed_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
          this->signed_size());
    }
    
    // required bytes request_signature = 3;
    if (has_request_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->request_signature());
    }
    
    // required int32 data_type = 4;
    if (has_data_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->data_type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DeleteChunkRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteChunkRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteChunkRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteChunkRequest::MergeFrom(const DeleteChunkRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_chunkname(from.chunkname());
    }
    if (from._has_bit(1)) {
      mutable_signed_size()->::maidsafe::SignedSize::MergeFrom(from.signed_size());
    }
    if (from._has_bit(2)) {
      set_request_signature(from.request_signature());
    }
    if (from._has_bit(3)) {
      set_data_type(from.data_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteChunkRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteChunkRequest::CopyFrom(const DeleteChunkRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteChunkRequest::Swap(DeleteChunkRequest* other) {
  if (other != this) {
    std::swap(chunkname_, other->chunkname_);
    std::swap(signed_size_, other->signed_size_);
    std::swap(request_signature_, other->request_signature_);
    std::swap(data_type_, other->data_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool DeleteChunkRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  if (has_signed_size()) {
    if (!this->signed_size().IsInitialized()) return false;
  }
  return true;
}

const ::google::protobuf::Descriptor* DeleteChunkRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* DeleteChunkRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return DeleteChunkRequest_reflection_;
}

// ===================================================================

const ::std::string DeleteChunkResponse::_default_pmid_;
#ifndef _MSC_VER
const int DeleteChunkResponse::kResultFieldNumber;
const int DeleteChunkResponse::kPmidFieldNumber;
#endif  // !_MSC_VER

DeleteChunkResponse::DeleteChunkResponse()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    result_(0u),
    pmid_(const_cast< ::std::string*>(&_default_pmid_)) {
  SharedCtor();
}

void DeleteChunkResponse::InitAsDefaultInstance() {}

DeleteChunkResponse::DeleteChunkResponse(const DeleteChunkResponse& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    result_(0u),
    pmid_(const_cast< ::std::string*>(&_default_pmid_)) {
  SharedCtor();
  MergeFrom(from);
}

void DeleteChunkResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  pmid_ = const_cast< ::std::string*>(&_default_pmid_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteChunkResponse::~DeleteChunkResponse() {
  SharedDtor();
}

void DeleteChunkResponse::SharedDtor() {
  if (pmid_ != &_default_pmid_) {
    delete pmid_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DeleteChunkResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteChunkResponse_descriptor_;
}

const DeleteChunkResponse& DeleteChunkResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_5fservice_5fmessages_2eproto();  return *default_instance_;
}

DeleteChunkResponse* DeleteChunkResponse::default_instance_ = NULL;

DeleteChunkResponse* DeleteChunkResponse::New() const {
  return new DeleteChunkResponse;
}

void DeleteChunkResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    if (_has_bit(1)) {
      if (pmid_ != &_default_pmid_) {
        pmid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteChunkResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_pmid;
        break;
      }
      
      // optional bytes pmid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_pmid:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_pmid()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeleteChunkResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DeleteChunkResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->result(), output);
  }
  
  // optional bytes pmid = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(2, this->pmid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeleteChunkResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->result(), target);
  }
  
  // optional bytes pmid = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(2, this->pmid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeleteChunkResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
    // optional bytes pmid = 2;
    if (has_pmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->pmid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DeleteChunkResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteChunkResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteChunkResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteChunkResponse::MergeFrom(const DeleteChunkResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_result(from.result());
    }
    if (from._has_bit(1)) {
      set_pmid(from.pmid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteChunkResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteChunkResponse::CopyFrom(const DeleteChunkResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteChunkResponse::Swap(DeleteChunkResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(pmid_, other->pmid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool DeleteChunkResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* DeleteChunkResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* DeleteChunkResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return DeleteChunkResponse_reflection_;
}

// ===================================================================

const ::std::string ValidityCheckRequest::_default_chunkname_;
const ::std::string ValidityCheckRequest::_default_random_data_;
#ifndef _MSC_VER
const int ValidityCheckRequest::kChunknameFieldNumber;
const int ValidityCheckRequest::kRandomDataFieldNumber;
#endif  // !_MSC_VER

ValidityCheckRequest::ValidityCheckRequest()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    chunkname_(const_cast< ::std::string*>(&_default_chunkname_)),
    random_data_(const_cast< ::std::string*>(&_default_random_data_)) {
  SharedCtor();
}

void ValidityCheckRequest::InitAsDefaultInstance() {}

ValidityCheckRequest::ValidityCheckRequest(const ValidityCheckRequest& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    chunkname_(const_cast< ::std::string*>(&_default_chunkname_)),
    random_data_(const_cast< ::std::string*>(&_default_random_data_)) {
  SharedCtor();
  MergeFrom(from);
}

void ValidityCheckRequest::SharedCtor() {
  _cached_size_ = 0;
  chunkname_ = const_cast< ::std::string*>(&_default_chunkname_);
  random_data_ = const_cast< ::std::string*>(&_default_random_data_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ValidityCheckRequest::~ValidityCheckRequest() {
  SharedDtor();
}

void ValidityCheckRequest::SharedDtor() {
  if (chunkname_ != &_default_chunkname_) {
    delete chunkname_;
  }
  if (random_data_ != &_default_random_data_) {
    delete random_data_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* ValidityCheckRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ValidityCheckRequest_descriptor_;
}

const ValidityCheckRequest& ValidityCheckRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_5fservice_5fmessages_2eproto();  return *default_instance_;
}

ValidityCheckRequest* ValidityCheckRequest::default_instance_ = NULL;

ValidityCheckRequest* ValidityCheckRequest::New() const {
  return new ValidityCheckRequest;
}

void ValidityCheckRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (chunkname_ != &_default_chunkname_) {
        chunkname_->clear();
      }
    }
    if (_has_bit(1)) {
      if (random_data_ != &_default_random_data_) {
        random_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ValidityCheckRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required bytes chunkname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_chunkname()));
        if (input->ExpectTag(18)) goto parse_random_data;
        break;
      }
      
      // required bytes random_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_random_data:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_random_data()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ValidityCheckRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    ValidityCheckRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required bytes chunkname = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(1, this->chunkname(), output);
  }
  
  // required bytes random_data = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(2, this->random_data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ValidityCheckRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes chunkname = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(1, this->chunkname(), target);
  }
  
  // required bytes random_data = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(2, this->random_data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ValidityCheckRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes chunkname = 1;
    if (has_chunkname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->chunkname());
    }
    
    // required bytes random_data = 2;
    if (has_random_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->random_data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void ValidityCheckRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ValidityCheckRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ValidityCheckRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ValidityCheckRequest::MergeFrom(const ValidityCheckRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_chunkname(from.chunkname());
    }
    if (from._has_bit(1)) {
      set_random_data(from.random_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ValidityCheckRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ValidityCheckRequest::CopyFrom(const ValidityCheckRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ValidityCheckRequest::Swap(ValidityCheckRequest* other) {
  if (other != this) {
    std::swap(chunkname_, other->chunkname_);
    std::swap(random_data_, other->random_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool ValidityCheckRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* ValidityCheckRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* ValidityCheckRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return ValidityCheckRequest_reflection_;
}

// ===================================================================

const ::std::string ValidityCheckResponse::_default_hash_content_;
const ::std::string ValidityCheckResponse::_default_pmid_;
#ifndef _MSC_VER
const int ValidityCheckResponse::kResultFieldNumber;
const int ValidityCheckResponse::kHashContentFieldNumber;
const int ValidityCheckResponse::kPmidFieldNumber;
#endif  // !_MSC_VER

ValidityCheckResponse::ValidityCheckResponse()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    result_(0u),
    hash_content_(const_cast< ::std::string*>(&_default_hash_content_)),
    pmid_(const_cast< ::std::string*>(&_default_pmid_)) {
  SharedCtor();
}

void ValidityCheckResponse::InitAsDefaultInstance() {}

ValidityCheckResponse::ValidityCheckResponse(const ValidityCheckResponse& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    result_(0u),
    hash_content_(const_cast< ::std::string*>(&_default_hash_content_)),
    pmid_(const_cast< ::std::string*>(&_default_pmid_)) {
  SharedCtor();
  MergeFrom(from);
}

void ValidityCheckResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  hash_content_ = const_cast< ::std::string*>(&_default_hash_content_);
  pmid_ = const_cast< ::std::string*>(&_default_pmid_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ValidityCheckResponse::~ValidityCheckResponse() {
  SharedDtor();
}

void ValidityCheckResponse::SharedDtor() {
  if (hash_content_ != &_default_hash_content_) {
    delete hash_content_;
  }
  if (pmid_ != &_default_pmid_) {
    delete pmid_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* ValidityCheckResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ValidityCheckResponse_descriptor_;
}

const ValidityCheckResponse& ValidityCheckResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_5fservice_5fmessages_2eproto();  return *default_instance_;
}

ValidityCheckResponse* ValidityCheckResponse::default_instance_ = NULL;

ValidityCheckResponse* ValidityCheckResponse::New() const {
  return new ValidityCheckResponse;
}

void ValidityCheckResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    if (_has_bit(1)) {
      if (hash_content_ != &_default_hash_content_) {
        hash_content_->clear();
      }
    }
    if (_has_bit(2)) {
      if (pmid_ != &_default_pmid_) {
        pmid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ValidityCheckResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_hash_content;
        break;
      }
      
      // optional bytes hash_content = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_hash_content:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_hash_content()));
        if (input->ExpectTag(26)) goto parse_pmid;
        break;
      }
      
      // required bytes pmid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_pmid:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_pmid()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ValidityCheckResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    ValidityCheckResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->result(), output);
  }
  
  // optional bytes hash_content = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(2, this->hash_content(), output);
  }
  
  // required bytes pmid = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(3, this->pmid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ValidityCheckResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->result(), target);
  }
  
  // optional bytes hash_content = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(2, this->hash_content(), target);
  }
  
  // required bytes pmid = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(3, this->pmid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ValidityCheckResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
    // optional bytes hash_content = 2;
    if (has_hash_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->hash_content());
    }
    
    // required bytes pmid = 3;
    if (has_pmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->pmid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void ValidityCheckResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ValidityCheckResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ValidityCheckResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ValidityCheckResponse::MergeFrom(const ValidityCheckResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_result(from.result());
    }
    if (from._has_bit(1)) {
      set_hash_content(from.hash_content());
    }
    if (from._has_bit(2)) {
      set_pmid(from.pmid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ValidityCheckResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ValidityCheckResponse::CopyFrom(const ValidityCheckResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ValidityCheckResponse::Swap(ValidityCheckResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(hash_content_, other->hash_content_);
    std::swap(pmid_, other->pmid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool ValidityCheckResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* ValidityCheckResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* ValidityCheckResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return ValidityCheckResponse_reflection_;
}

// ===================================================================

const ::std::string SwapChunkRequest::_default_chunkname1_;
const ::std::string SwapChunkRequest::_default_chunkcontent1_;
const ::std::string SwapChunkRequest::_default_chunkname2_;
#ifndef _MSC_VER
const int SwapChunkRequest::kRequestTypeFieldNumber;
const int SwapChunkRequest::kChunkname1FieldNumber;
const int SwapChunkRequest::kChunkcontent1FieldNumber;
const int SwapChunkRequest::kSize1FieldNumber;
const int SwapChunkRequest::kChunkname2FieldNumber;
#endif  // !_MSC_VER

SwapChunkRequest::SwapChunkRequest()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    request_type_(0),
    chunkname1_(const_cast< ::std::string*>(&_default_chunkname1_)),
    chunkcontent1_(const_cast< ::std::string*>(&_default_chunkcontent1_)),
    size1_(0),
    chunkname2_(const_cast< ::std::string*>(&_default_chunkname2_)) {
  SharedCtor();
}

void SwapChunkRequest::InitAsDefaultInstance() {}

SwapChunkRequest::SwapChunkRequest(const SwapChunkRequest& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    request_type_(0),
    chunkname1_(const_cast< ::std::string*>(&_default_chunkname1_)),
    chunkcontent1_(const_cast< ::std::string*>(&_default_chunkcontent1_)),
    size1_(0),
    chunkname2_(const_cast< ::std::string*>(&_default_chunkname2_)) {
  SharedCtor();
  MergeFrom(from);
}

void SwapChunkRequest::SharedCtor() {
  _cached_size_ = 0;
  request_type_ = 0;
  chunkname1_ = const_cast< ::std::string*>(&_default_chunkname1_);
  chunkcontent1_ = const_cast< ::std::string*>(&_default_chunkcontent1_);
  size1_ = 0;
  chunkname2_ = const_cast< ::std::string*>(&_default_chunkname2_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SwapChunkRequest::~SwapChunkRequest() {
  SharedDtor();
}

void SwapChunkRequest::SharedDtor() {
  if (chunkname1_ != &_default_chunkname1_) {
    delete chunkname1_;
  }
  if (chunkcontent1_ != &_default_chunkcontent1_) {
    delete chunkcontent1_;
  }
  if (chunkname2_ != &_default_chunkname2_) {
    delete chunkname2_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* SwapChunkRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SwapChunkRequest_descriptor_;
}

const SwapChunkRequest& SwapChunkRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_5fservice_5fmessages_2eproto();  return *default_instance_;
}

SwapChunkRequest* SwapChunkRequest::default_instance_ = NULL;

SwapChunkRequest* SwapChunkRequest::New() const {
  return new SwapChunkRequest;
}

void SwapChunkRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    request_type_ = 0;
    if (_has_bit(1)) {
      if (chunkname1_ != &_default_chunkname1_) {
        chunkname1_->clear();
      }
    }
    if (_has_bit(2)) {
      if (chunkcontent1_ != &_default_chunkcontent1_) {
        chunkcontent1_->clear();
      }
    }
    size1_ = 0;
    if (_has_bit(4)) {
      if (chunkname2_ != &_default_chunkname2_) {
        chunkname2_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SwapChunkRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required int32 request_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &request_type_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_chunkname1;
        break;
      }
      
      // required bytes chunkname1 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_chunkname1:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_chunkname1()));
        if (input->ExpectTag(26)) goto parse_chunkcontent1;
        break;
      }
      
      // optional bytes chunkcontent1 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_chunkcontent1:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_chunkcontent1()));
        if (input->ExpectTag(32)) goto parse_size1;
        break;
      }
      
      // optional int32 size1 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_size1:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &size1_));
        _set_bit(3);
        if (input->ExpectTag(42)) goto parse_chunkname2;
        break;
      }
      
      // optional bytes chunkname2 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_chunkname2:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_chunkname2()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SwapChunkRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    SwapChunkRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 request_type = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(1, this->request_type(), output);
  }
  
  // required bytes chunkname1 = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(2, this->chunkname1(), output);
  }
  
  // optional bytes chunkcontent1 = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(3, this->chunkcontent1(), output);
  }
  
  // optional int32 size1 = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(4, this->size1(), output);
  }
  
  // optional bytes chunkname2 = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(5, this->chunkname2(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SwapChunkRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 request_type = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(1, this->request_type(), target);
  }
  
  // required bytes chunkname1 = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(2, this->chunkname1(), target);
  }
  
  // optional bytes chunkcontent1 = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(3, this->chunkcontent1(), target);
  }
  
  // optional int32 size1 = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(4, this->size1(), target);
  }
  
  // optional bytes chunkname2 = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(5, this->chunkname2(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SwapChunkRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 request_type = 1;
    if (has_request_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->request_type());
    }
    
    // required bytes chunkname1 = 2;
    if (has_chunkname1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->chunkname1());
    }
    
    // optional bytes chunkcontent1 = 3;
    if (has_chunkcontent1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->chunkcontent1());
    }
    
    // optional int32 size1 = 4;
    if (has_size1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->size1());
    }
    
    // optional bytes chunkname2 = 5;
    if (has_chunkname2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->chunkname2());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void SwapChunkRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SwapChunkRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SwapChunkRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SwapChunkRequest::MergeFrom(const SwapChunkRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_request_type(from.request_type());
    }
    if (from._has_bit(1)) {
      set_chunkname1(from.chunkname1());
    }
    if (from._has_bit(2)) {
      set_chunkcontent1(from.chunkcontent1());
    }
    if (from._has_bit(3)) {
      set_size1(from.size1());
    }
    if (from._has_bit(4)) {
      set_chunkname2(from.chunkname2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SwapChunkRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SwapChunkRequest::CopyFrom(const SwapChunkRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SwapChunkRequest::Swap(SwapChunkRequest* other) {
  if (other != this) {
    std::swap(request_type_, other->request_type_);
    std::swap(chunkname1_, other->chunkname1_);
    std::swap(chunkcontent1_, other->chunkcontent1_);
    std::swap(size1_, other->size1_);
    std::swap(chunkname2_, other->chunkname2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool SwapChunkRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* SwapChunkRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* SwapChunkRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return SwapChunkRequest_reflection_;
}

// ===================================================================

const ::std::string SwapChunkResponse::_default_chunkname1_;
const ::std::string SwapChunkResponse::_default_chunkcontent1_;
const ::std::string SwapChunkResponse::_default_chunkname2_;
const ::std::string SwapChunkResponse::_default_chunkcontent2_;
const ::std::string SwapChunkResponse::_default_pmid_;
#ifndef _MSC_VER
const int SwapChunkResponse::kRequestTypeFieldNumber;
const int SwapChunkResponse::kResultFieldNumber;
const int SwapChunkResponse::kChunkname1FieldNumber;
const int SwapChunkResponse::kChunkcontent1FieldNumber;
const int SwapChunkResponse::kSize1FieldNumber;
const int SwapChunkResponse::kChunkname2FieldNumber;
const int SwapChunkResponse::kChunkcontent2FieldNumber;
const int SwapChunkResponse::kSize2FieldNumber;
const int SwapChunkResponse::kPmidFieldNumber;
#endif  // !_MSC_VER

SwapChunkResponse::SwapChunkResponse()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    request_type_(0),
    result_(0u),
    chunkname1_(const_cast< ::std::string*>(&_default_chunkname1_)),
    chunkcontent1_(const_cast< ::std::string*>(&_default_chunkcontent1_)),
    size1_(0),
    chunkname2_(const_cast< ::std::string*>(&_default_chunkname2_)),
    chunkcontent2_(const_cast< ::std::string*>(&_default_chunkcontent2_)),
    size2_(0),
    pmid_(const_cast< ::std::string*>(&_default_pmid_)) {
  SharedCtor();
}

void SwapChunkResponse::InitAsDefaultInstance() {}

SwapChunkResponse::SwapChunkResponse(const SwapChunkResponse& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    request_type_(0),
    result_(0u),
    chunkname1_(const_cast< ::std::string*>(&_default_chunkname1_)),
    chunkcontent1_(const_cast< ::std::string*>(&_default_chunkcontent1_)),
    size1_(0),
    chunkname2_(const_cast< ::std::string*>(&_default_chunkname2_)),
    chunkcontent2_(const_cast< ::std::string*>(&_default_chunkcontent2_)),
    size2_(0),
    pmid_(const_cast< ::std::string*>(&_default_pmid_)) {
  SharedCtor();
  MergeFrom(from);
}

void SwapChunkResponse::SharedCtor() {
  _cached_size_ = 0;
  request_type_ = 0;
  result_ = 0u;
  chunkname1_ = const_cast< ::std::string*>(&_default_chunkname1_);
  chunkcontent1_ = const_cast< ::std::string*>(&_default_chunkcontent1_);
  size1_ = 0;
  chunkname2_ = const_cast< ::std::string*>(&_default_chunkname2_);
  chunkcontent2_ = const_cast< ::std::string*>(&_default_chunkcontent2_);
  size2_ = 0;
  pmid_ = const_cast< ::std::string*>(&_default_pmid_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SwapChunkResponse::~SwapChunkResponse() {
  SharedDtor();
}

void SwapChunkResponse::SharedDtor() {
  if (chunkname1_ != &_default_chunkname1_) {
    delete chunkname1_;
  }
  if (chunkcontent1_ != &_default_chunkcontent1_) {
    delete chunkcontent1_;
  }
  if (chunkname2_ != &_default_chunkname2_) {
    delete chunkname2_;
  }
  if (chunkcontent2_ != &_default_chunkcontent2_) {
    delete chunkcontent2_;
  }
  if (pmid_ != &_default_pmid_) {
    delete pmid_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* SwapChunkResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SwapChunkResponse_descriptor_;
}

const SwapChunkResponse& SwapChunkResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_5fservice_5fmessages_2eproto();  return *default_instance_;
}

SwapChunkResponse* SwapChunkResponse::default_instance_ = NULL;

SwapChunkResponse* SwapChunkResponse::New() const {
  return new SwapChunkResponse;
}

void SwapChunkResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    request_type_ = 0;
    result_ = 0u;
    if (_has_bit(2)) {
      if (chunkname1_ != &_default_chunkname1_) {
        chunkname1_->clear();
      }
    }
    if (_has_bit(3)) {
      if (chunkcontent1_ != &_default_chunkcontent1_) {
        chunkcontent1_->clear();
      }
    }
    size1_ = 0;
    if (_has_bit(5)) {
      if (chunkname2_ != &_default_chunkname2_) {
        chunkname2_->clear();
      }
    }
    if (_has_bit(6)) {
      if (chunkcontent2_ != &_default_chunkcontent2_) {
        chunkcontent2_->clear();
      }
    }
    size2_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (_has_bit(8)) {
      if (pmid_ != &_default_pmid_) {
        pmid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SwapChunkResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required int32 request_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &request_type_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }
      
      // required uint32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_result:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_chunkname1;
        break;
      }
      
      // optional bytes chunkname1 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_chunkname1:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_chunkname1()));
        if (input->ExpectTag(34)) goto parse_chunkcontent1;
        break;
      }
      
      // optional bytes chunkcontent1 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_chunkcontent1:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_chunkcontent1()));
        if (input->ExpectTag(40)) goto parse_size1;
        break;
      }
      
      // optional int32 size1 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_size1:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &size1_));
        _set_bit(4);
        if (input->ExpectTag(50)) goto parse_chunkname2;
        break;
      }
      
      // optional bytes chunkname2 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_chunkname2:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_chunkname2()));
        if (input->ExpectTag(58)) goto parse_chunkcontent2;
        break;
      }
      
      // optional bytes chunkcontent2 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_chunkcontent2:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_chunkcontent2()));
        if (input->ExpectTag(64)) goto parse_size2;
        break;
      }
      
      // optional int32 size2 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_size2:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &size2_));
        _set_bit(7);
        if (input->ExpectTag(74)) goto parse_pmid;
        break;
      }
      
      // required bytes pmid = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_pmid:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_pmid()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SwapChunkResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    SwapChunkResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 request_type = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(1, this->request_type(), output);
  }
  
  // required uint32 result = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->result(), output);
  }
  
  // optional bytes chunkname1 = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(3, this->chunkname1(), output);
  }
  
  // optional bytes chunkcontent1 = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(4, this->chunkcontent1(), output);
  }
  
  // optional int32 size1 = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(5, this->size1(), output);
  }
  
  // optional bytes chunkname2 = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(6, this->chunkname2(), output);
  }
  
  // optional bytes chunkcontent2 = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(7, this->chunkcontent2(), output);
  }
  
  // optional int32 size2 = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(8, this->size2(), output);
  }
  
  // required bytes pmid = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(9, this->pmid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SwapChunkResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 request_type = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(1, this->request_type(), target);
  }
  
  // required uint32 result = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->result(), target);
  }
  
  // optional bytes chunkname1 = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(3, this->chunkname1(), target);
  }
  
  // optional bytes chunkcontent1 = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(4, this->chunkcontent1(), target);
  }
  
  // optional int32 size1 = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(5, this->size1(), target);
  }
  
  // optional bytes chunkname2 = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(6, this->chunkname2(), target);
  }
  
  // optional bytes chunkcontent2 = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(7, this->chunkcontent2(), target);
  }
  
  // optional int32 size2 = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(8, this->size2(), target);
  }
  
  // required bytes pmid = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(9, this->pmid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SwapChunkResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 request_type = 1;
    if (has_request_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->request_type());
    }
    
    // required uint32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
    // optional bytes chunkname1 = 3;
    if (has_chunkname1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->chunkname1());
    }
    
    // optional bytes chunkcontent1 = 4;
    if (has_chunkcontent1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->chunkcontent1());
    }
    
    // optional int32 size1 = 5;
    if (has_size1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->size1());
    }
    
    // optional bytes chunkname2 = 6;
    if (has_chunkname2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->chunkname2());
    }
    
    // optional bytes chunkcontent2 = 7;
    if (has_chunkcontent2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->chunkcontent2());
    }
    
    // optional int32 size2 = 8;
    if (has_size2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->size2());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required bytes pmid = 9;
    if (has_pmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->pmid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void SwapChunkResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SwapChunkResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SwapChunkResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SwapChunkResponse::MergeFrom(const SwapChunkResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_request_type(from.request_type());
    }
    if (from._has_bit(1)) {
      set_result(from.result());
    }
    if (from._has_bit(2)) {
      set_chunkname1(from.chunkname1());
    }
    if (from._has_bit(3)) {
      set_chunkcontent1(from.chunkcontent1());
    }
    if (from._has_bit(4)) {
      set_size1(from.size1());
    }
    if (from._has_bit(5)) {
      set_chunkname2(from.chunkname2());
    }
    if (from._has_bit(6)) {
      set_chunkcontent2(from.chunkcontent2());
    }
    if (from._has_bit(7)) {
      set_size2(from.size2());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_pmid(from.pmid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SwapChunkResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SwapChunkResponse::CopyFrom(const SwapChunkResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SwapChunkResponse::Swap(SwapChunkResponse* other) {
  if (other != this) {
    std::swap(request_type_, other->request_type_);
    std::swap(result_, other->result_);
    std::swap(chunkname1_, other->chunkname1_);
    std::swap(chunkcontent1_, other->chunkcontent1_);
    std::swap(size1_, other->size1_);
    std::swap(chunkname2_, other->chunkname2_);
    std::swap(chunkcontent2_, other->chunkcontent2_);
    std::swap(size2_, other->size2_);
    std::swap(pmid_, other->pmid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool SwapChunkResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000103) != 0x00000103) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* SwapChunkResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* SwapChunkResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return SwapChunkResponse_reflection_;
}

// ===================================================================

const ::std::string VaultCommunication::_default_chunkstore_;
const ::std::string VaultCommunication::_default_ip_;
#ifndef _MSC_VER
const int VaultCommunication::kChunkstoreFieldNumber;
const int VaultCommunication::kOfferedSpaceFieldNumber;
const int VaultCommunication::kFreeSpaceFieldNumber;
const int VaultCommunication::kIpFieldNumber;
const int VaultCommunication::kPortFieldNumber;
const int VaultCommunication::kTimestampFieldNumber;
#endif  // !_MSC_VER

VaultCommunication::VaultCommunication()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    chunkstore_(const_cast< ::std::string*>(&_default_chunkstore_)),
    offered_space_(GOOGLE_ULONGLONG(0)),
    free_space_(GOOGLE_ULONGLONG(0)),
    ip_(const_cast< ::std::string*>(&_default_ip_)),
    port_(0u),
    timestamp_(0u) {
  SharedCtor();
}

void VaultCommunication::InitAsDefaultInstance() {}

VaultCommunication::VaultCommunication(const VaultCommunication& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    chunkstore_(const_cast< ::std::string*>(&_default_chunkstore_)),
    offered_space_(GOOGLE_ULONGLONG(0)),
    free_space_(GOOGLE_ULONGLONG(0)),
    ip_(const_cast< ::std::string*>(&_default_ip_)),
    port_(0u),
    timestamp_(0u) {
  SharedCtor();
  MergeFrom(from);
}

void VaultCommunication::SharedCtor() {
  _cached_size_ = 0;
  chunkstore_ = const_cast< ::std::string*>(&_default_chunkstore_);
  offered_space_ = GOOGLE_ULONGLONG(0);
  free_space_ = GOOGLE_ULONGLONG(0);
  ip_ = const_cast< ::std::string*>(&_default_ip_);
  port_ = 0u;
  timestamp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VaultCommunication::~VaultCommunication() {
  SharedDtor();
}

void VaultCommunication::SharedDtor() {
  if (chunkstore_ != &_default_chunkstore_) {
    delete chunkstore_;
  }
  if (ip_ != &_default_ip_) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* VaultCommunication::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VaultCommunication_descriptor_;
}

const VaultCommunication& VaultCommunication::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_5fservice_5fmessages_2eproto();  return *default_instance_;
}

VaultCommunication* VaultCommunication::default_instance_ = NULL;

VaultCommunication* VaultCommunication::New() const {
  return new VaultCommunication;
}

void VaultCommunication::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (chunkstore_ != &_default_chunkstore_) {
        chunkstore_->clear();
      }
    }
    offered_space_ = GOOGLE_ULONGLONG(0);
    free_space_ = GOOGLE_ULONGLONG(0);
    if (_has_bit(3)) {
      if (ip_ != &_default_ip_) {
        ip_->clear();
      }
    }
    port_ = 0u;
    timestamp_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VaultCommunication::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional bytes chunkstore = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_chunkstore()));
        if (input->ExpectTag(16)) goto parse_offered_space;
        break;
      }
      
      // optional uint64 offered_space = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_offered_space:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt64(
              input, &offered_space_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_free_space;
        break;
      }
      
      // optional uint64 free_space = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_free_space:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt64(
              input, &free_space_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_ip;
        break;
      }
      
      // optional bytes ip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ip:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_ip()));
        if (input->ExpectTag(40)) goto parse_port;
        break;
      }
      
      // optional uint32 port = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_port:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &port_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_timestamp;
        break;
      }
      
      // required uint32 timestamp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_timestamp:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &timestamp_));
        _set_bit(5);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VaultCommunication::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    VaultCommunication::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional bytes chunkstore = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(1, this->chunkstore(), output);
  }
  
  // optional uint64 offered_space = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt64(2, this->offered_space(), output);
  }
  
  // optional uint64 free_space = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt64(3, this->free_space(), output);
  }
  
  // optional bytes ip = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(4, this->ip(), output);
  }
  
  // optional uint32 port = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->port(), output);
  }
  
  // required uint32 timestamp = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->timestamp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VaultCommunication::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes chunkstore = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(1, this->chunkstore(), target);
  }
  
  // optional uint64 offered_space = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt64ToArray(2, this->offered_space(), target);
  }
  
  // optional uint64 free_space = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt64ToArray(3, this->free_space(), target);
  }
  
  // optional bytes ip = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(4, this->ip(), target);
  }
  
  // optional uint32 port = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->port(), target);
  }
  
  // required uint32 timestamp = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->timestamp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VaultCommunication::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes chunkstore = 1;
    if (has_chunkstore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->chunkstore());
    }
    
    // optional uint64 offered_space = 2;
    if (has_offered_space()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt64Size(
          this->offered_space());
    }
    
    // optional uint64 free_space = 3;
    if (has_free_space()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt64Size(
          this->free_space());
    }
    
    // optional bytes ip = 4;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->ip());
    }
    
    // optional uint32 port = 5;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->port());
    }
    
    // required uint32 timestamp = 6;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->timestamp());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void VaultCommunication::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VaultCommunication* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VaultCommunication*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VaultCommunication::MergeFrom(const VaultCommunication& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_chunkstore(from.chunkstore());
    }
    if (from._has_bit(1)) {
      set_offered_space(from.offered_space());
    }
    if (from._has_bit(2)) {
      set_free_space(from.free_space());
    }
    if (from._has_bit(3)) {
      set_ip(from.ip());
    }
    if (from._has_bit(4)) {
      set_port(from.port());
    }
    if (from._has_bit(5)) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VaultCommunication::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VaultCommunication::CopyFrom(const VaultCommunication& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VaultCommunication::Swap(VaultCommunication* other) {
  if (other != this) {
    std::swap(chunkstore_, other->chunkstore_);
    std::swap(offered_space_, other->offered_space_);
    std::swap(free_space_, other->free_space_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool VaultCommunication::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000020) != 0x00000020) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* VaultCommunication::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* VaultCommunication::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return VaultCommunication_reflection_;
}

// ===================================================================

const ::std::string VaultStatusRequest::_default_encrypted_request_;
#ifndef _MSC_VER
const int VaultStatusRequest::kEncryptedRequestFieldNumber;
#endif  // !_MSC_VER

VaultStatusRequest::VaultStatusRequest()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    encrypted_request_(const_cast< ::std::string*>(&_default_encrypted_request_)) {
  SharedCtor();
}

void VaultStatusRequest::InitAsDefaultInstance() {}

VaultStatusRequest::VaultStatusRequest(const VaultStatusRequest& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    encrypted_request_(const_cast< ::std::string*>(&_default_encrypted_request_)) {
  SharedCtor();
  MergeFrom(from);
}

void VaultStatusRequest::SharedCtor() {
  _cached_size_ = 0;
  encrypted_request_ = const_cast< ::std::string*>(&_default_encrypted_request_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VaultStatusRequest::~VaultStatusRequest() {
  SharedDtor();
}

void VaultStatusRequest::SharedDtor() {
  if (encrypted_request_ != &_default_encrypted_request_) {
    delete encrypted_request_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* VaultStatusRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VaultStatusRequest_descriptor_;
}

const VaultStatusRequest& VaultStatusRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_5fservice_5fmessages_2eproto();  return *default_instance_;
}

VaultStatusRequest* VaultStatusRequest::default_instance_ = NULL;

VaultStatusRequest* VaultStatusRequest::New() const {
  return new VaultStatusRequest;
}

void VaultStatusRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (encrypted_request_ != &_default_encrypted_request_) {
        encrypted_request_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VaultStatusRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required bytes encrypted_request = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_encrypted_request()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VaultStatusRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    VaultStatusRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required bytes encrypted_request = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(1, this->encrypted_request(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VaultStatusRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes encrypted_request = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(1, this->encrypted_request(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VaultStatusRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes encrypted_request = 1;
    if (has_encrypted_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->encrypted_request());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void VaultStatusRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VaultStatusRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VaultStatusRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VaultStatusRequest::MergeFrom(const VaultStatusRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_encrypted_request(from.encrypted_request());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VaultStatusRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VaultStatusRequest::CopyFrom(const VaultStatusRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VaultStatusRequest::Swap(VaultStatusRequest* other) {
  if (other != this) {
    std::swap(encrypted_request_, other->encrypted_request_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool VaultStatusRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* VaultStatusRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* VaultStatusRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return VaultStatusRequest_reflection_;
}

// ===================================================================

const ::std::string VaultStatusResponse::_default_encrypted_response_;
#ifndef _MSC_VER
const int VaultStatusResponse::kResultFieldNumber;
const int VaultStatusResponse::kEncryptedResponseFieldNumber;
#endif  // !_MSC_VER

VaultStatusResponse::VaultStatusResponse()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    result_(0u),
    encrypted_response_(const_cast< ::std::string*>(&_default_encrypted_response_)) {
  SharedCtor();
}

void VaultStatusResponse::InitAsDefaultInstance() {}

VaultStatusResponse::VaultStatusResponse(const VaultStatusResponse& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    result_(0u),
    encrypted_response_(const_cast< ::std::string*>(&_default_encrypted_response_)) {
  SharedCtor();
  MergeFrom(from);
}

void VaultStatusResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  encrypted_response_ = const_cast< ::std::string*>(&_default_encrypted_response_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VaultStatusResponse::~VaultStatusResponse() {
  SharedDtor();
}

void VaultStatusResponse::SharedDtor() {
  if (encrypted_response_ != &_default_encrypted_response_) {
    delete encrypted_response_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* VaultStatusResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VaultStatusResponse_descriptor_;
}

const VaultStatusResponse& VaultStatusResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_5fservice_5fmessages_2eproto();  return *default_instance_;
}

VaultStatusResponse* VaultStatusResponse::default_instance_ = NULL;

VaultStatusResponse* VaultStatusResponse::New() const {
  return new VaultStatusResponse;
}

void VaultStatusResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    if (_has_bit(1)) {
      if (encrypted_response_ != &_default_encrypted_response_) {
        encrypted_response_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VaultStatusResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_encrypted_response;
        break;
      }
      
      // optional bytes encrypted_response = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_encrypted_response:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_encrypted_response()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VaultStatusResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    VaultStatusResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->result(), output);
  }
  
  // optional bytes encrypted_response = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(2, this->encrypted_response(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VaultStatusResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->result(), target);
  }
  
  // optional bytes encrypted_response = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(2, this->encrypted_response(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VaultStatusResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
    // optional bytes encrypted_response = 2;
    if (has_encrypted_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->encrypted_response());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void VaultStatusResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VaultStatusResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VaultStatusResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VaultStatusResponse::MergeFrom(const VaultStatusResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_result(from.result());
    }
    if (from._has_bit(1)) {
      set_encrypted_response(from.encrypted_response());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VaultStatusResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VaultStatusResponse::CopyFrom(const VaultStatusResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VaultStatusResponse::Swap(VaultStatusResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(encrypted_response_, other->encrypted_response_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool VaultStatusResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* VaultStatusResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* VaultStatusResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return VaultStatusResponse_reflection_;
}

// ===================================================================

const ::std::string OwnVaultRequest::_default_public_key_;
const ::std::string OwnVaultRequest::_default_private_key_;
const ::std::string OwnVaultRequest::_default_signed_public_key_;
const ::std::string OwnVaultRequest::_default_chunkstore_dir_;
#ifndef _MSC_VER
const int OwnVaultRequest::kPublicKeyFieldNumber;
const int OwnVaultRequest::kPrivateKeyFieldNumber;
const int OwnVaultRequest::kSignedPublicKeyFieldNumber;
const int OwnVaultRequest::kChunkstoreDirFieldNumber;
const int OwnVaultRequest::kPortFieldNumber;
const int OwnVaultRequest::kSpaceFieldNumber;
#endif  // !_MSC_VER

OwnVaultRequest::OwnVaultRequest()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    public_key_(const_cast< ::std::string*>(&_default_public_key_)),
    private_key_(const_cast< ::std::string*>(&_default_private_key_)),
    signed_public_key_(const_cast< ::std::string*>(&_default_signed_public_key_)),
    chunkstore_dir_(const_cast< ::std::string*>(&_default_chunkstore_dir_)),
    port_(0u),
    space_(GOOGLE_ULONGLONG(0)) {
  SharedCtor();
}

void OwnVaultRequest::InitAsDefaultInstance() {}

OwnVaultRequest::OwnVaultRequest(const OwnVaultRequest& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    public_key_(const_cast< ::std::string*>(&_default_public_key_)),
    private_key_(const_cast< ::std::string*>(&_default_private_key_)),
    signed_public_key_(const_cast< ::std::string*>(&_default_signed_public_key_)),
    chunkstore_dir_(const_cast< ::std::string*>(&_default_chunkstore_dir_)),
    port_(0u),
    space_(GOOGLE_ULONGLONG(0)) {
  SharedCtor();
  MergeFrom(from);
}

void OwnVaultRequest::SharedCtor() {
  _cached_size_ = 0;
  public_key_ = const_cast< ::std::string*>(&_default_public_key_);
  private_key_ = const_cast< ::std::string*>(&_default_private_key_);
  signed_public_key_ = const_cast< ::std::string*>(&_default_signed_public_key_);
  chunkstore_dir_ = const_cast< ::std::string*>(&_default_chunkstore_dir_);
  port_ = 0u;
  space_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OwnVaultRequest::~OwnVaultRequest() {
  SharedDtor();
}

void OwnVaultRequest::SharedDtor() {
  if (public_key_ != &_default_public_key_) {
    delete public_key_;
  }
  if (private_key_ != &_default_private_key_) {
    delete private_key_;
  }
  if (signed_public_key_ != &_default_signed_public_key_) {
    delete signed_public_key_;
  }
  if (chunkstore_dir_ != &_default_chunkstore_dir_) {
    delete chunkstore_dir_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* OwnVaultRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OwnVaultRequest_descriptor_;
}

const OwnVaultRequest& OwnVaultRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_5fservice_5fmessages_2eproto();  return *default_instance_;
}

OwnVaultRequest* OwnVaultRequest::default_instance_ = NULL;

OwnVaultRequest* OwnVaultRequest::New() const {
  return new OwnVaultRequest;
}

void OwnVaultRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (public_key_ != &_default_public_key_) {
        public_key_->clear();
      }
    }
    if (_has_bit(1)) {
      if (private_key_ != &_default_private_key_) {
        private_key_->clear();
      }
    }
    if (_has_bit(2)) {
      if (signed_public_key_ != &_default_signed_public_key_) {
        signed_public_key_->clear();
      }
    }
    if (_has_bit(3)) {
      if (chunkstore_dir_ != &_default_chunkstore_dir_) {
        chunkstore_dir_->clear();
      }
    }
    port_ = 0u;
    space_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OwnVaultRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required bytes public_key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_public_key()));
        if (input->ExpectTag(18)) goto parse_private_key;
        break;
      }
      
      // required bytes private_key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_private_key:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_private_key()));
        if (input->ExpectTag(26)) goto parse_signed_public_key;
        break;
      }
      
      // required bytes signed_public_key = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_signed_public_key:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_signed_public_key()));
        if (input->ExpectTag(34)) goto parse_chunkstore_dir;
        break;
      }
      
      // required bytes chunkstore_dir = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_chunkstore_dir:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_chunkstore_dir()));
        if (input->ExpectTag(40)) goto parse_port;
        break;
      }
      
      // required uint32 port = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_port:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &port_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_space;
        break;
      }
      
      // required uint64 space = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_space:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt64(
              input, &space_));
        _set_bit(5);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OwnVaultRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    OwnVaultRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required bytes public_key = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(1, this->public_key(), output);
  }
  
  // required bytes private_key = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(2, this->private_key(), output);
  }
  
  // required bytes signed_public_key = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(3, this->signed_public_key(), output);
  }
  
  // required bytes chunkstore_dir = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(4, this->chunkstore_dir(), output);
  }
  
  // required uint32 port = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->port(), output);
  }
  
  // required uint64 space = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt64(6, this->space(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OwnVaultRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes public_key = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(1, this->public_key(), target);
  }
  
  // required bytes private_key = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(2, this->private_key(), target);
  }
  
  // required bytes signed_public_key = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(3, this->signed_public_key(), target);
  }
  
  // required bytes chunkstore_dir = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(4, this->chunkstore_dir(), target);
  }
  
  // required uint32 port = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->port(), target);
  }
  
  // required uint64 space = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt64ToArray(6, this->space(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OwnVaultRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes public_key = 1;
    if (has_public_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->public_key());
    }
    
    // required bytes private_key = 2;
    if (has_private_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->private_key());
    }
    
    // required bytes signed_public_key = 3;
    if (has_signed_public_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->signed_public_key());
    }
    
    // required bytes chunkstore_dir = 4;
    if (has_chunkstore_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->chunkstore_dir());
    }
    
    // required uint32 port = 5;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->port());
    }
    
    // required uint64 space = 6;
    if (has_space()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt64Size(
          this->space());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void OwnVaultRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OwnVaultRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OwnVaultRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OwnVaultRequest::MergeFrom(const OwnVaultRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_public_key(from.public_key());
    }
    if (from._has_bit(1)) {
      set_private_key(from.private_key());
    }
    if (from._has_bit(2)) {
      set_signed_public_key(from.signed_public_key());
    }
    if (from._has_bit(3)) {
      set_chunkstore_dir(from.chunkstore_dir());
    }
    if (from._has_bit(4)) {
      set_port(from.port());
    }
    if (from._has_bit(5)) {
      set_space(from.space());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OwnVaultRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OwnVaultRequest::CopyFrom(const OwnVaultRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OwnVaultRequest::Swap(OwnVaultRequest* other) {
  if (other != this) {
    std::swap(public_key_, other->public_key_);
    std::swap(private_key_, other->private_key_);
    std::swap(signed_public_key_, other->signed_public_key_);
    std::swap(chunkstore_dir_, other->chunkstore_dir_);
    std::swap(port_, other->port_);
    std::swap(space_, other->space_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool OwnVaultRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* OwnVaultRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* OwnVaultRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return OwnVaultRequest_reflection_;
}

// ===================================================================

const ::std::string OwnVaultResponse::_default_pmid_name_;
#ifndef _MSC_VER
const int OwnVaultResponse::kResultFieldNumber;
const int OwnVaultResponse::kPmidNameFieldNumber;
#endif  // !_MSC_VER

OwnVaultResponse::OwnVaultResponse()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    result_(0),
    pmid_name_(const_cast< ::std::string*>(&_default_pmid_name_)) {
  SharedCtor();
}

void OwnVaultResponse::InitAsDefaultInstance() {}

OwnVaultResponse::OwnVaultResponse(const OwnVaultResponse& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    result_(0),
    pmid_name_(const_cast< ::std::string*>(&_default_pmid_name_)) {
  SharedCtor();
  MergeFrom(from);
}

void OwnVaultResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  pmid_name_ = const_cast< ::std::string*>(&_default_pmid_name_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OwnVaultResponse::~OwnVaultResponse() {
  SharedDtor();
}

void OwnVaultResponse::SharedDtor() {
  if (pmid_name_ != &_default_pmid_name_) {
    delete pmid_name_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* OwnVaultResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OwnVaultResponse_descriptor_;
}

const OwnVaultResponse& OwnVaultResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_5fservice_5fmessages_2eproto();  return *default_instance_;
}

OwnVaultResponse* OwnVaultResponse::default_instance_ = NULL;

OwnVaultResponse* OwnVaultResponse::New() const {
  return new OwnVaultResponse;
}

void OwnVaultResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (_has_bit(1)) {
      if (pmid_name_ != &_default_pmid_name_) {
        pmid_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OwnVaultResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required .maidsafe.OwnVaultResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        int value;
        DO_(::google::protobuf::internal::WireFormat::ReadEnum(input, &value));
        if (maidsafe::OwnVaultResult_IsValid(value)) {
          set_result(static_cast< maidsafe::OwnVaultResult >(value));
        } else {
          mutable_unknown_fields()->AddVarint(1, value);
        }
        if (input->ExpectTag(18)) goto parse_pmid_name;
        break;
      }
      
      // optional bytes pmid_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_pmid_name:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_pmid_name()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OwnVaultResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    OwnVaultResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required .maidsafe.OwnVaultResult result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteEnum(1, this->result(), output);
  }
  
  // optional bytes pmid_name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(2, this->pmid_name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OwnVaultResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .maidsafe.OwnVaultResult result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteEnumToArray(1, this->result(), target);
  }
  
  // optional bytes pmid_name = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(2, this->pmid_name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OwnVaultResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .maidsafe.OwnVaultResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::EnumSize(this->result());
    }
    
    // optional bytes pmid_name = 2;
    if (has_pmid_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->pmid_name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void OwnVaultResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OwnVaultResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OwnVaultResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OwnVaultResponse::MergeFrom(const OwnVaultResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_result(from.result());
    }
    if (from._has_bit(1)) {
      set_pmid_name(from.pmid_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OwnVaultResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OwnVaultResponse::CopyFrom(const OwnVaultResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OwnVaultResponse::Swap(OwnVaultResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(pmid_name_, other->pmid_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool OwnVaultResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* OwnVaultResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* OwnVaultResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return OwnVaultResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

IsOwnedRequest::IsOwnedRequest()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0) {
  SharedCtor();
}

void IsOwnedRequest::InitAsDefaultInstance() {}

IsOwnedRequest::IsOwnedRequest(const IsOwnedRequest& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0) {
  SharedCtor();
  MergeFrom(from);
}

void IsOwnedRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IsOwnedRequest::~IsOwnedRequest() {
  SharedDtor();
}

void IsOwnedRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* IsOwnedRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IsOwnedRequest_descriptor_;
}

const IsOwnedRequest& IsOwnedRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_5fservice_5fmessages_2eproto();  return *default_instance_;
}

IsOwnedRequest* IsOwnedRequest::default_instance_ = NULL;

IsOwnedRequest* IsOwnedRequest::New() const {
  return new IsOwnedRequest;
}

void IsOwnedRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IsOwnedRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void IsOwnedRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    IsOwnedRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IsOwnedRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IsOwnedRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void IsOwnedRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IsOwnedRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IsOwnedRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IsOwnedRequest::MergeFrom(const IsOwnedRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IsOwnedRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsOwnedRequest::CopyFrom(const IsOwnedRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsOwnedRequest::Swap(IsOwnedRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool IsOwnedRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* IsOwnedRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* IsOwnedRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return IsOwnedRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int IsOwnedResponse::kStatusFieldNumber;
#endif  // !_MSC_VER

IsOwnedResponse::IsOwnedResponse()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    status_(0) {
  SharedCtor();
}

void IsOwnedResponse::InitAsDefaultInstance() {}

IsOwnedResponse::IsOwnedResponse(const IsOwnedResponse& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    status_(0) {
  SharedCtor();
  MergeFrom(from);
}

void IsOwnedResponse::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IsOwnedResponse::~IsOwnedResponse() {
  SharedDtor();
}

void IsOwnedResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* IsOwnedResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IsOwnedResponse_descriptor_;
}

const IsOwnedResponse& IsOwnedResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_5fservice_5fmessages_2eproto();  return *default_instance_;
}

IsOwnedResponse* IsOwnedResponse::default_instance_ = NULL;

IsOwnedResponse* IsOwnedResponse::New() const {
  return new IsOwnedResponse;
}

void IsOwnedResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IsOwnedResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required .maidsafe.VaultStatus status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        int value;
        DO_(::google::protobuf::internal::WireFormat::ReadEnum(input, &value));
        if (maidsafe::VaultStatus_IsValid(value)) {
          set_status(static_cast< maidsafe::VaultStatus >(value));
        } else {
          mutable_unknown_fields()->AddVarint(1, value);
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IsOwnedResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    IsOwnedResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required .maidsafe.VaultStatus status = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteEnum(1, this->status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IsOwnedResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .maidsafe.VaultStatus status = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteEnumToArray(1, this->status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IsOwnedResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .maidsafe.VaultStatus status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::EnumSize(this->status());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void IsOwnedResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IsOwnedResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IsOwnedResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IsOwnedResponse::MergeFrom(const IsOwnedResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IsOwnedResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsOwnedResponse::CopyFrom(const IsOwnedResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsOwnedResponse::Swap(IsOwnedResponse* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool IsOwnedResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* IsOwnedResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* IsOwnedResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return IsOwnedResponse_reflection_;
}

// ===================================================================

const ::std::string CreateBPRequest::_default_bufferpacket_name_;
const ::std::string CreateBPRequest::_default_data_;
const ::std::string CreateBPRequest::_default_pmid_;
const ::std::string CreateBPRequest::_default_public_key_;
const ::std::string CreateBPRequest::_default_signed_public_key_;
const ::std::string CreateBPRequest::_default_signed_request_;
#ifndef _MSC_VER
const int CreateBPRequest::kBufferpacketNameFieldNumber;
const int CreateBPRequest::kDataFieldNumber;
const int CreateBPRequest::kPmidFieldNumber;
const int CreateBPRequest::kPublicKeyFieldNumber;
const int CreateBPRequest::kSignedPublicKeyFieldNumber;
const int CreateBPRequest::kSignedRequestFieldNumber;
#endif  // !_MSC_VER

CreateBPRequest::CreateBPRequest()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    bufferpacket_name_(const_cast< ::std::string*>(&_default_bufferpacket_name_)),
    data_(const_cast< ::std::string*>(&_default_data_)),
    pmid_(const_cast< ::std::string*>(&_default_pmid_)),
    public_key_(const_cast< ::std::string*>(&_default_public_key_)),
    signed_public_key_(const_cast< ::std::string*>(&_default_signed_public_key_)),
    signed_request_(const_cast< ::std::string*>(&_default_signed_request_)) {
  SharedCtor();
}

void CreateBPRequest::InitAsDefaultInstance() {}

CreateBPRequest::CreateBPRequest(const CreateBPRequest& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    bufferpacket_name_(const_cast< ::std::string*>(&_default_bufferpacket_name_)),
    data_(const_cast< ::std::string*>(&_default_data_)),
    pmid_(const_cast< ::std::string*>(&_default_pmid_)),
    public_key_(const_cast< ::std::string*>(&_default_public_key_)),
    signed_public_key_(const_cast< ::std::string*>(&_default_signed_public_key_)),
    signed_request_(const_cast< ::std::string*>(&_default_signed_request_)) {
  SharedCtor();
  MergeFrom(from);
}

void CreateBPRequest::SharedCtor() {
  _cached_size_ = 0;
  bufferpacket_name_ = const_cast< ::std::string*>(&_default_bufferpacket_name_);
  data_ = const_cast< ::std::string*>(&_default_data_);
  pmid_ = const_cast< ::std::string*>(&_default_pmid_);
  public_key_ = const_cast< ::std::string*>(&_default_public_key_);
  signed_public_key_ = const_cast< ::std::string*>(&_default_signed_public_key_);
  signed_request_ = const_cast< ::std::string*>(&_default_signed_request_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateBPRequest::~CreateBPRequest() {
  SharedDtor();
}

void CreateBPRequest::SharedDtor() {
  if (bufferpacket_name_ != &_default_bufferpacket_name_) {
    delete bufferpacket_name_;
  }
  if (data_ != &_default_data_) {
    delete data_;
  }
  if (pmid_ != &_default_pmid_) {
    delete pmid_;
  }
  if (public_key_ != &_default_public_key_) {
    delete public_key_;
  }
  if (signed_public_key_ != &_default_signed_public_key_) {
    delete signed_public_key_;
  }
  if (signed_request_ != &_default_signed_request_) {
    delete signed_request_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CreateBPRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateBPRequest_descriptor_;
}

const CreateBPRequest& CreateBPRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_5fservice_5fmessages_2eproto();  return *default_instance_;
}

CreateBPRequest* CreateBPRequest::default_instance_ = NULL;

CreateBPRequest* CreateBPRequest::New() const {
  return new CreateBPRequest;
}

void CreateBPRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (bufferpacket_name_ != &_default_bufferpacket_name_) {
        bufferpacket_name_->clear();
      }
    }
    if (_has_bit(1)) {
      if (data_ != &_default_data_) {
        data_->clear();
      }
    }
    if (_has_bit(2)) {
      if (pmid_ != &_default_pmid_) {
        pmid_->clear();
      }
    }
    if (_has_bit(3)) {
      if (public_key_ != &_default_public_key_) {
        public_key_->clear();
      }
    }
    if (_has_bit(4)) {
      if (signed_public_key_ != &_default_signed_public_key_) {
        signed_public_key_->clear();
      }
    }
    if (_has_bit(5)) {
      if (signed_request_ != &_default_signed_request_) {
        signed_request_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateBPRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required bytes bufferpacket_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_bufferpacket_name()));
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }
      
      // required bytes data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_data:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_data()));
        if (input->ExpectTag(26)) goto parse_pmid;
        break;
      }
      
      // required bytes pmid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_pmid:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_pmid()));
        if (input->ExpectTag(34)) goto parse_public_key;
        break;
      }
      
      // required bytes public_key = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_public_key:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_public_key()));
        if (input->ExpectTag(42)) goto parse_signed_public_key;
        break;
      }
      
      // required bytes signed_public_key = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_signed_public_key:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_signed_public_key()));
        if (input->ExpectTag(50)) goto parse_signed_request;
        break;
      }
      
      // required bytes signed_request = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_signed_request:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_signed_request()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateBPRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CreateBPRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required bytes bufferpacket_name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(1, this->bufferpacket_name(), output);
  }
  
  // required bytes data = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(2, this->data(), output);
  }
  
  // required bytes pmid = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(3, this->pmid(), output);
  }
  
  // required bytes public_key = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(4, this->public_key(), output);
  }
  
  // required bytes signed_public_key = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(5, this->signed_public_key(), output);
  }
  
  // required bytes signed_request = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(6, this->signed_request(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateBPRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes bufferpacket_name = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(1, this->bufferpacket_name(), target);
  }
  
  // required bytes data = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(2, this->data(), target);
  }
  
  // required bytes pmid = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(3, this->pmid(), target);
  }
  
  // required bytes public_key = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(4, this->public_key(), target);
  }
  
  // required bytes signed_public_key = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(5, this->signed_public_key(), target);
  }
  
  // required bytes signed_request = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(6, this->signed_request(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateBPRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes bufferpacket_name = 1;
    if (has_bufferpacket_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->bufferpacket_name());
    }
    
    // required bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->data());
    }
    
    // required bytes pmid = 3;
    if (has_pmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->pmid());
    }
    
    // required bytes public_key = 4;
    if (has_public_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->public_key());
    }
    
    // required bytes signed_public_key = 5;
    if (has_signed_public_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->signed_public_key());
    }
    
    // required bytes signed_request = 6;
    if (has_signed_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->signed_request());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CreateBPRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateBPRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateBPRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateBPRequest::MergeFrom(const CreateBPRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_bufferpacket_name(from.bufferpacket_name());
    }
    if (from._has_bit(1)) {
      set_data(from.data());
    }
    if (from._has_bit(2)) {
      set_pmid(from.pmid());
    }
    if (from._has_bit(3)) {
      set_public_key(from.public_key());
    }
    if (from._has_bit(4)) {
      set_signed_public_key(from.signed_public_key());
    }
    if (from._has_bit(5)) {
      set_signed_request(from.signed_request());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateBPRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateBPRequest::CopyFrom(const CreateBPRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateBPRequest::Swap(CreateBPRequest* other) {
  if (other != this) {
    std::swap(bufferpacket_name_, other->bufferpacket_name_);
    std::swap(data_, other->data_);
    std::swap(pmid_, other->pmid_);
    std::swap(public_key_, other->public_key_);
    std::swap(signed_public_key_, other->signed_public_key_);
    std::swap(signed_request_, other->signed_request_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CreateBPRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* CreateBPRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CreateBPRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CreateBPRequest_reflection_;
}

// ===================================================================

const ::std::string CreateBPResponse::_default_pmid_id_;
const ::std::string CreateBPResponse::_default_public_key_;
const ::std::string CreateBPResponse::_default_signed_public_key_;
#ifndef _MSC_VER
const int CreateBPResponse::kResultFieldNumber;
const int CreateBPResponse::kPmidIdFieldNumber;
const int CreateBPResponse::kPublicKeyFieldNumber;
const int CreateBPResponse::kSignedPublicKeyFieldNumber;
#endif  // !_MSC_VER

CreateBPResponse::CreateBPResponse()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    result_(0u),
    pmid_id_(const_cast< ::std::string*>(&_default_pmid_id_)),
    public_key_(const_cast< ::std::string*>(&_default_public_key_)),
    signed_public_key_(const_cast< ::std::string*>(&_default_signed_public_key_)) {
  SharedCtor();
}

void CreateBPResponse::InitAsDefaultInstance() {}

CreateBPResponse::CreateBPResponse(const CreateBPResponse& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    result_(0u),
    pmid_id_(const_cast< ::std::string*>(&_default_pmid_id_)),
    public_key_(const_cast< ::std::string*>(&_default_public_key_)),
    signed_public_key_(const_cast< ::std::string*>(&_default_signed_public_key_)) {
  SharedCtor();
  MergeFrom(from);
}

void CreateBPResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  pmid_id_ = const_cast< ::std::string*>(&_default_pmid_id_);
  public_key_ = const_cast< ::std::string*>(&_default_public_key_);
  signed_public_key_ = const_cast< ::std::string*>(&_default_signed_public_key_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateBPResponse::~CreateBPResponse() {
  SharedDtor();
}

void CreateBPResponse::SharedDtor() {
  if (pmid_id_ != &_default_pmid_id_) {
    delete pmid_id_;
  }
  if (public_key_ != &_default_public_key_) {
    delete public_key_;
  }
  if (signed_public_key_ != &_default_signed_public_key_) {
    delete signed_public_key_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CreateBPResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateBPResponse_descriptor_;
}

const CreateBPResponse& CreateBPResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_5fservice_5fmessages_2eproto();  return *default_instance_;
}

CreateBPResponse* CreateBPResponse::default_instance_ = NULL;

CreateBPResponse* CreateBPResponse::New() const {
  return new CreateBPResponse;
}

void CreateBPResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    if (_has_bit(1)) {
      if (pmid_id_ != &_default_pmid_id_) {
        pmid_id_->clear();
      }
    }
    if (_has_bit(2)) {
      if (public_key_ != &_default_public_key_) {
        public_key_->clear();
      }
    }
    if (_has_bit(3)) {
      if (signed_public_key_ != &_default_signed_public_key_) {
        signed_public_key_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateBPResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_pmid_id;
        break;
      }
      
      // optional bytes pmid_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_pmid_id:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_pmid_id()));
        if (input->ExpectTag(26)) goto parse_public_key;
        break;
      }
      
      // optional bytes public_key = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_public_key:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_public_key()));
        if (input->ExpectTag(34)) goto parse_signed_public_key;
        break;
      }
      
      // optional bytes signed_public_key = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_signed_public_key:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_signed_public_key()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateBPResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CreateBPResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->result(), output);
  }
  
  // optional bytes pmid_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(2, this->pmid_id(), output);
  }
  
  // optional bytes public_key = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(3, this->public_key(), output);
  }
  
  // optional bytes signed_public_key = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(4, this->signed_public_key(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateBPResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->result(), target);
  }
  
  // optional bytes pmid_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(2, this->pmid_id(), target);
  }
  
  // optional bytes public_key = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(3, this->public_key(), target);
  }
  
  // optional bytes signed_public_key = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(4, this->signed_public_key(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateBPResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
    // optional bytes pmid_id = 2;
    if (has_pmid_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->pmid_id());
    }
    
    // optional bytes public_key = 3;
    if (has_public_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->public_key());
    }
    
    // optional bytes signed_public_key = 4;
    if (has_signed_public_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->signed_public_key());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CreateBPResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateBPResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateBPResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateBPResponse::MergeFrom(const CreateBPResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_result(from.result());
    }
    if (from._has_bit(1)) {
      set_pmid_id(from.pmid_id());
    }
    if (from._has_bit(2)) {
      set_public_key(from.public_key());
    }
    if (from._has_bit(3)) {
      set_signed_public_key(from.signed_public_key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateBPResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateBPResponse::CopyFrom(const CreateBPResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateBPResponse::Swap(CreateBPResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(pmid_id_, other->pmid_id_);
    std::swap(public_key_, other->public_key_);
    std::swap(signed_public_key_, other->signed_public_key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CreateBPResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* CreateBPResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CreateBPResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CreateBPResponse_reflection_;
}

// ===================================================================

const ::std::string ModifyBPInfoRequest::_default_bufferpacket_name_;
const ::std::string ModifyBPInfoRequest::_default_data_;
const ::std::string ModifyBPInfoRequest::_default_pmid_;
const ::std::string ModifyBPInfoRequest::_default_public_key_;
const ::std::string ModifyBPInfoRequest::_default_signed_public_key_;
const ::std::string ModifyBPInfoRequest::_default_signed_request_;
#ifndef _MSC_VER
const int ModifyBPInfoRequest::kBufferpacketNameFieldNumber;
const int ModifyBPInfoRequest::kDataFieldNumber;
const int ModifyBPInfoRequest::kPmidFieldNumber;
const int ModifyBPInfoRequest::kPublicKeyFieldNumber;
const int ModifyBPInfoRequest::kSignedPublicKeyFieldNumber;
const int ModifyBPInfoRequest::kSignedRequestFieldNumber;
#endif  // !_MSC_VER

ModifyBPInfoRequest::ModifyBPInfoRequest()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    bufferpacket_name_(const_cast< ::std::string*>(&_default_bufferpacket_name_)),
    data_(const_cast< ::std::string*>(&_default_data_)),
    pmid_(const_cast< ::std::string*>(&_default_pmid_)),
    public_key_(const_cast< ::std::string*>(&_default_public_key_)),
    signed_public_key_(const_cast< ::std::string*>(&_default_signed_public_key_)),
    signed_request_(const_cast< ::std::string*>(&_default_signed_request_)) {
  SharedCtor();
}

void ModifyBPInfoRequest::InitAsDefaultInstance() {}

ModifyBPInfoRequest::ModifyBPInfoRequest(const ModifyBPInfoRequest& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    bufferpacket_name_(const_cast< ::std::string*>(&_default_bufferpacket_name_)),
    data_(const_cast< ::std::string*>(&_default_data_)),
    pmid_(const_cast< ::std::string*>(&_default_pmid_)),
    public_key_(const_cast< ::std::string*>(&_default_public_key_)),
    signed_public_key_(const_cast< ::std::string*>(&_default_signed_public_key_)),
    signed_request_(const_cast< ::std::string*>(&_default_signed_request_)) {
  SharedCtor();
  MergeFrom(from);
}

void ModifyBPInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  bufferpacket_name_ = const_cast< ::std::string*>(&_default_bufferpacket_name_);
  data_ = const_cast< ::std::string*>(&_default_data_);
  pmid_ = const_cast< ::std::string*>(&_default_pmid_);
  public_key_ = const_cast< ::std::string*>(&_default_public_key_);
  signed_public_key_ = const_cast< ::std::string*>(&_default_signed_public_key_);
  signed_request_ = const_cast< ::std::string*>(&_default_signed_request_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModifyBPInfoRequest::~ModifyBPInfoRequest() {
  SharedDtor();
}

void ModifyBPInfoRequest::SharedDtor() {
  if (bufferpacket_name_ != &_default_bufferpacket_name_) {
    delete bufferpacket_name_;
  }
  if (data_ != &_default_data_) {
    delete data_;
  }
  if (pmid_ != &_default_pmid_) {
    delete pmid_;
  }
  if (public_key_ != &_default_public_key_) {
    delete public_key_;
  }
  if (signed_public_key_ != &_default_signed_public_key_) {
    delete signed_public_key_;
  }
  if (signed_request_ != &_default_signed_request_) {
    delete signed_request_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* ModifyBPInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModifyBPInfoRequest_descriptor_;
}

const ModifyBPInfoRequest& ModifyBPInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_5fservice_5fmessages_2eproto();  return *default_instance_;
}

ModifyBPInfoRequest* ModifyBPInfoRequest::default_instance_ = NULL;

ModifyBPInfoRequest* ModifyBPInfoRequest::New() const {
  return new ModifyBPInfoRequest;
}

void ModifyBPInfoRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (bufferpacket_name_ != &_default_bufferpacket_name_) {
        bufferpacket_name_->clear();
      }
    }
    if (_has_bit(1)) {
      if (data_ != &_default_data_) {
        data_->clear();
      }
    }
    if (_has_bit(2)) {
      if (pmid_ != &_default_pmid_) {
        pmid_->clear();
      }
    }
    if (_has_bit(3)) {
      if (public_key_ != &_default_public_key_) {
        public_key_->clear();
      }
    }
    if (_has_bit(4)) {
      if (signed_public_key_ != &_default_signed_public_key_) {
        signed_public_key_->clear();
      }
    }
    if (_has_bit(5)) {
      if (signed_request_ != &_default_signed_request_) {
        signed_request_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModifyBPInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required bytes bufferpacket_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_bufferpacket_name()));
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }
      
      // required bytes data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_data:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_data()));
        if (input->ExpectTag(26)) goto parse_pmid;
        break;
      }
      
      // required bytes pmid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_pmid:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_pmid()));
        if (input->ExpectTag(34)) goto parse_public_key;
        break;
      }
      
      // required bytes public_key = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_public_key:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_public_key()));
        if (input->ExpectTag(42)) goto parse_signed_public_key;
        break;
      }
      
      // required bytes signed_public_key = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_signed_public_key:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_signed_public_key()));
        if (input->ExpectTag(50)) goto parse_signed_request;
        break;
      }
      
      // required bytes signed_request = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_signed_request:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_signed_request()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ModifyBPInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    ModifyBPInfoRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required bytes bufferpacket_name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(1, this->bufferpacket_name(), output);
  }
  
  // required bytes data = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(2, this->data(), output);
  }
  
  // required bytes pmid = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(3, this->pmid(), output);
  }
  
  // required bytes public_key = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(4, this->public_key(), output);
  }
  
  // required bytes signed_public_key = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(5, this->signed_public_key(), output);
  }
  
  // required bytes signed_request = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(6, this->signed_request(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ModifyBPInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes bufferpacket_name = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(1, this->bufferpacket_name(), target);
  }
  
  // required bytes data = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(2, this->data(), target);
  }
  
  // required bytes pmid = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(3, this->pmid(), target);
  }
  
  // required bytes public_key = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(4, this->public_key(), target);
  }
  
  // required bytes signed_public_key = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(5, this->signed_public_key(), target);
  }
  
  // required bytes signed_request = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(6, this->signed_request(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ModifyBPInfoRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes bufferpacket_name = 1;
    if (has_bufferpacket_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->bufferpacket_name());
    }
    
    // required bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->data());
    }
    
    // required bytes pmid = 3;
    if (has_pmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->pmid());
    }
    
    // required bytes public_key = 4;
    if (has_public_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->public_key());
    }
    
    // required bytes signed_public_key = 5;
    if (has_signed_public_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->signed_public_key());
    }
    
    // required bytes signed_request = 6;
    if (has_signed_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->signed_request());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void ModifyBPInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModifyBPInfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModifyBPInfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModifyBPInfoRequest::MergeFrom(const ModifyBPInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_bufferpacket_name(from.bufferpacket_name());
    }
    if (from._has_bit(1)) {
      set_data(from.data());
    }
    if (from._has_bit(2)) {
      set_pmid(from.pmid());
    }
    if (from._has_bit(3)) {
      set_public_key(from.public_key());
    }
    if (from._has_bit(4)) {
      set_signed_public_key(from.signed_public_key());
    }
    if (from._has_bit(5)) {
      set_signed_request(from.signed_request());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModifyBPInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModifyBPInfoRequest::CopyFrom(const ModifyBPInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModifyBPInfoRequest::Swap(ModifyBPInfoRequest* other) {
  if (other != this) {
    std::swap(bufferpacket_name_, other->bufferpacket_name_);
    std::swap(data_, other->data_);
    std::swap(pmid_, other->pmid_);
    std::swap(public_key_, other->public_key_);
    std::swap(signed_public_key_, other->signed_public_key_);
    std::swap(signed_request_, other->signed_request_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool ModifyBPInfoRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* ModifyBPInfoRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* ModifyBPInfoRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return ModifyBPInfoRequest_reflection_;
}

// ===================================================================

const ::std::string ModifyBPInfoResponse::_default_pmid_id_;
const ::std::string ModifyBPInfoResponse::_default_public_key_;
const ::std::string ModifyBPInfoResponse::_default_signed_public_key_;
#ifndef _MSC_VER
const int ModifyBPInfoResponse::kResultFieldNumber;
const int ModifyBPInfoResponse::kPmidIdFieldNumber;
const int ModifyBPInfoResponse::kPublicKeyFieldNumber;
const int ModifyBPInfoResponse::kSignedPublicKeyFieldNumber;
#endif  // !_MSC_VER

ModifyBPInfoResponse::ModifyBPInfoResponse()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    result_(0u),
    pmid_id_(const_cast< ::std::string*>(&_default_pmid_id_)),
    public_key_(const_cast< ::std::string*>(&_default_public_key_)),
    signed_public_key_(const_cast< ::std::string*>(&_default_signed_public_key_)) {
  SharedCtor();
}

void ModifyBPInfoResponse::InitAsDefaultInstance() {}

ModifyBPInfoResponse::ModifyBPInfoResponse(const ModifyBPInfoResponse& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    result_(0u),
    pmid_id_(const_cast< ::std::string*>(&_default_pmid_id_)),
    public_key_(const_cast< ::std::string*>(&_default_public_key_)),
    signed_public_key_(const_cast< ::std::string*>(&_default_signed_public_key_)) {
  SharedCtor();
  MergeFrom(from);
}

void ModifyBPInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  pmid_id_ = const_cast< ::std::string*>(&_default_pmid_id_);
  public_key_ = const_cast< ::std::string*>(&_default_public_key_);
  signed_public_key_ = const_cast< ::std::string*>(&_default_signed_public_key_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModifyBPInfoResponse::~ModifyBPInfoResponse() {
  SharedDtor();
}

void ModifyBPInfoResponse::SharedDtor() {
  if (pmid_id_ != &_default_pmid_id_) {
    delete pmid_id_;
  }
  if (public_key_ != &_default_public_key_) {
    delete public_key_;
  }
  if (signed_public_key_ != &_default_signed_public_key_) {
    delete signed_public_key_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* ModifyBPInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModifyBPInfoResponse_descriptor_;
}

const ModifyBPInfoResponse& ModifyBPInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_5fservice_5fmessages_2eproto();  return *default_instance_;
}

ModifyBPInfoResponse* ModifyBPInfoResponse::default_instance_ = NULL;

ModifyBPInfoResponse* ModifyBPInfoResponse::New() const {
  return new ModifyBPInfoResponse;
}

void ModifyBPInfoResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    if (_has_bit(1)) {
      if (pmid_id_ != &_default_pmid_id_) {
        pmid_id_->clear();
      }
    }
    if (_has_bit(2)) {
      if (public_key_ != &_default_public_key_) {
        public_key_->clear();
      }
    }
    if (_has_bit(3)) {
      if (signed_public_key_ != &_default_signed_public_key_) {
        signed_public_key_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModifyBPInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_pmid_id;
        break;
      }
      
      // optional bytes pmid_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_pmid_id:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_pmid_id()));
        if (input->ExpectTag(26)) goto parse_public_key;
        break;
      }
      
      // optional bytes public_key = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_public_key:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_public_key()));
        if (input->ExpectTag(34)) goto parse_signed_public_key;
        break;
      }
      
      // optional bytes signed_public_key = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_signed_public_key:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_signed_public_key()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ModifyBPInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    ModifyBPInfoResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->result(), output);
  }
  
  // optional bytes pmid_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(2, this->pmid_id(), output);
  }
  
  // optional bytes public_key = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(3, this->public_key(), output);
  }
  
  // optional bytes signed_public_key = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(4, this->signed_public_key(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ModifyBPInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->result(), target);
  }
  
  // optional bytes pmid_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(2, this->pmid_id(), target);
  }
  
  // optional bytes public_key = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(3, this->public_key(), target);
  }
  
  // optional bytes signed_public_key = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(4, this->signed_public_key(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ModifyBPInfoResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
    // optional bytes pmid_id = 2;
    if (has_pmid_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->pmid_id());
    }
    
    // optional bytes public_key = 3;
    if (has_public_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->public_key());
    }
    
    // optional bytes signed_public_key = 4;
    if (has_signed_public_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->signed_public_key());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void ModifyBPInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModifyBPInfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModifyBPInfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModifyBPInfoResponse::MergeFrom(const ModifyBPInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_result(from.result());
    }
    if (from._has_bit(1)) {
      set_pmid_id(from.pmid_id());
    }
    if (from._has_bit(2)) {
      set_public_key(from.public_key());
    }
    if (from._has_bit(3)) {
      set_signed_public_key(from.signed_public_key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModifyBPInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModifyBPInfoResponse::CopyFrom(const ModifyBPInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModifyBPInfoResponse::Swap(ModifyBPInfoResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(pmid_id_, other->pmid_id_);
    std::swap(public_key_, other->public_key_);
    std::swap(signed_public_key_, other->signed_public_key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool ModifyBPInfoResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* ModifyBPInfoResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* ModifyBPInfoResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return ModifyBPInfoResponse_reflection_;
}

// ===================================================================

const ::std::string GetBPMessagesRequest::_default_bufferpacket_name_;
const ::std::string GetBPMessagesRequest::_default_public_key_;
const ::std::string GetBPMessagesRequest::_default_pmid_;
const ::std::string GetBPMessagesRequest::_default_signed_public_key_;
const ::std::string GetBPMessagesRequest::_default_signed_request_;
#ifndef _MSC_VER
const int GetBPMessagesRequest::kBufferpacketNameFieldNumber;
const int GetBPMessagesRequest::kPublicKeyFieldNumber;
const int GetBPMessagesRequest::kPmidFieldNumber;
const int GetBPMessagesRequest::kSignedPublicKeyFieldNumber;
const int GetBPMessagesRequest::kSignedRequestFieldNumber;
#endif  // !_MSC_VER

GetBPMessagesRequest::GetBPMessagesRequest()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    bufferpacket_name_(const_cast< ::std::string*>(&_default_bufferpacket_name_)),
    public_key_(const_cast< ::std::string*>(&_default_public_key_)),
    pmid_(const_cast< ::std::string*>(&_default_pmid_)),
    signed_public_key_(const_cast< ::std::string*>(&_default_signed_public_key_)),
    signed_request_(const_cast< ::std::string*>(&_default_signed_request_)) {
  SharedCtor();
}

void GetBPMessagesRequest::InitAsDefaultInstance() {}

GetBPMessagesRequest::GetBPMessagesRequest(const GetBPMessagesRequest& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    bufferpacket_name_(const_cast< ::std::string*>(&_default_bufferpacket_name_)),
    public_key_(const_cast< ::std::string*>(&_default_public_key_)),
    pmid_(const_cast< ::std::string*>(&_default_pmid_)),
    signed_public_key_(const_cast< ::std::string*>(&_default_signed_public_key_)),
    signed_request_(const_cast< ::std::string*>(&_default_signed_request_)) {
  SharedCtor();
  MergeFrom(from);
}

void GetBPMessagesRequest::SharedCtor() {
  _cached_size_ = 0;
  bufferpacket_name_ = const_cast< ::std::string*>(&_default_bufferpacket_name_);
  public_key_ = const_cast< ::std::string*>(&_default_public_key_);
  pmid_ = const_cast< ::std::string*>(&_default_pmid_);
  signed_public_key_ = const_cast< ::std::string*>(&_default_signed_public_key_);
  signed_request_ = const_cast< ::std::string*>(&_default_signed_request_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetBPMessagesRequest::~GetBPMessagesRequest() {
  SharedDtor();
}

void GetBPMessagesRequest::SharedDtor() {
  if (bufferpacket_name_ != &_default_bufferpacket_name_) {
    delete bufferpacket_name_;
  }
  if (public_key_ != &_default_public_key_) {
    delete public_key_;
  }
  if (pmid_ != &_default_pmid_) {
    delete pmid_;
  }
  if (signed_public_key_ != &_default_signed_public_key_) {
    delete signed_public_key_;
  }
  if (signed_request_ != &_default_signed_request_) {
    delete signed_request_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* GetBPMessagesRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetBPMessagesRequest_descriptor_;
}

const GetBPMessagesRequest& GetBPMessagesRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_5fservice_5fmessages_2eproto();  return *default_instance_;
}

GetBPMessagesRequest* GetBPMessagesRequest::default_instance_ = NULL;

GetBPMessagesRequest* GetBPMessagesRequest::New() const {
  return new GetBPMessagesRequest;
}

void GetBPMessagesRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (bufferpacket_name_ != &_default_bufferpacket_name_) {
        bufferpacket_name_->clear();
      }
    }
    if (_has_bit(1)) {
      if (public_key_ != &_default_public_key_) {
        public_key_->clear();
      }
    }
    if (_has_bit(2)) {
      if (pmid_ != &_default_pmid_) {
        pmid_->clear();
      }
    }
    if (_has_bit(3)) {
      if (signed_public_key_ != &_default_signed_public_key_) {
        signed_public_key_->clear();
      }
    }
    if (_has_bit(4)) {
      if (signed_request_ != &_default_signed_request_) {
        signed_request_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetBPMessagesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required bytes bufferpacket_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_bufferpacket_name()));
        if (input->ExpectTag(18)) goto parse_public_key;
        break;
      }
      
      // required bytes public_key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_public_key:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_public_key()));
        if (input->ExpectTag(26)) goto parse_pmid;
        break;
      }
      
      // required bytes pmid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_pmid:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_pmid()));
        if (input->ExpectTag(34)) goto parse_signed_public_key;
        break;
      }
      
      // required bytes signed_public_key = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_signed_public_key:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_signed_public_key()));
        if (input->ExpectTag(42)) goto parse_signed_request;
        break;
      }
      
      // required bytes signed_request = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_signed_request:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_signed_request()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetBPMessagesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    GetBPMessagesRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required bytes bufferpacket_name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(1, this->bufferpacket_name(), output);
  }
  
  // required bytes public_key = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(2, this->public_key(), output);
  }
  
  // required bytes pmid = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(3, this->pmid(), output);
  }
  
  // required bytes signed_public_key = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(4, this->signed_public_key(), output);
  }
  
  // required bytes signed_request = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(5, this->signed_request(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetBPMessagesRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes bufferpacket_name = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(1, this->bufferpacket_name(), target);
  }
  
  // required bytes public_key = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(2, this->public_key(), target);
  }
  
  // required bytes pmid = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(3, this->pmid(), target);
  }
  
  // required bytes signed_public_key = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(4, this->signed_public_key(), target);
  }
  
  // required bytes signed_request = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(5, this->signed_request(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetBPMessagesRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes bufferpacket_name = 1;
    if (has_bufferpacket_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->bufferpacket_name());
    }
    
    // required bytes public_key = 2;
    if (has_public_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->public_key());
    }
    
    // required bytes pmid = 3;
    if (has_pmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->pmid());
    }
    
    // required bytes signed_public_key = 4;
    if (has_signed_public_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->signed_public_key());
    }
    
    // required bytes signed_request = 5;
    if (has_signed_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->signed_request());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void GetBPMessagesRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetBPMessagesRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetBPMessagesRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetBPMessagesRequest::MergeFrom(const GetBPMessagesRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_bufferpacket_name(from.bufferpacket_name());
    }
    if (from._has_bit(1)) {
      set_public_key(from.public_key());
    }
    if (from._has_bit(2)) {
      set_pmid(from.pmid());
    }
    if (from._has_bit(3)) {
      set_signed_public_key(from.signed_public_key());
    }
    if (from._has_bit(4)) {
      set_signed_request(from.signed_request());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetBPMessagesRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBPMessagesRequest::CopyFrom(const GetBPMessagesRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBPMessagesRequest::Swap(GetBPMessagesRequest* other) {
  if (other != this) {
    std::swap(bufferpacket_name_, other->bufferpacket_name_);
    std::swap(public_key_, other->public_key_);
    std::swap(pmid_, other->pmid_);
    std::swap(signed_public_key_, other->signed_public_key_);
    std::swap(signed_request_, other->signed_request_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool GetBPMessagesRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* GetBPMessagesRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* GetBPMessagesRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return GetBPMessagesRequest_reflection_;
}

// ===================================================================

const ::std::string GetBPMessagesResponse::_default_pmid_id_;
const ::std::string GetBPMessagesResponse::_default_public_key_;
const ::std::string GetBPMessagesResponse::_default_signed_public_key_;
#ifndef _MSC_VER
const int GetBPMessagesResponse::kResultFieldNumber;
const int GetBPMessagesResponse::kMessagesFieldNumber;
const int GetBPMessagesResponse::kPmidIdFieldNumber;
const int GetBPMessagesResponse::kPublicKeyFieldNumber;
const int GetBPMessagesResponse::kSignedPublicKeyFieldNumber;
#endif  // !_MSC_VER

GetBPMessagesResponse::GetBPMessagesResponse()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    result_(0u),
    messages_(),
    pmid_id_(const_cast< ::std::string*>(&_default_pmid_id_)),
    public_key_(const_cast< ::std::string*>(&_default_public_key_)),
    signed_public_key_(const_cast< ::std::string*>(&_default_signed_public_key_)) {
  SharedCtor();
}

void GetBPMessagesResponse::InitAsDefaultInstance() {}

GetBPMessagesResponse::GetBPMessagesResponse(const GetBPMessagesResponse& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    result_(0u),
    messages_(),
    pmid_id_(const_cast< ::std::string*>(&_default_pmid_id_)),
    public_key_(const_cast< ::std::string*>(&_default_public_key_)),
    signed_public_key_(const_cast< ::std::string*>(&_default_signed_public_key_)) {
  SharedCtor();
  MergeFrom(from);
}

void GetBPMessagesResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  pmid_id_ = const_cast< ::std::string*>(&_default_pmid_id_);
  public_key_ = const_cast< ::std::string*>(&_default_public_key_);
  signed_public_key_ = const_cast< ::std::string*>(&_default_signed_public_key_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetBPMessagesResponse::~GetBPMessagesResponse() {
  SharedDtor();
}

void GetBPMessagesResponse::SharedDtor() {
  if (pmid_id_ != &_default_pmid_id_) {
    delete pmid_id_;
  }
  if (public_key_ != &_default_public_key_) {
    delete public_key_;
  }
  if (signed_public_key_ != &_default_signed_public_key_) {
    delete signed_public_key_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* GetBPMessagesResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetBPMessagesResponse_descriptor_;
}

const GetBPMessagesResponse& GetBPMessagesResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_5fservice_5fmessages_2eproto();  return *default_instance_;
}

GetBPMessagesResponse* GetBPMessagesResponse::default_instance_ = NULL;

GetBPMessagesResponse* GetBPMessagesResponse::New() const {
  return new GetBPMessagesResponse;
}

void GetBPMessagesResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    if (_has_bit(2)) {
      if (pmid_id_ != &_default_pmid_id_) {
        pmid_id_->clear();
      }
    }
    if (_has_bit(3)) {
      if (public_key_ != &_default_public_key_) {
        public_key_->clear();
      }
    }
    if (_has_bit(4)) {
      if (signed_public_key_ != &_default_signed_public_key_) {
        signed_public_key_->clear();
      }
    }
  }
  messages_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetBPMessagesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_messages;
        break;
      }
      
      // repeated bytes messages = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_messages:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(
             input, add_messages()));
        if (input->ExpectTag(18)) goto parse_messages;
        if (input->ExpectTag(26)) goto parse_pmid_id;
        break;
      }
      
      // optional bytes pmid_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_pmid_id:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_pmid_id()));
        if (input->ExpectTag(34)) goto parse_public_key;
        break;
      }
      
      // optional bytes public_key = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_public_key:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_public_key()));
        if (input->ExpectTag(42)) goto parse_signed_public_key;
        break;
      }
      
      // optional bytes signed_public_key = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_signed_public_key:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_signed_public_key()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetBPMessagesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    GetBPMessagesResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->result(), output);
  }
  
  // repeated bytes messages = 2;
  for (int i = 0; i < this->messages_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteBytes(2, this->messages(i), output);
  }
  
  // optional bytes pmid_id = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(3, this->pmid_id(), output);
  }
  
  // optional bytes public_key = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(4, this->public_key(), output);
  }
  
  // optional bytes signed_public_key = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(5, this->signed_public_key(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetBPMessagesResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->result(), target);
  }
  
  // repeated bytes messages = 2;
  for (int i = 0; i < this->messages_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(2, this->messages(i), target);
  }
  
  // optional bytes pmid_id = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(3, this->pmid_id(), target);
  }
  
  // optional bytes public_key = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(4, this->public_key(), target);
  }
  
  // optional bytes signed_public_key = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(5, this->signed_public_key(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetBPMessagesResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
    // optional bytes pmid_id = 3;
    if (has_pmid_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->pmid_id());
    }
    
    // optional bytes public_key = 4;
    if (has_public_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->public_key());
    }
    
    // optional bytes signed_public_key = 5;
    if (has_signed_public_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->signed_public_key());
    }
    
  }
  // repeated bytes messages = 2;
  total_size += 1 * this->messages_size();
  for (int i = 0; i < this->messages_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormat::BytesSize(
      this->messages(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void GetBPMessagesResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetBPMessagesResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetBPMessagesResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetBPMessagesResponse::MergeFrom(const GetBPMessagesResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  messages_.MergeFrom(from.messages_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_result(from.result());
    }
    if (from._has_bit(2)) {
      set_pmid_id(from.pmid_id());
    }
    if (from._has_bit(3)) {
      set_public_key(from.public_key());
    }
    if (from._has_bit(4)) {
      set_signed_public_key(from.signed_public_key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetBPMessagesResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBPMessagesResponse::CopyFrom(const GetBPMessagesResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBPMessagesResponse::Swap(GetBPMessagesResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    messages_.Swap(&other->messages_);
    std::swap(pmid_id_, other->pmid_id_);
    std::swap(public_key_, other->public_key_);
    std::swap(signed_public_key_, other->signed_public_key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool GetBPMessagesResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* GetBPMessagesResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* GetBPMessagesResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return GetBPMessagesResponse_reflection_;
}

// ===================================================================

const ::std::string AddBPMessageRequest::_default_bufferpacket_name_;
const ::std::string AddBPMessageRequest::_default_data_;
const ::std::string AddBPMessageRequest::_default_pmid_;
const ::std::string AddBPMessageRequest::_default_public_key_;
const ::std::string AddBPMessageRequest::_default_signed_public_key_;
const ::std::string AddBPMessageRequest::_default_signed_request_;
#ifndef _MSC_VER
const int AddBPMessageRequest::kBufferpacketNameFieldNumber;
const int AddBPMessageRequest::kDataFieldNumber;
const int AddBPMessageRequest::kPmidFieldNumber;
const int AddBPMessageRequest::kPublicKeyFieldNumber;
const int AddBPMessageRequest::kSignedPublicKeyFieldNumber;
const int AddBPMessageRequest::kSignedRequestFieldNumber;
#endif  // !_MSC_VER

AddBPMessageRequest::AddBPMessageRequest()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    bufferpacket_name_(const_cast< ::std::string*>(&_default_bufferpacket_name_)),
    data_(const_cast< ::std::string*>(&_default_data_)),
    pmid_(const_cast< ::std::string*>(&_default_pmid_)),
    public_key_(const_cast< ::std::string*>(&_default_public_key_)),
    signed_public_key_(const_cast< ::std::string*>(&_default_signed_public_key_)),
    signed_request_(const_cast< ::std::string*>(&_default_signed_request_)) {
  SharedCtor();
}

void AddBPMessageRequest::InitAsDefaultInstance() {}

AddBPMessageRequest::AddBPMessageRequest(const AddBPMessageRequest& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    bufferpacket_name_(const_cast< ::std::string*>(&_default_bufferpacket_name_)),
    data_(const_cast< ::std::string*>(&_default_data_)),
    pmid_(const_cast< ::std::string*>(&_default_pmid_)),
    public_key_(const_cast< ::std::string*>(&_default_public_key_)),
    signed_public_key_(const_cast< ::std::string*>(&_default_signed_public_key_)),
    signed_request_(const_cast< ::std::string*>(&_default_signed_request_)) {
  SharedCtor();
  MergeFrom(from);
}

void AddBPMessageRequest::SharedCtor() {
  _cached_size_ = 0;
  bufferpacket_name_ = const_cast< ::std::string*>(&_default_bufferpacket_name_);
  data_ = const_cast< ::std::string*>(&_default_data_);
  pmid_ = const_cast< ::std::string*>(&_default_pmid_);
  public_key_ = const_cast< ::std::string*>(&_default_public_key_);
  signed_public_key_ = const_cast< ::std::string*>(&_default_signed_public_key_);
  signed_request_ = const_cast< ::std::string*>(&_default_signed_request_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddBPMessageRequest::~AddBPMessageRequest() {
  SharedDtor();
}

void AddBPMessageRequest::SharedDtor() {
  if (bufferpacket_name_ != &_default_bufferpacket_name_) {
    delete bufferpacket_name_;
  }
  if (data_ != &_default_data_) {
    delete data_;
  }
  if (pmid_ != &_default_pmid_) {
    delete pmid_;
  }
  if (public_key_ != &_default_public_key_) {
    delete public_key_;
  }
  if (signed_public_key_ != &_default_signed_public_key_) {
    delete signed_public_key_;
  }
  if (signed_request_ != &_default_signed_request_) {
    delete signed_request_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* AddBPMessageRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddBPMessageRequest_descriptor_;
}

const AddBPMessageRequest& AddBPMessageRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_5fservice_5fmessages_2eproto();  return *default_instance_;
}

AddBPMessageRequest* AddBPMessageRequest::default_instance_ = NULL;

AddBPMessageRequest* AddBPMessageRequest::New() const {
  return new AddBPMessageRequest;
}

void AddBPMessageRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (bufferpacket_name_ != &_default_bufferpacket_name_) {
        bufferpacket_name_->clear();
      }
    }
    if (_has_bit(1)) {
      if (data_ != &_default_data_) {
        data_->clear();
      }
    }
    if (_has_bit(2)) {
      if (pmid_ != &_default_pmid_) {
        pmid_->clear();
      }
    }
    if (_has_bit(3)) {
      if (public_key_ != &_default_public_key_) {
        public_key_->clear();
      }
    }
    if (_has_bit(4)) {
      if (signed_public_key_ != &_default_signed_public_key_) {
        signed_public_key_->clear();
      }
    }
    if (_has_bit(5)) {
      if (signed_request_ != &_default_signed_request_) {
        signed_request_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddBPMessageRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required bytes bufferpacket_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_bufferpacket_name()));
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }
      
      // required bytes data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_data:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_data()));
        if (input->ExpectTag(26)) goto parse_pmid;
        break;
      }
      
      // required bytes pmid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_pmid:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_pmid()));
        if (input->ExpectTag(34)) goto parse_public_key;
        break;
      }
      
      // required bytes public_key = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_public_key:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_public_key()));
        if (input->ExpectTag(42)) goto parse_signed_public_key;
        break;
      }
      
      // required bytes signed_public_key = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_signed_public_key:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_signed_public_key()));
        if (input->ExpectTag(50)) goto parse_signed_request;
        break;
      }
      
      // required bytes signed_request = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_signed_request:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_signed_request()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddBPMessageRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    AddBPMessageRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required bytes bufferpacket_name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(1, this->bufferpacket_name(), output);
  }
  
  // required bytes data = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(2, this->data(), output);
  }
  
  // required bytes pmid = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(3, this->pmid(), output);
  }
  
  // required bytes public_key = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(4, this->public_key(), output);
  }
  
  // required bytes signed_public_key = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(5, this->signed_public_key(), output);
  }
  
  // required bytes signed_request = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(6, this->signed_request(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddBPMessageRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes bufferpacket_name = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(1, this->bufferpacket_name(), target);
  }
  
  // required bytes data = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(2, this->data(), target);
  }
  
  // required bytes pmid = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(3, this->pmid(), target);
  }
  
  // required bytes public_key = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(4, this->public_key(), target);
  }
  
  // required bytes signed_public_key = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(5, this->signed_public_key(), target);
  }
  
  // required bytes signed_request = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(6, this->signed_request(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddBPMessageRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes bufferpacket_name = 1;
    if (has_bufferpacket_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->bufferpacket_name());
    }
    
    // required bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->data());
    }
    
    // required bytes pmid = 3;
    if (has_pmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->pmid());
    }
    
    // required bytes public_key = 4;
    if (has_public_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->public_key());
    }
    
    // required bytes signed_public_key = 5;
    if (has_signed_public_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->signed_public_key());
    }
    
    // required bytes signed_request = 6;
    if (has_signed_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->signed_request());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void AddBPMessageRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddBPMessageRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddBPMessageRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddBPMessageRequest::MergeFrom(const AddBPMessageRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_bufferpacket_name(from.bufferpacket_name());
    }
    if (from._has_bit(1)) {
      set_data(from.data());
    }
    if (from._has_bit(2)) {
      set_pmid(from.pmid());
    }
    if (from._has_bit(3)) {
      set_public_key(from.public_key());
    }
    if (from._has_bit(4)) {
      set_signed_public_key(from.signed_public_key());
    }
    if (from._has_bit(5)) {
      set_signed_request(from.signed_request());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddBPMessageRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddBPMessageRequest::CopyFrom(const AddBPMessageRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddBPMessageRequest::Swap(AddBPMessageRequest* other) {
  if (other != this) {
    std::swap(bufferpacket_name_, other->bufferpacket_name_);
    std::swap(data_, other->data_);
    std::swap(pmid_, other->pmid_);
    std::swap(public_key_, other->public_key_);
    std::swap(signed_public_key_, other->signed_public_key_);
    std::swap(signed_request_, other->signed_request_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool AddBPMessageRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* AddBPMessageRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* AddBPMessageRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return AddBPMessageRequest_reflection_;
}

// ===================================================================

const ::std::string AddBPMessageResponse::_default_pmid_id_;
const ::std::string AddBPMessageResponse::_default_public_key_;
const ::std::string AddBPMessageResponse::_default_signed_public_key_;
#ifndef _MSC_VER
const int AddBPMessageResponse::kResultFieldNumber;
const int AddBPMessageResponse::kPmidIdFieldNumber;
const int AddBPMessageResponse::kPublicKeyFieldNumber;
const int AddBPMessageResponse::kSignedPublicKeyFieldNumber;
#endif  // !_MSC_VER

AddBPMessageResponse::AddBPMessageResponse()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    result_(0u),
    pmid_id_(const_cast< ::std::string*>(&_default_pmid_id_)),
    public_key_(const_cast< ::std::string*>(&_default_public_key_)),
    signed_public_key_(const_cast< ::std::string*>(&_default_signed_public_key_)) {
  SharedCtor();
}

void AddBPMessageResponse::InitAsDefaultInstance() {}

AddBPMessageResponse::AddBPMessageResponse(const AddBPMessageResponse& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    result_(0u),
    pmid_id_(const_cast< ::std::string*>(&_default_pmid_id_)),
    public_key_(const_cast< ::std::string*>(&_default_public_key_)),
    signed_public_key_(const_cast< ::std::string*>(&_default_signed_public_key_)) {
  SharedCtor();
  MergeFrom(from);
}

void AddBPMessageResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  pmid_id_ = const_cast< ::std::string*>(&_default_pmid_id_);
  public_key_ = const_cast< ::std::string*>(&_default_public_key_);
  signed_public_key_ = const_cast< ::std::string*>(&_default_signed_public_key_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddBPMessageResponse::~AddBPMessageResponse() {
  SharedDtor();
}

void AddBPMessageResponse::SharedDtor() {
  if (pmid_id_ != &_default_pmid_id_) {
    delete pmid_id_;
  }
  if (public_key_ != &_default_public_key_) {
    delete public_key_;
  }
  if (signed_public_key_ != &_default_signed_public_key_) {
    delete signed_public_key_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* AddBPMessageResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddBPMessageResponse_descriptor_;
}

const AddBPMessageResponse& AddBPMessageResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_5fservice_5fmessages_2eproto();  return *default_instance_;
}

AddBPMessageResponse* AddBPMessageResponse::default_instance_ = NULL;

AddBPMessageResponse* AddBPMessageResponse::New() const {
  return new AddBPMessageResponse;
}

void AddBPMessageResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    if (_has_bit(1)) {
      if (pmid_id_ != &_default_pmid_id_) {
        pmid_id_->clear();
      }
    }
    if (_has_bit(2)) {
      if (public_key_ != &_default_public_key_) {
        public_key_->clear();
      }
    }
    if (_has_bit(3)) {
      if (signed_public_key_ != &_default_signed_public_key_) {
        signed_public_key_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddBPMessageResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_pmid_id;
        break;
      }
      
      // optional bytes pmid_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_pmid_id:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_pmid_id()));
        if (input->ExpectTag(26)) goto parse_public_key;
        break;
      }
      
      // optional bytes public_key = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_public_key:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_public_key()));
        if (input->ExpectTag(34)) goto parse_signed_public_key;
        break;
      }
      
      // optional bytes signed_public_key = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_signed_public_key:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_signed_public_key()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddBPMessageResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    AddBPMessageResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->result(), output);
  }
  
  // optional bytes pmid_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(2, this->pmid_id(), output);
  }
  
  // optional bytes public_key = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(3, this->public_key(), output);
  }
  
  // optional bytes signed_public_key = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(4, this->signed_public_key(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddBPMessageResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->result(), target);
  }
  
  // optional bytes pmid_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(2, this->pmid_id(), target);
  }
  
  // optional bytes public_key = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(3, this->public_key(), target);
  }
  
  // optional bytes signed_public_key = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(4, this->signed_public_key(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddBPMessageResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
    // optional bytes pmid_id = 2;
    if (has_pmid_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->pmid_id());
    }
    
    // optional bytes public_key = 3;
    if (has_public_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->public_key());
    }
    
    // optional bytes signed_public_key = 4;
    if (has_signed_public_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->signed_public_key());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void AddBPMessageResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddBPMessageResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddBPMessageResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddBPMessageResponse::MergeFrom(const AddBPMessageResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_result(from.result());
    }
    if (from._has_bit(1)) {
      set_pmid_id(from.pmid_id());
    }
    if (from._has_bit(2)) {
      set_public_key(from.public_key());
    }
    if (from._has_bit(3)) {
      set_signed_public_key(from.signed_public_key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddBPMessageResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddBPMessageResponse::CopyFrom(const AddBPMessageResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddBPMessageResponse::Swap(AddBPMessageResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(pmid_id_, other->pmid_id_);
    std::swap(public_key_, other->public_key_);
    std::swap(signed_public_key_, other->signed_public_key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool AddBPMessageResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* AddBPMessageResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* AddBPMessageResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return AddBPMessageResponse_reflection_;
}

}  // namespace maidsafe
