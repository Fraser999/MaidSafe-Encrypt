// Generated by the protocol buffer compiler.  DO NOT EDIT!

#include "maidsafe_service_messages.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format_inl.h>

namespace maidsafe {

namespace {

const ::google::protobuf::Descriptor* IOUAuthority_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IOUAuthority_reflection_ = NULL;
const ::google::protobuf::Descriptor* IOU_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IOU_reflection_ = NULL;
const ::google::protobuf::Descriptor* StorePrepRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StorePrepRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* StorePrepResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StorePrepResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* StoreRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StoreRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* StoreResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StoreResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* StoreIOURequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StoreIOURequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* StoreIOUResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StoreIOUResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* IOUDoneRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IOUDoneRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* IOUDoneResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IOUDoneResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RankAuthority_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RankAuthority_reflection_ = NULL;
const ::google::protobuf::Descriptor* StoreReferenceRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StoreReferenceRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* StoreReferenceResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StoreReferenceResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CheckChunkRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CheckChunkRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CheckChunkResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CheckChunkResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ValidityCheckRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ValidityCheckRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ValidityCheckResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ValidityCheckResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SwapChunkRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SwapChunkRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SwapChunkResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SwapChunkResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* VaultCommunication_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VaultCommunication_reflection_ = NULL;
const ::google::protobuf::Descriptor* VaultStatusRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VaultStatusRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* VaultStatusResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VaultStatusResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* OwnVaultRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OwnVaultRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* OwnVaultResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OwnVaultResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* IsOwnedRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IsOwnedRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* IsOwnedResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IsOwnedResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateBPRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateBPRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateBPResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateBPResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModifyBPInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModifyBPInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModifyBPInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModifyBPInfoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetBPMessagesRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetBPMessagesRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetBPMessagesResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetBPMessagesResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddBPMessageRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddBPMessageRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddBPMessageResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddBPMessageResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* OwnVaultResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* VaultStatus_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_maidsafe_5fservice_5fmessages_2eproto() {
  protobuf_AddDesc_maidsafe_5fservice_5fmessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "maidsafe_service_messages.proto");
  GOOGLE_CHECK(file != NULL);
  IOUAuthority_descriptor_ = file->message_type(0);
  static const int IOUAuthority_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IOUAuthority, data_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IOUAuthority, pmid_),
  };
  IOUAuthority_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IOUAuthority_descriptor_,
      IOUAuthority::default_instance_,
      IOUAuthority_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IOUAuthority, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IOUAuthority, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IOUAuthority));
  IOU_descriptor_ = file->message_type(1);
  static const int IOU_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IOU, serialised_iou_authority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IOU, signed_iou_authority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IOU, signature_),
  };
  IOU_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IOU_descriptor_,
      IOU::default_instance_,
      IOU_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IOU, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IOU, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IOU));
  StorePrepRequest_descriptor_ = file->message_type(2);
  static const int StorePrepRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorePrepRequest, chunkname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorePrepRequest, data_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorePrepRequest, pmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorePrepRequest, public_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorePrepRequest, signed_public_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorePrepRequest, signed_request_),
  };
  StorePrepRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StorePrepRequest_descriptor_,
      StorePrepRequest::default_instance_,
      StorePrepRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorePrepRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorePrepRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StorePrepRequest));
  StorePrepResponse_descriptor_ = file->message_type(3);
  static const int StorePrepResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorePrepResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorePrepResponse, pmid_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorePrepResponse, iou_authority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorePrepResponse, signed_iou_authority_),
  };
  StorePrepResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StorePrepResponse_descriptor_,
      StorePrepResponse::default_instance_,
      StorePrepResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorePrepResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorePrepResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StorePrepResponse));
  StoreRequest_descriptor_ = file->message_type(4);
  static const int StoreRequest_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreRequest, chunkname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreRequest, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreRequest, pmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreRequest, public_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreRequest, signed_public_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreRequest, signed_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreRequest, data_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreRequest, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreRequest, chunklet_size_),
  };
  StoreRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StoreRequest_descriptor_,
      StoreRequest::default_instance_,
      StoreRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StoreRequest));
  StoreResponse_descriptor_ = file->message_type(5);
  static const int StoreResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreResponse, pmid_id_),
  };
  StoreResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StoreResponse_descriptor_,
      StoreResponse::default_instance_,
      StoreResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StoreResponse));
  StoreIOURequest_descriptor_ = file->message_type(6);
  static const int StoreIOURequest_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreIOURequest, chunkname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreIOURequest, data_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreIOURequest, collector_pmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreIOURequest, iou_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreIOURequest, own_pmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreIOURequest, public_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreIOURequest, signed_public_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreIOURequest, signed_request_),
  };
  StoreIOURequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StoreIOURequest_descriptor_,
      StoreIOURequest::default_instance_,
      StoreIOURequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreIOURequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreIOURequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StoreIOURequest));
  StoreIOUResponse_descriptor_ = file->message_type(7);
  static const int StoreIOUResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreIOUResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreIOUResponse, pmid_id_),
  };
  StoreIOUResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StoreIOUResponse_descriptor_,
      StoreIOUResponse::default_instance_,
      StoreIOUResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreIOUResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreIOUResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StoreIOUResponse));
  IOUDoneRequest_descriptor_ = file->message_type(8);
  static const int IOUDoneRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IOUDoneRequest, chunkname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IOUDoneRequest, public_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IOUDoneRequest, signed_public_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IOUDoneRequest, signed_request_),
  };
  IOUDoneRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IOUDoneRequest_descriptor_,
      IOUDoneRequest::default_instance_,
      IOUDoneRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IOUDoneRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IOUDoneRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IOUDoneRequest));
  IOUDoneResponse_descriptor_ = file->message_type(9);
  static const int IOUDoneResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IOUDoneResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IOUDoneResponse, pmid_id_),
  };
  IOUDoneResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IOUDoneResponse_descriptor_,
      IOUDoneResponse::default_instance_,
      IOUDoneResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IOUDoneResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IOUDoneResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IOUDoneResponse));
  RankAuthority_descriptor_ = file->message_type(10);
  static const int RankAuthority_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankAuthority, chunkname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankAuthority, data_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankAuthority, pmid_),
  };
  RankAuthority_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RankAuthority_descriptor_,
      RankAuthority::default_instance_,
      RankAuthority_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankAuthority, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankAuthority, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RankAuthority));
  StoreReferenceRequest_descriptor_ = file->message_type(11);
  static const int StoreReferenceRequest_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreReferenceRequest, chunkname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreReferenceRequest, pmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreReferenceRequest, signed_pmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreReferenceRequest, public_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreReferenceRequest, signed_public_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreReferenceRequest, signed_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreReferenceRequest, no_iou_rank_),
  };
  StoreReferenceRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StoreReferenceRequest_descriptor_,
      StoreReferenceRequest::default_instance_,
      StoreReferenceRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreReferenceRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreReferenceRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StoreReferenceRequest));
  StoreReferenceResponse_descriptor_ = file->message_type(12);
  static const int StoreReferenceResponse_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreReferenceResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreReferenceResponse, rank_authority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreReferenceResponse, signed_rank_authority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreReferenceResponse, iou_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreReferenceResponse, pmid_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreReferenceResponse, public_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreReferenceResponse, signed_public_key_),
  };
  StoreReferenceResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StoreReferenceResponse_descriptor_,
      StoreReferenceResponse::default_instance_,
      StoreReferenceResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreReferenceResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreReferenceResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StoreReferenceResponse));
  DeleteRequest_descriptor_ = file->message_type(13);
  static const int DeleteRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteRequest, chunkname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteRequest, public_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteRequest, signed_public_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteRequest, signed_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteRequest, data_type_),
  };
  DeleteRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteRequest_descriptor_,
      DeleteRequest::default_instance_,
      DeleteRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteRequest));
  DeleteResponse_descriptor_ = file->message_type(14);
  static const int DeleteResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteResponse, pmid_id_),
  };
  DeleteResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteResponse_descriptor_,
      DeleteResponse::default_instance_,
      DeleteResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteResponse));
  GetRequest_descriptor_ = file->message_type(15);
  static const int GetRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRequest, chunkname_),
  };
  GetRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetRequest_descriptor_,
      GetRequest::default_instance_,
      GetRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetRequest));
  GetResponse_descriptor_ = file->message_type(16);
  static const int GetResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetResponse, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetResponse, pmid_id_),
  };
  GetResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetResponse_descriptor_,
      GetResponse::default_instance_,
      GetResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetResponse));
  CheckChunkRequest_descriptor_ = file->message_type(17);
  static const int CheckChunkRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckChunkRequest, chunkname_),
  };
  CheckChunkRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CheckChunkRequest_descriptor_,
      CheckChunkRequest::default_instance_,
      CheckChunkRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckChunkRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckChunkRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CheckChunkRequest));
  CheckChunkResponse_descriptor_ = file->message_type(18);
  static const int CheckChunkResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckChunkResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckChunkResponse, pmid_id_),
  };
  CheckChunkResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CheckChunkResponse_descriptor_,
      CheckChunkResponse::default_instance_,
      CheckChunkResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckChunkResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckChunkResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CheckChunkResponse));
  ValidityCheckRequest_descriptor_ = file->message_type(19);
  static const int ValidityCheckRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValidityCheckRequest, chunkname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValidityCheckRequest, random_data_),
  };
  ValidityCheckRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ValidityCheckRequest_descriptor_,
      ValidityCheckRequest::default_instance_,
      ValidityCheckRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValidityCheckRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValidityCheckRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ValidityCheckRequest));
  ValidityCheckResponse_descriptor_ = file->message_type(20);
  static const int ValidityCheckResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValidityCheckResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValidityCheckResponse, hash_content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValidityCheckResponse, pmid_id_),
  };
  ValidityCheckResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ValidityCheckResponse_descriptor_,
      ValidityCheckResponse::default_instance_,
      ValidityCheckResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValidityCheckResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValidityCheckResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ValidityCheckResponse));
  UpdateRequest_descriptor_ = file->message_type(21);
  static const int UpdateRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateRequest, chunkname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateRequest, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateRequest, public_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateRequest, signed_public_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateRequest, signed_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateRequest, data_type_),
  };
  UpdateRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateRequest_descriptor_,
      UpdateRequest::default_instance_,
      UpdateRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateRequest));
  UpdateResponse_descriptor_ = file->message_type(22);
  static const int UpdateResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateResponse, pmid_id_),
  };
  UpdateResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateResponse_descriptor_,
      UpdateResponse::default_instance_,
      UpdateResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateResponse));
  SwapChunkRequest_descriptor_ = file->message_type(23);
  static const int SwapChunkRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapChunkRequest, request_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapChunkRequest, chunkname1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapChunkRequest, chunkcontent1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapChunkRequest, size1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapChunkRequest, chunkname2_),
  };
  SwapChunkRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SwapChunkRequest_descriptor_,
      SwapChunkRequest::default_instance_,
      SwapChunkRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapChunkRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapChunkRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SwapChunkRequest));
  SwapChunkResponse_descriptor_ = file->message_type(24);
  static const int SwapChunkResponse_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapChunkResponse, request_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapChunkResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapChunkResponse, chunkname1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapChunkResponse, chunkcontent1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapChunkResponse, size1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapChunkResponse, chunkname2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapChunkResponse, chunkcontent2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapChunkResponse, size2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapChunkResponse, pmid_id_),
  };
  SwapChunkResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SwapChunkResponse_descriptor_,
      SwapChunkResponse::default_instance_,
      SwapChunkResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapChunkResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapChunkResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SwapChunkResponse));
  VaultCommunication_descriptor_ = file->message_type(25);
  static const int VaultCommunication_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VaultCommunication, chunkstore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VaultCommunication, offered_space_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VaultCommunication, free_space_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VaultCommunication, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VaultCommunication, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VaultCommunication, timestamp_),
  };
  VaultCommunication_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VaultCommunication_descriptor_,
      VaultCommunication::default_instance_,
      VaultCommunication_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VaultCommunication, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VaultCommunication, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VaultCommunication));
  VaultStatusRequest_descriptor_ = file->message_type(26);
  static const int VaultStatusRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VaultStatusRequest, encrypted_request_),
  };
  VaultStatusRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VaultStatusRequest_descriptor_,
      VaultStatusRequest::default_instance_,
      VaultStatusRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VaultStatusRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VaultStatusRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VaultStatusRequest));
  VaultStatusResponse_descriptor_ = file->message_type(27);
  static const int VaultStatusResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VaultStatusResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VaultStatusResponse, encrypted_response_),
  };
  VaultStatusResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VaultStatusResponse_descriptor_,
      VaultStatusResponse::default_instance_,
      VaultStatusResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VaultStatusResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VaultStatusResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VaultStatusResponse));
  OwnVaultRequest_descriptor_ = file->message_type(28);
  static const int OwnVaultRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OwnVaultRequest, public_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OwnVaultRequest, private_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OwnVaultRequest, signed_public_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OwnVaultRequest, chunkstore_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OwnVaultRequest, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OwnVaultRequest, space_),
  };
  OwnVaultRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OwnVaultRequest_descriptor_,
      OwnVaultRequest::default_instance_,
      OwnVaultRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OwnVaultRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OwnVaultRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OwnVaultRequest));
  OwnVaultResponse_descriptor_ = file->message_type(29);
  static const int OwnVaultResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OwnVaultResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OwnVaultResponse, pmid_name_),
  };
  OwnVaultResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OwnVaultResponse_descriptor_,
      OwnVaultResponse::default_instance_,
      OwnVaultResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OwnVaultResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OwnVaultResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OwnVaultResponse));
  IsOwnedRequest_descriptor_ = file->message_type(30);
  static const int IsOwnedRequest_offsets_[1] = {
  };
  IsOwnedRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IsOwnedRequest_descriptor_,
      IsOwnedRequest::default_instance_,
      IsOwnedRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsOwnedRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsOwnedRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IsOwnedRequest));
  IsOwnedResponse_descriptor_ = file->message_type(31);
  static const int IsOwnedResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsOwnedResponse, status_),
  };
  IsOwnedResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IsOwnedResponse_descriptor_,
      IsOwnedResponse::default_instance_,
      IsOwnedResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsOwnedResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsOwnedResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IsOwnedResponse));
  CreateBPRequest_descriptor_ = file->message_type(32);
  static const int CreateBPRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateBPRequest, bufferpacket_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateBPRequest, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateBPRequest, pmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateBPRequest, public_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateBPRequest, signed_public_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateBPRequest, signed_request_),
  };
  CreateBPRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateBPRequest_descriptor_,
      CreateBPRequest::default_instance_,
      CreateBPRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateBPRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateBPRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateBPRequest));
  CreateBPResponse_descriptor_ = file->message_type(33);
  static const int CreateBPResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateBPResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateBPResponse, pmid_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateBPResponse, public_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateBPResponse, signed_public_key_),
  };
  CreateBPResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateBPResponse_descriptor_,
      CreateBPResponse::default_instance_,
      CreateBPResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateBPResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateBPResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateBPResponse));
  ModifyBPInfoRequest_descriptor_ = file->message_type(34);
  static const int ModifyBPInfoRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyBPInfoRequest, bufferpacket_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyBPInfoRequest, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyBPInfoRequest, pmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyBPInfoRequest, public_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyBPInfoRequest, signed_public_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyBPInfoRequest, signed_request_),
  };
  ModifyBPInfoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModifyBPInfoRequest_descriptor_,
      ModifyBPInfoRequest::default_instance_,
      ModifyBPInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyBPInfoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyBPInfoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModifyBPInfoRequest));
  ModifyBPInfoResponse_descriptor_ = file->message_type(35);
  static const int ModifyBPInfoResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyBPInfoResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyBPInfoResponse, pmid_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyBPInfoResponse, public_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyBPInfoResponse, signed_public_key_),
  };
  ModifyBPInfoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModifyBPInfoResponse_descriptor_,
      ModifyBPInfoResponse::default_instance_,
      ModifyBPInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyBPInfoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyBPInfoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModifyBPInfoResponse));
  GetBPMessagesRequest_descriptor_ = file->message_type(36);
  static const int GetBPMessagesRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBPMessagesRequest, bufferpacket_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBPMessagesRequest, public_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBPMessagesRequest, pmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBPMessagesRequest, signed_public_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBPMessagesRequest, signed_request_),
  };
  GetBPMessagesRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetBPMessagesRequest_descriptor_,
      GetBPMessagesRequest::default_instance_,
      GetBPMessagesRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBPMessagesRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBPMessagesRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetBPMessagesRequest));
  GetBPMessagesResponse_descriptor_ = file->message_type(37);
  static const int GetBPMessagesResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBPMessagesResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBPMessagesResponse, messages_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBPMessagesResponse, pmid_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBPMessagesResponse, public_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBPMessagesResponse, signed_public_key_),
  };
  GetBPMessagesResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetBPMessagesResponse_descriptor_,
      GetBPMessagesResponse::default_instance_,
      GetBPMessagesResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBPMessagesResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBPMessagesResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetBPMessagesResponse));
  AddBPMessageRequest_descriptor_ = file->message_type(38);
  static const int AddBPMessageRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBPMessageRequest, bufferpacket_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBPMessageRequest, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBPMessageRequest, pmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBPMessageRequest, public_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBPMessageRequest, signed_public_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBPMessageRequest, signed_request_),
  };
  AddBPMessageRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddBPMessageRequest_descriptor_,
      AddBPMessageRequest::default_instance_,
      AddBPMessageRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBPMessageRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBPMessageRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddBPMessageRequest));
  AddBPMessageResponse_descriptor_ = file->message_type(39);
  static const int AddBPMessageResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBPMessageResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBPMessageResponse, pmid_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBPMessageResponse, public_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBPMessageResponse, signed_public_key_),
  };
  AddBPMessageResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddBPMessageResponse_descriptor_,
      AddBPMessageResponse::default_instance_,
      AddBPMessageResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBPMessageResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBPMessageResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddBPMessageResponse));
  OwnVaultResult_descriptor_ = file->enum_type(0);
  VaultStatus_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_maidsafe_5fservice_5fmessages_2eproto);
}

void protobuf_RegisterTypes() {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IOUAuthority_descriptor_, &IOUAuthority::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IOU_descriptor_, &IOU::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StorePrepRequest_descriptor_, &StorePrepRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StorePrepResponse_descriptor_, &StorePrepResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StoreRequest_descriptor_, &StoreRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StoreResponse_descriptor_, &StoreResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StoreIOURequest_descriptor_, &StoreIOURequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StoreIOUResponse_descriptor_, &StoreIOUResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IOUDoneRequest_descriptor_, &IOUDoneRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IOUDoneResponse_descriptor_, &IOUDoneResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RankAuthority_descriptor_, &RankAuthority::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StoreReferenceRequest_descriptor_, &StoreReferenceRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StoreReferenceResponse_descriptor_, &StoreReferenceResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteRequest_descriptor_, &DeleteRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteResponse_descriptor_, &DeleteResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetRequest_descriptor_, &GetRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetResponse_descriptor_, &GetResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CheckChunkRequest_descriptor_, &CheckChunkRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CheckChunkResponse_descriptor_, &CheckChunkResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ValidityCheckRequest_descriptor_, &ValidityCheckRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ValidityCheckResponse_descriptor_, &ValidityCheckResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateRequest_descriptor_, &UpdateRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateResponse_descriptor_, &UpdateResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SwapChunkRequest_descriptor_, &SwapChunkRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SwapChunkResponse_descriptor_, &SwapChunkResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VaultCommunication_descriptor_, &VaultCommunication::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VaultStatusRequest_descriptor_, &VaultStatusRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VaultStatusResponse_descriptor_, &VaultStatusResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OwnVaultRequest_descriptor_, &OwnVaultRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OwnVaultResponse_descriptor_, &OwnVaultResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IsOwnedRequest_descriptor_, &IsOwnedRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IsOwnedResponse_descriptor_, &IsOwnedResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateBPRequest_descriptor_, &CreateBPRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateBPResponse_descriptor_, &CreateBPResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModifyBPInfoRequest_descriptor_, &ModifyBPInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModifyBPInfoResponse_descriptor_, &ModifyBPInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetBPMessagesRequest_descriptor_, &GetBPMessagesRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetBPMessagesResponse_descriptor_, &GetBPMessagesResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddBPMessageRequest_descriptor_, &AddBPMessageRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddBPMessageResponse_descriptor_, &AddBPMessageResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_maidsafe_5fservice_5fmessages_2eproto() {
  delete IOUAuthority::default_instance_;
  delete IOUAuthority_reflection_;
  delete IOU::default_instance_;
  delete IOU_reflection_;
  delete StorePrepRequest::default_instance_;
  delete StorePrepRequest_reflection_;
  delete StorePrepResponse::default_instance_;
  delete StorePrepResponse_reflection_;
  delete StoreRequest::default_instance_;
  delete StoreRequest_reflection_;
  delete StoreResponse::default_instance_;
  delete StoreResponse_reflection_;
  delete StoreIOURequest::default_instance_;
  delete StoreIOURequest_reflection_;
  delete StoreIOUResponse::default_instance_;
  delete StoreIOUResponse_reflection_;
  delete IOUDoneRequest::default_instance_;
  delete IOUDoneRequest_reflection_;
  delete IOUDoneResponse::default_instance_;
  delete IOUDoneResponse_reflection_;
  delete RankAuthority::default_instance_;
  delete RankAuthority_reflection_;
  delete StoreReferenceRequest::default_instance_;
  delete StoreReferenceRequest_reflection_;
  delete StoreReferenceResponse::default_instance_;
  delete StoreReferenceResponse_reflection_;
  delete DeleteRequest::default_instance_;
  delete DeleteRequest_reflection_;
  delete DeleteResponse::default_instance_;
  delete DeleteResponse_reflection_;
  delete GetRequest::default_instance_;
  delete GetRequest_reflection_;
  delete GetResponse::default_instance_;
  delete GetResponse_reflection_;
  delete CheckChunkRequest::default_instance_;
  delete CheckChunkRequest_reflection_;
  delete CheckChunkResponse::default_instance_;
  delete CheckChunkResponse_reflection_;
  delete ValidityCheckRequest::default_instance_;
  delete ValidityCheckRequest_reflection_;
  delete ValidityCheckResponse::default_instance_;
  delete ValidityCheckResponse_reflection_;
  delete UpdateRequest::default_instance_;
  delete UpdateRequest_reflection_;
  delete UpdateResponse::default_instance_;
  delete UpdateResponse_reflection_;
  delete SwapChunkRequest::default_instance_;
  delete SwapChunkRequest_reflection_;
  delete SwapChunkResponse::default_instance_;
  delete SwapChunkResponse_reflection_;
  delete VaultCommunication::default_instance_;
  delete VaultCommunication_reflection_;
  delete VaultStatusRequest::default_instance_;
  delete VaultStatusRequest_reflection_;
  delete VaultStatusResponse::default_instance_;
  delete VaultStatusResponse_reflection_;
  delete OwnVaultRequest::default_instance_;
  delete OwnVaultRequest_reflection_;
  delete OwnVaultResponse::default_instance_;
  delete OwnVaultResponse_reflection_;
  delete IsOwnedRequest::default_instance_;
  delete IsOwnedRequest_reflection_;
  delete IsOwnedResponse::default_instance_;
  delete IsOwnedResponse_reflection_;
  delete CreateBPRequest::default_instance_;
  delete CreateBPRequest_reflection_;
  delete CreateBPResponse::default_instance_;
  delete CreateBPResponse_reflection_;
  delete ModifyBPInfoRequest::default_instance_;
  delete ModifyBPInfoRequest_reflection_;
  delete ModifyBPInfoResponse::default_instance_;
  delete ModifyBPInfoResponse_reflection_;
  delete GetBPMessagesRequest::default_instance_;
  delete GetBPMessagesRequest_reflection_;
  delete GetBPMessagesResponse::default_instance_;
  delete GetBPMessagesResponse_reflection_;
  delete AddBPMessageRequest::default_instance_;
  delete AddBPMessageRequest_reflection_;
  delete AddBPMessageResponse::default_instance_;
  delete AddBPMessageResponse_reflection_;
}

void protobuf_AddDesc_maidsafe_5fservice_5fmessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\037maidsafe_service_messages.proto\022\010maids"
    "afe\"/\n\014IOUAuthority\022\021\n\tdata_size\030\001 \002(\004\022\014"
    "\n\004pmid\030\002 \002(\014\"X\n\003IOU\022 \n\030serialised_iou_au"
    "thority\030\001 \002(\014\022\034\n\024signed_iou_authority\030\002 "
    "\002(\014\022\021\n\tsignature\030\003 \002(\014\"\215\001\n\020StorePrepRequ"
    "est\022\021\n\tchunkname\030\001 \002(\014\022\021\n\tdata_size\030\002 \002("
    "\004\022\014\n\004pmid\030\003 \002(\014\022\022\n\npublic_key\030\004 \002(\014\022\031\n\021s"
    "igned_public_key\030\005 \002(\014\022\026\n\016signed_request"
    "\030\006 \002(\014\"i\n\021StorePrepResponse\022\016\n\006result\030\001 "
    "\002(\r\022\017\n\007pmid_id\030\002 \001(\014\022\025\n\riou_authority\030\003 "
    "\001(\014\022\034\n\024signed_iou_authority\030\004 \001(\014\"\276\001\n\014St"
    "oreRequest\022\021\n\tchunkname\030\001 \002(\014\022\014\n\004data\030\002 "
    "\002(\014\022\014\n\004pmid\030\003 \001(\014\022\022\n\npublic_key\030\004 \002(\014\022\031\n"
    "\021signed_public_key\030\005 \002(\014\022\026\n\016signed_reque"
    "st\030\006 \002(\014\022\021\n\tdata_type\030\007 \002(\005\022\016\n\006offset\030\010 "
    "\001(\r\022\025\n\rchunklet_size\030\t \001(\r\"0\n\rStoreRespo"
    "nse\022\016\n\006result\030\001 \002(\r\022\017\n\007pmid_id\030\002 \001(\014\"\265\001\n"
    "\017StoreIOURequest\022\021\n\tchunkname\030\001 \002(\014\022\021\n\td"
    "ata_size\030\002 \002(\004\022\026\n\016collector_pmid\030\003 \002(\014\022\013"
    "\n\003iou\030\004 \002(\014\022\020\n\010own_pmid\030\005 \002(\014\022\022\n\npublic_"
    "key\030\006 \002(\014\022\031\n\021signed_public_key\030\007 \002(\014\022\026\n\016"
    "signed_request\030\010 \002(\014\"3\n\020StoreIOUResponse"
    "\022\016\n\006result\030\001 \002(\r\022\017\n\007pmid_id\030\002 \001(\014\"j\n\016IOU"
    "DoneRequest\022\021\n\tchunkname\030\001 \002(\014\022\022\n\npublic"
    "_key\030\002 \002(\014\022\031\n\021signed_public_key\030\003 \002(\014\022\026\n"
    "\016signed_request\030\004 \002(\014\"2\n\017IOUDoneResponse"
    "\022\016\n\006result\030\001 \002(\r\022\017\n\007pmid_id\030\002 \001(\014\"C\n\rRan"
    "kAuthority\022\021\n\tchunkname\030\001 \002(\014\022\021\n\tdata_si"
    "ze\030\002 \002(\004\022\014\n\004pmid\030\003 \002(\014\"\251\001\n\025StoreReferenc"
    "eRequest\022\021\n\tchunkname\030\001 \002(\014\022\014\n\004pmid\030\002 \002("
    "\014\022\023\n\013signed_pmid\030\003 \002(\014\022\022\n\npublic_key\030\004 \002"
    "(\014\022\031\n\021signed_public_key\030\005 \002(\014\022\026\n\016signed_"
    "request\030\006 \002(\014\022\023\n\013no_iou_rank\030\007 \001(\010\"\254\001\n\026S"
    "toreReferenceResponse\022\016\n\006result\030\001 \002(\r\022\026\n"
    "\016rank_authority\030\002 \001(\014\022\035\n\025signed_rank_aut"
    "hority\030\003 \001(\014\022\013\n\003iou\030\004 \001(\014\022\017\n\007pmid_id\030\005 \001"
    "(\014\022\022\n\npublic_key\030\006 \001(\014\022\031\n\021signed_public_"
    "key\030\007 \001(\014\"|\n\rDeleteRequest\022\021\n\tchunkname\030"
    "\001 \002(\014\022\022\n\npublic_key\030\002 \002(\014\022\031\n\021signed_publ"
    "ic_key\030\003 \002(\014\022\026\n\016signed_request\030\004 \002(\014\022\021\n\t"
    "data_type\030\005 \002(\005\"1\n\016DeleteResponse\022\016\n\006res"
    "ult\030\001 \002(\r\022\017\n\007pmid_id\030\002 \001(\014\"\037\n\nGetRequest"
    "\022\021\n\tchunkname\030\001 \002(\014\"?\n\013GetResponse\022\016\n\006re"
    "sult\030\001 \002(\r\022\017\n\007content\030\002 \001(\014\022\017\n\007pmid_id\030\003"
    " \001(\014\"&\n\021CheckChunkRequest\022\021\n\tchunkname\030\001"
    " \002(\014\"5\n\022CheckChunkResponse\022\016\n\006result\030\001 \002"
    "(\r\022\017\n\007pmid_id\030\002 \002(\014\">\n\024ValidityCheckRequ"
    "est\022\021\n\tchunkname\030\001 \002(\014\022\023\n\013random_data\030\002 "
    "\002(\014\"N\n\025ValidityCheckResponse\022\016\n\006result\030\001"
    " \002(\r\022\024\n\014hash_content\030\002 \001(\014\022\017\n\007pmid_id\030\003 "
    "\002(\014\"\212\001\n\rUpdateRequest\022\021\n\tchunkname\030\001 \002(\014"
    "\022\014\n\004data\030\002 \002(\014\022\022\n\npublic_key\030\003 \002(\014\022\031\n\021si"
    "gned_public_key\030\004 \002(\014\022\026\n\016signed_request\030"
    "\005 \002(\014\022\021\n\tdata_type\030\006 \002(\005\"1\n\016UpdateRespon"
    "se\022\016\n\006result\030\001 \002(\r\022\017\n\007pmid_id\030\002 \001(\014\"v\n\020S"
    "wapChunkRequest\022\024\n\014request_type\030\001 \002(\005\022\022\n"
    "\nchunkname1\030\002 \002(\014\022\025\n\rchunkcontent1\030\003 \001(\014"
    "\022\r\n\005size1\030\004 \001(\005\022\022\n\nchunkname2\030\005 \001(\014\"\276\001\n\021"
    "SwapChunkResponse\022\024\n\014request_type\030\001 \002(\005\022"
    "\016\n\006result\030\002 \002(\r\022\022\n\nchunkname1\030\003 \001(\014\022\025\n\rc"
    "hunkcontent1\030\004 \001(\014\022\r\n\005size1\030\005 \001(\005\022\022\n\nchu"
    "nkname2\030\006 \001(\014\022\025\n\rchunkcontent2\030\007 \001(\014\022\r\n\005"
    "size2\030\010 \001(\005\022\017\n\007pmid_id\030\t \002(\014\"\200\001\n\022VaultCo"
    "mmunication\022\022\n\nchunkstore\030\001 \001(\014\022\025\n\roffer"
    "ed_space\030\002 \001(\004\022\022\n\nfree_space\030\003 \001(\004\022\n\n\002ip"
    "\030\004 \001(\014\022\014\n\004port\030\005 \001(\r\022\021\n\ttimestamp\030\006 \002(\r\""
    "/\n\022VaultStatusRequest\022\031\n\021encrypted_reque"
    "st\030\001 \002(\014\"A\n\023VaultStatusResponse\022\016\n\006resul"
    "t\030\001 \002(\r\022\032\n\022encrypted_response\030\002 \001(\014\"\212\001\n\017"
    "OwnVaultRequest\022\022\n\npublic_key\030\001 \002(\014\022\023\n\013p"
    "rivate_key\030\002 \002(\014\022\031\n\021signed_public_key\030\003 "
    "\002(\014\022\026\n\016chunkstore_dir\030\004 \002(\014\022\014\n\004port\030\005 \002("
    "\r\022\r\n\005space\030\006 \002(\004\"O\n\020OwnVaultResponse\022(\n\006"
    "result\030\001 \002(\0162\030.maidsafe.OwnVaultResult\022\021"
    "\n\tpmid_name\030\002 \001(\014\"\020\n\016IsOwnedRequest\"8\n\017I"
    "sOwnedResponse\022%\n\006status\030\001 \002(\0162\025.maidsaf"
    "e.VaultStatus\"\217\001\n\017CreateBPRequest\022\031\n\021buf"
    "ferpacket_name\030\001 \002(\014\022\014\n\004data\030\002 \002(\014\022\014\n\004pm"
    "id\030\003 \002(\014\022\022\n\npublic_key\030\004 \002(\014\022\031\n\021signed_p"
    "ublic_key\030\005 \002(\014\022\026\n\016signed_request\030\006 \002(\014\""
    "b\n\020CreateBPResponse\022\016\n\006result\030\001 \002(\r\022\017\n\007p"
    "mid_id\030\002 \001(\014\022\022\n\npublic_key\030\003 \001(\014\022\031\n\021sign"
    "ed_public_key\030\004 \001(\014\"\223\001\n\023ModifyBPInfoRequ"
    "est\022\031\n\021bufferpacket_name\030\001 \002(\014\022\014\n\004data\030\002"
    " \002(\014\022\014\n\004pmid\030\003 \002(\014\022\022\n\npublic_key\030\004 \002(\014\022\031"
    "\n\021signed_public_key\030\005 \002(\014\022\026\n\016signed_requ"
    "est\030\006 \002(\014\"f\n\024ModifyBPInfoResponse\022\016\n\006res"
    "ult\030\001 \002(\r\022\017\n\007pmid_id\030\002 \001(\014\022\022\n\npublic_key"
    "\030\003 \001(\014\022\031\n\021signed_public_key\030\004 \001(\014\"\206\001\n\024Ge"
    "tBPMessagesRequest\022\031\n\021bufferpacket_name\030"
    "\001 \002(\014\022\022\n\npublic_key\030\002 \002(\014\022\014\n\004pmid\030\003 \002(\014\022"
    "\031\n\021signed_public_key\030\004 \002(\014\022\026\n\016signed_req"
    "uest\030\005 \002(\014\"y\n\025GetBPMessagesResponse\022\016\n\006r"
    "esult\030\001 \002(\r\022\020\n\010messages\030\002 \003(\014\022\017\n\007pmid_id"
    "\030\003 \001(\014\022\022\n\npublic_key\030\004 \001(\014\022\031\n\021signed_pub"
    "lic_key\030\005 \001(\014\"\223\001\n\023AddBPMessageRequest\022\031\n"
    "\021bufferpacket_name\030\001 \002(\014\022\014\n\004data\030\002 \002(\014\022\014"
    "\n\004pmid\030\003 \002(\014\022\022\n\npublic_key\030\004 \002(\014\022\031\n\021sign"
    "ed_public_key\030\005 \002(\014\022\026\n\016signed_request\030\006 "
    "\002(\014\"f\n\024AddBPMessageResponse\022\016\n\006result\030\001 "
    "\002(\r\022\017\n\007pmid_id\030\002 \001(\014\022\022\n\npublic_key\030\003 \001(\014"
    "\022\031\n\021signed_public_key\030\004 \001(\014*\357\001\n\016OwnVault"
    "Result\022\021\n\rOWNED_SUCCESS\020\000\022\027\n\023VAULT_ALREA"
    "DY_OWNED\020\001\022\021\n\rVAULT_IS_DOWN\020\002\022\024\n\020INVALID"
    "_RSA_KEYS\020\003\022\024\n\020NOT_ENOUGH_SPACE\020\004\022\026\n\022NO_"
    "SPACE_ALLOCATED\020\005\022\020\n\014INVALID_PORT\020\006\022\031\n\025F"
    "AILED_TO_START_VAULT\020\007\022\026\n\022INVALID_OWNREQ"
    "UEST\020\010\022\025\n\021INVALID_PMID_NAME\020\t*I\n\013VaultSt"
    "atus\022\r\n\tNOT_OWNED\020\000\022\t\n\005OWNED\020\001\022\010\n\004DOWN\020\002"
    "\022\026\n\022ISOWNRPC_CANCELLED\020\003", 4384);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "maidsafe_service_messages.proto", &protobuf_RegisterTypes);
  IOUAuthority::default_instance_ = new IOUAuthority();
  IOU::default_instance_ = new IOU();
  StorePrepRequest::default_instance_ = new StorePrepRequest();
  StorePrepResponse::default_instance_ = new StorePrepResponse();
  StoreRequest::default_instance_ = new StoreRequest();
  StoreResponse::default_instance_ = new StoreResponse();
  StoreIOURequest::default_instance_ = new StoreIOURequest();
  StoreIOUResponse::default_instance_ = new StoreIOUResponse();
  IOUDoneRequest::default_instance_ = new IOUDoneRequest();
  IOUDoneResponse::default_instance_ = new IOUDoneResponse();
  RankAuthority::default_instance_ = new RankAuthority();
  StoreReferenceRequest::default_instance_ = new StoreReferenceRequest();
  StoreReferenceResponse::default_instance_ = new StoreReferenceResponse();
  DeleteRequest::default_instance_ = new DeleteRequest();
  DeleteResponse::default_instance_ = new DeleteResponse();
  GetRequest::default_instance_ = new GetRequest();
  GetResponse::default_instance_ = new GetResponse();
  CheckChunkRequest::default_instance_ = new CheckChunkRequest();
  CheckChunkResponse::default_instance_ = new CheckChunkResponse();
  ValidityCheckRequest::default_instance_ = new ValidityCheckRequest();
  ValidityCheckResponse::default_instance_ = new ValidityCheckResponse();
  UpdateRequest::default_instance_ = new UpdateRequest();
  UpdateResponse::default_instance_ = new UpdateResponse();
  SwapChunkRequest::default_instance_ = new SwapChunkRequest();
  SwapChunkResponse::default_instance_ = new SwapChunkResponse();
  VaultCommunication::default_instance_ = new VaultCommunication();
  VaultStatusRequest::default_instance_ = new VaultStatusRequest();
  VaultStatusResponse::default_instance_ = new VaultStatusResponse();
  OwnVaultRequest::default_instance_ = new OwnVaultRequest();
  OwnVaultResponse::default_instance_ = new OwnVaultResponse();
  IsOwnedRequest::default_instance_ = new IsOwnedRequest();
  IsOwnedResponse::default_instance_ = new IsOwnedResponse();
  CreateBPRequest::default_instance_ = new CreateBPRequest();
  CreateBPResponse::default_instance_ = new CreateBPResponse();
  ModifyBPInfoRequest::default_instance_ = new ModifyBPInfoRequest();
  ModifyBPInfoResponse::default_instance_ = new ModifyBPInfoResponse();
  GetBPMessagesRequest::default_instance_ = new GetBPMessagesRequest();
  GetBPMessagesResponse::default_instance_ = new GetBPMessagesResponse();
  AddBPMessageRequest::default_instance_ = new AddBPMessageRequest();
  AddBPMessageResponse::default_instance_ = new AddBPMessageResponse();
  IOUAuthority::default_instance_->InitAsDefaultInstance();
  IOU::default_instance_->InitAsDefaultInstance();
  StorePrepRequest::default_instance_->InitAsDefaultInstance();
  StorePrepResponse::default_instance_->InitAsDefaultInstance();
  StoreRequest::default_instance_->InitAsDefaultInstance();
  StoreResponse::default_instance_->InitAsDefaultInstance();
  StoreIOURequest::default_instance_->InitAsDefaultInstance();
  StoreIOUResponse::default_instance_->InitAsDefaultInstance();
  IOUDoneRequest::default_instance_->InitAsDefaultInstance();
  IOUDoneResponse::default_instance_->InitAsDefaultInstance();
  RankAuthority::default_instance_->InitAsDefaultInstance();
  StoreReferenceRequest::default_instance_->InitAsDefaultInstance();
  StoreReferenceResponse::default_instance_->InitAsDefaultInstance();
  DeleteRequest::default_instance_->InitAsDefaultInstance();
  DeleteResponse::default_instance_->InitAsDefaultInstance();
  GetRequest::default_instance_->InitAsDefaultInstance();
  GetResponse::default_instance_->InitAsDefaultInstance();
  CheckChunkRequest::default_instance_->InitAsDefaultInstance();
  CheckChunkResponse::default_instance_->InitAsDefaultInstance();
  ValidityCheckRequest::default_instance_->InitAsDefaultInstance();
  ValidityCheckResponse::default_instance_->InitAsDefaultInstance();
  UpdateRequest::default_instance_->InitAsDefaultInstance();
  UpdateResponse::default_instance_->InitAsDefaultInstance();
  SwapChunkRequest::default_instance_->InitAsDefaultInstance();
  SwapChunkResponse::default_instance_->InitAsDefaultInstance();
  VaultCommunication::default_instance_->InitAsDefaultInstance();
  VaultStatusRequest::default_instance_->InitAsDefaultInstance();
  VaultStatusResponse::default_instance_->InitAsDefaultInstance();
  OwnVaultRequest::default_instance_->InitAsDefaultInstance();
  OwnVaultResponse::default_instance_->InitAsDefaultInstance();
  IsOwnedRequest::default_instance_->InitAsDefaultInstance();
  IsOwnedResponse::default_instance_->InitAsDefaultInstance();
  CreateBPRequest::default_instance_->InitAsDefaultInstance();
  CreateBPResponse::default_instance_->InitAsDefaultInstance();
  ModifyBPInfoRequest::default_instance_->InitAsDefaultInstance();
  ModifyBPInfoResponse::default_instance_->InitAsDefaultInstance();
  GetBPMessagesRequest::default_instance_->InitAsDefaultInstance();
  GetBPMessagesResponse::default_instance_->InitAsDefaultInstance();
  AddBPMessageRequest::default_instance_->InitAsDefaultInstance();
  AddBPMessageResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_maidsafe_5fservice_5fmessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_maidsafe_5fservice_5fmessages_2eproto {
  StaticDescriptorInitializer_maidsafe_5fservice_5fmessages_2eproto() {
    protobuf_AddDesc_maidsafe_5fservice_5fmessages_2eproto();
  }
} static_descriptor_initializer_maidsafe_5fservice_5fmessages_2eproto_;

const ::google::protobuf::EnumDescriptor* OwnVaultResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OwnVaultResult_descriptor_;
}
bool OwnVaultResult_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* VaultStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VaultStatus_descriptor_;
}
bool VaultStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::std::string IOUAuthority::_default_pmid_;
#ifndef _MSC_VER
const int IOUAuthority::kDataSizeFieldNumber;
const int IOUAuthority::kPmidFieldNumber;
#endif  // !_MSC_VER

IOUAuthority::IOUAuthority()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    data_size_(GOOGLE_ULONGLONG(0)),
    pmid_(const_cast< ::std::string*>(&_default_pmid_)) {
  SharedCtor();
}

void IOUAuthority::InitAsDefaultInstance() {}

IOUAuthority::IOUAuthority(const IOUAuthority& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    data_size_(GOOGLE_ULONGLONG(0)),
    pmid_(const_cast< ::std::string*>(&_default_pmid_)) {
  SharedCtor();
  MergeFrom(from);
}

void IOUAuthority::SharedCtor() {
  _cached_size_ = 0;
  data_size_ = GOOGLE_ULONGLONG(0);
  pmid_ = const_cast< ::std::string*>(&_default_pmid_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IOUAuthority::~IOUAuthority() {
  SharedDtor();
}

void IOUAuthority::SharedDtor() {
  if (pmid_ != &_default_pmid_) {
    delete pmid_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* IOUAuthority::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IOUAuthority_descriptor_;
}

const IOUAuthority& IOUAuthority::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_5fservice_5fmessages_2eproto();  return *default_instance_;
}

IOUAuthority* IOUAuthority::default_instance_ = NULL;

IOUAuthority* IOUAuthority::New() const {
  return new IOUAuthority;
}

void IOUAuthority::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    data_size_ = GOOGLE_ULONGLONG(0);
    if (_has_bit(1)) {
      if (pmid_ != &_default_pmid_) {
        pmid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IOUAuthority::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required uint64 data_size = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt64(
              input, &data_size_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_pmid;
        break;
      }
      
      // required bytes pmid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_pmid:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_pmid()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IOUAuthority::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    IOUAuthority::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint64 data_size = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt64(1, this->data_size(), output);
  }
  
  // required bytes pmid = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(2, this->pmid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IOUAuthority::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 data_size = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt64ToArray(1, this->data_size(), target);
  }
  
  // required bytes pmid = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(2, this->pmid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IOUAuthority::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 data_size = 1;
    if (has_data_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt64Size(
          this->data_size());
    }
    
    // required bytes pmid = 2;
    if (has_pmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->pmid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void IOUAuthority::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IOUAuthority* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IOUAuthority*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IOUAuthority::MergeFrom(const IOUAuthority& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_data_size(from.data_size());
    }
    if (from._has_bit(1)) {
      set_pmid(from.pmid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IOUAuthority::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IOUAuthority::CopyFrom(const IOUAuthority& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IOUAuthority::Swap(IOUAuthority* other) {
  if (other != this) {
    std::swap(data_size_, other->data_size_);
    std::swap(pmid_, other->pmid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool IOUAuthority::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* IOUAuthority::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* IOUAuthority::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return IOUAuthority_reflection_;
}

// ===================================================================

const ::std::string IOU::_default_serialised_iou_authority_;
const ::std::string IOU::_default_signed_iou_authority_;
const ::std::string IOU::_default_signature_;
#ifndef _MSC_VER
const int IOU::kSerialisedIouAuthorityFieldNumber;
const int IOU::kSignedIouAuthorityFieldNumber;
const int IOU::kSignatureFieldNumber;
#endif  // !_MSC_VER

IOU::IOU()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    serialised_iou_authority_(const_cast< ::std::string*>(&_default_serialised_iou_authority_)),
    signed_iou_authority_(const_cast< ::std::string*>(&_default_signed_iou_authority_)),
    signature_(const_cast< ::std::string*>(&_default_signature_)) {
  SharedCtor();
}

void IOU::InitAsDefaultInstance() {}

IOU::IOU(const IOU& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    serialised_iou_authority_(const_cast< ::std::string*>(&_default_serialised_iou_authority_)),
    signed_iou_authority_(const_cast< ::std::string*>(&_default_signed_iou_authority_)),
    signature_(const_cast< ::std::string*>(&_default_signature_)) {
  SharedCtor();
  MergeFrom(from);
}

void IOU::SharedCtor() {
  _cached_size_ = 0;
  serialised_iou_authority_ = const_cast< ::std::string*>(&_default_serialised_iou_authority_);
  signed_iou_authority_ = const_cast< ::std::string*>(&_default_signed_iou_authority_);
  signature_ = const_cast< ::std::string*>(&_default_signature_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IOU::~IOU() {
  SharedDtor();
}

void IOU::SharedDtor() {
  if (serialised_iou_authority_ != &_default_serialised_iou_authority_) {
    delete serialised_iou_authority_;
  }
  if (signed_iou_authority_ != &_default_signed_iou_authority_) {
    delete signed_iou_authority_;
  }
  if (signature_ != &_default_signature_) {
    delete signature_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* IOU::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IOU_descriptor_;
}

const IOU& IOU::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_5fservice_5fmessages_2eproto();  return *default_instance_;
}

IOU* IOU::default_instance_ = NULL;

IOU* IOU::New() const {
  return new IOU;
}

void IOU::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (serialised_iou_authority_ != &_default_serialised_iou_authority_) {
        serialised_iou_authority_->clear();
      }
    }
    if (_has_bit(1)) {
      if (signed_iou_authority_ != &_default_signed_iou_authority_) {
        signed_iou_authority_->clear();
      }
    }
    if (_has_bit(2)) {
      if (signature_ != &_default_signature_) {
        signature_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IOU::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required bytes serialised_iou_authority = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_serialised_iou_authority()));
        if (input->ExpectTag(18)) goto parse_signed_iou_authority;
        break;
      }
      
      // required bytes signed_iou_authority = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_signed_iou_authority:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_signed_iou_authority()));
        if (input->ExpectTag(26)) goto parse_signature;
        break;
      }
      
      // required bytes signature = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_signature:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_signature()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IOU::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    IOU::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required bytes serialised_iou_authority = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(1, this->serialised_iou_authority(), output);
  }
  
  // required bytes signed_iou_authority = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(2, this->signed_iou_authority(), output);
  }
  
  // required bytes signature = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(3, this->signature(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IOU::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes serialised_iou_authority = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(1, this->serialised_iou_authority(), target);
  }
  
  // required bytes signed_iou_authority = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(2, this->signed_iou_authority(), target);
  }
  
  // required bytes signature = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(3, this->signature(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IOU::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes serialised_iou_authority = 1;
    if (has_serialised_iou_authority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->serialised_iou_authority());
    }
    
    // required bytes signed_iou_authority = 2;
    if (has_signed_iou_authority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->signed_iou_authority());
    }
    
    // required bytes signature = 3;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->signature());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void IOU::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IOU* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IOU*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IOU::MergeFrom(const IOU& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_serialised_iou_authority(from.serialised_iou_authority());
    }
    if (from._has_bit(1)) {
      set_signed_iou_authority(from.signed_iou_authority());
    }
    if (from._has_bit(2)) {
      set_signature(from.signature());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IOU::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IOU::CopyFrom(const IOU& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IOU::Swap(IOU* other) {
  if (other != this) {
    std::swap(serialised_iou_authority_, other->serialised_iou_authority_);
    std::swap(signed_iou_authority_, other->signed_iou_authority_);
    std::swap(signature_, other->signature_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool IOU::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* IOU::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* IOU::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return IOU_reflection_;
}

// ===================================================================

const ::std::string StorePrepRequest::_default_chunkname_;
const ::std::string StorePrepRequest::_default_pmid_;
const ::std::string StorePrepRequest::_default_public_key_;
const ::std::string StorePrepRequest::_default_signed_public_key_;
const ::std::string StorePrepRequest::_default_signed_request_;
#ifndef _MSC_VER
const int StorePrepRequest::kChunknameFieldNumber;
const int StorePrepRequest::kDataSizeFieldNumber;
const int StorePrepRequest::kPmidFieldNumber;
const int StorePrepRequest::kPublicKeyFieldNumber;
const int StorePrepRequest::kSignedPublicKeyFieldNumber;
const int StorePrepRequest::kSignedRequestFieldNumber;
#endif  // !_MSC_VER

StorePrepRequest::StorePrepRequest()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    chunkname_(const_cast< ::std::string*>(&_default_chunkname_)),
    data_size_(GOOGLE_ULONGLONG(0)),
    pmid_(const_cast< ::std::string*>(&_default_pmid_)),
    public_key_(const_cast< ::std::string*>(&_default_public_key_)),
    signed_public_key_(const_cast< ::std::string*>(&_default_signed_public_key_)),
    signed_request_(const_cast< ::std::string*>(&_default_signed_request_)) {
  SharedCtor();
}

void StorePrepRequest::InitAsDefaultInstance() {}

StorePrepRequest::StorePrepRequest(const StorePrepRequest& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    chunkname_(const_cast< ::std::string*>(&_default_chunkname_)),
    data_size_(GOOGLE_ULONGLONG(0)),
    pmid_(const_cast< ::std::string*>(&_default_pmid_)),
    public_key_(const_cast< ::std::string*>(&_default_public_key_)),
    signed_public_key_(const_cast< ::std::string*>(&_default_signed_public_key_)),
    signed_request_(const_cast< ::std::string*>(&_default_signed_request_)) {
  SharedCtor();
  MergeFrom(from);
}

void StorePrepRequest::SharedCtor() {
  _cached_size_ = 0;
  chunkname_ = const_cast< ::std::string*>(&_default_chunkname_);
  data_size_ = GOOGLE_ULONGLONG(0);
  pmid_ = const_cast< ::std::string*>(&_default_pmid_);
  public_key_ = const_cast< ::std::string*>(&_default_public_key_);
  signed_public_key_ = const_cast< ::std::string*>(&_default_signed_public_key_);
  signed_request_ = const_cast< ::std::string*>(&_default_signed_request_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StorePrepRequest::~StorePrepRequest() {
  SharedDtor();
}

void StorePrepRequest::SharedDtor() {
  if (chunkname_ != &_default_chunkname_) {
    delete chunkname_;
  }
  if (pmid_ != &_default_pmid_) {
    delete pmid_;
  }
  if (public_key_ != &_default_public_key_) {
    delete public_key_;
  }
  if (signed_public_key_ != &_default_signed_public_key_) {
    delete signed_public_key_;
  }
  if (signed_request_ != &_default_signed_request_) {
    delete signed_request_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* StorePrepRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StorePrepRequest_descriptor_;
}

const StorePrepRequest& StorePrepRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_5fservice_5fmessages_2eproto();  return *default_instance_;
}

StorePrepRequest* StorePrepRequest::default_instance_ = NULL;

StorePrepRequest* StorePrepRequest::New() const {
  return new StorePrepRequest;
}

void StorePrepRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (chunkname_ != &_default_chunkname_) {
        chunkname_->clear();
      }
    }
    data_size_ = GOOGLE_ULONGLONG(0);
    if (_has_bit(2)) {
      if (pmid_ != &_default_pmid_) {
        pmid_->clear();
      }
    }
    if (_has_bit(3)) {
      if (public_key_ != &_default_public_key_) {
        public_key_->clear();
      }
    }
    if (_has_bit(4)) {
      if (signed_public_key_ != &_default_signed_public_key_) {
        signed_public_key_->clear();
      }
    }
    if (_has_bit(5)) {
      if (signed_request_ != &_default_signed_request_) {
        signed_request_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StorePrepRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required bytes chunkname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_chunkname()));
        if (input->ExpectTag(16)) goto parse_data_size;
        break;
      }
      
      // required uint64 data_size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_data_size:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt64(
              input, &data_size_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_pmid;
        break;
      }
      
      // required bytes pmid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_pmid:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_pmid()));
        if (input->ExpectTag(34)) goto parse_public_key;
        break;
      }
      
      // required bytes public_key = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_public_key:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_public_key()));
        if (input->ExpectTag(42)) goto parse_signed_public_key;
        break;
      }
      
      // required bytes signed_public_key = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_signed_public_key:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_signed_public_key()));
        if (input->ExpectTag(50)) goto parse_signed_request;
        break;
      }
      
      // required bytes signed_request = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_signed_request:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_signed_request()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StorePrepRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    StorePrepRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required bytes chunkname = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(1, this->chunkname(), output);
  }
  
  // required uint64 data_size = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt64(2, this->data_size(), output);
  }
  
  // required bytes pmid = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(3, this->pmid(), output);
  }
  
  // required bytes public_key = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(4, this->public_key(), output);
  }
  
  // required bytes signed_public_key = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(5, this->signed_public_key(), output);
  }
  
  // required bytes signed_request = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(6, this->signed_request(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StorePrepRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes chunkname = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(1, this->chunkname(), target);
  }
  
  // required uint64 data_size = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt64ToArray(2, this->data_size(), target);
  }
  
  // required bytes pmid = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(3, this->pmid(), target);
  }
  
  // required bytes public_key = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(4, this->public_key(), target);
  }
  
  // required bytes signed_public_key = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(5, this->signed_public_key(), target);
  }
  
  // required bytes signed_request = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(6, this->signed_request(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StorePrepRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes chunkname = 1;
    if (has_chunkname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->chunkname());
    }
    
    // required uint64 data_size = 2;
    if (has_data_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt64Size(
          this->data_size());
    }
    
    // required bytes pmid = 3;
    if (has_pmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->pmid());
    }
    
    // required bytes public_key = 4;
    if (has_public_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->public_key());
    }
    
    // required bytes signed_public_key = 5;
    if (has_signed_public_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->signed_public_key());
    }
    
    // required bytes signed_request = 6;
    if (has_signed_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->signed_request());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void StorePrepRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StorePrepRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StorePrepRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StorePrepRequest::MergeFrom(const StorePrepRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_chunkname(from.chunkname());
    }
    if (from._has_bit(1)) {
      set_data_size(from.data_size());
    }
    if (from._has_bit(2)) {
      set_pmid(from.pmid());
    }
    if (from._has_bit(3)) {
      set_public_key(from.public_key());
    }
    if (from._has_bit(4)) {
      set_signed_public_key(from.signed_public_key());
    }
    if (from._has_bit(5)) {
      set_signed_request(from.signed_request());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StorePrepRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StorePrepRequest::CopyFrom(const StorePrepRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StorePrepRequest::Swap(StorePrepRequest* other) {
  if (other != this) {
    std::swap(chunkname_, other->chunkname_);
    std::swap(data_size_, other->data_size_);
    std::swap(pmid_, other->pmid_);
    std::swap(public_key_, other->public_key_);
    std::swap(signed_public_key_, other->signed_public_key_);
    std::swap(signed_request_, other->signed_request_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool StorePrepRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* StorePrepRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* StorePrepRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return StorePrepRequest_reflection_;
}

// ===================================================================

const ::std::string StorePrepResponse::_default_pmid_id_;
const ::std::string StorePrepResponse::_default_iou_authority_;
const ::std::string StorePrepResponse::_default_signed_iou_authority_;
#ifndef _MSC_VER
const int StorePrepResponse::kResultFieldNumber;
const int StorePrepResponse::kPmidIdFieldNumber;
const int StorePrepResponse::kIouAuthorityFieldNumber;
const int StorePrepResponse::kSignedIouAuthorityFieldNumber;
#endif  // !_MSC_VER

StorePrepResponse::StorePrepResponse()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    result_(0u),
    pmid_id_(const_cast< ::std::string*>(&_default_pmid_id_)),
    iou_authority_(const_cast< ::std::string*>(&_default_iou_authority_)),
    signed_iou_authority_(const_cast< ::std::string*>(&_default_signed_iou_authority_)) {
  SharedCtor();
}

void StorePrepResponse::InitAsDefaultInstance() {}

StorePrepResponse::StorePrepResponse(const StorePrepResponse& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    result_(0u),
    pmid_id_(const_cast< ::std::string*>(&_default_pmid_id_)),
    iou_authority_(const_cast< ::std::string*>(&_default_iou_authority_)),
    signed_iou_authority_(const_cast< ::std::string*>(&_default_signed_iou_authority_)) {
  SharedCtor();
  MergeFrom(from);
}

void StorePrepResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  pmid_id_ = const_cast< ::std::string*>(&_default_pmid_id_);
  iou_authority_ = const_cast< ::std::string*>(&_default_iou_authority_);
  signed_iou_authority_ = const_cast< ::std::string*>(&_default_signed_iou_authority_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StorePrepResponse::~StorePrepResponse() {
  SharedDtor();
}

void StorePrepResponse::SharedDtor() {
  if (pmid_id_ != &_default_pmid_id_) {
    delete pmid_id_;
  }
  if (iou_authority_ != &_default_iou_authority_) {
    delete iou_authority_;
  }
  if (signed_iou_authority_ != &_default_signed_iou_authority_) {
    delete signed_iou_authority_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* StorePrepResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StorePrepResponse_descriptor_;
}

const StorePrepResponse& StorePrepResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_5fservice_5fmessages_2eproto();  return *default_instance_;
}

StorePrepResponse* StorePrepResponse::default_instance_ = NULL;

StorePrepResponse* StorePrepResponse::New() const {
  return new StorePrepResponse;
}

void StorePrepResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    if (_has_bit(1)) {
      if (pmid_id_ != &_default_pmid_id_) {
        pmid_id_->clear();
      }
    }
    if (_has_bit(2)) {
      if (iou_authority_ != &_default_iou_authority_) {
        iou_authority_->clear();
      }
    }
    if (_has_bit(3)) {
      if (signed_iou_authority_ != &_default_signed_iou_authority_) {
        signed_iou_authority_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StorePrepResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_pmid_id;
        break;
      }
      
      // optional bytes pmid_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_pmid_id:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_pmid_id()));
        if (input->ExpectTag(26)) goto parse_iou_authority;
        break;
      }
      
      // optional bytes iou_authority = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_iou_authority:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_iou_authority()));
        if (input->ExpectTag(34)) goto parse_signed_iou_authority;
        break;
      }
      
      // optional bytes signed_iou_authority = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_signed_iou_authority:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_signed_iou_authority()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StorePrepResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    StorePrepResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->result(), output);
  }
  
  // optional bytes pmid_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(2, this->pmid_id(), output);
  }
  
  // optional bytes iou_authority = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(3, this->iou_authority(), output);
  }
  
  // optional bytes signed_iou_authority = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(4, this->signed_iou_authority(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StorePrepResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->result(), target);
  }
  
  // optional bytes pmid_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(2, this->pmid_id(), target);
  }
  
  // optional bytes iou_authority = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(3, this->iou_authority(), target);
  }
  
  // optional bytes signed_iou_authority = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(4, this->signed_iou_authority(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StorePrepResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
    // optional bytes pmid_id = 2;
    if (has_pmid_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->pmid_id());
    }
    
    // optional bytes iou_authority = 3;
    if (has_iou_authority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->iou_authority());
    }
    
    // optional bytes signed_iou_authority = 4;
    if (has_signed_iou_authority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->signed_iou_authority());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void StorePrepResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StorePrepResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StorePrepResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StorePrepResponse::MergeFrom(const StorePrepResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_result(from.result());
    }
    if (from._has_bit(1)) {
      set_pmid_id(from.pmid_id());
    }
    if (from._has_bit(2)) {
      set_iou_authority(from.iou_authority());
    }
    if (from._has_bit(3)) {
      set_signed_iou_authority(from.signed_iou_authority());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StorePrepResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StorePrepResponse::CopyFrom(const StorePrepResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StorePrepResponse::Swap(StorePrepResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(pmid_id_, other->pmid_id_);
    std::swap(iou_authority_, other->iou_authority_);
    std::swap(signed_iou_authority_, other->signed_iou_authority_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool StorePrepResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* StorePrepResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* StorePrepResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return StorePrepResponse_reflection_;
}

// ===================================================================

const ::std::string StoreRequest::_default_chunkname_;
const ::std::string StoreRequest::_default_data_;
const ::std::string StoreRequest::_default_pmid_;
const ::std::string StoreRequest::_default_public_key_;
const ::std::string StoreRequest::_default_signed_public_key_;
const ::std::string StoreRequest::_default_signed_request_;
#ifndef _MSC_VER
const int StoreRequest::kChunknameFieldNumber;
const int StoreRequest::kDataFieldNumber;
const int StoreRequest::kPmidFieldNumber;
const int StoreRequest::kPublicKeyFieldNumber;
const int StoreRequest::kSignedPublicKeyFieldNumber;
const int StoreRequest::kSignedRequestFieldNumber;
const int StoreRequest::kDataTypeFieldNumber;
const int StoreRequest::kOffsetFieldNumber;
const int StoreRequest::kChunkletSizeFieldNumber;
#endif  // !_MSC_VER

StoreRequest::StoreRequest()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    chunkname_(const_cast< ::std::string*>(&_default_chunkname_)),
    data_(const_cast< ::std::string*>(&_default_data_)),
    pmid_(const_cast< ::std::string*>(&_default_pmid_)),
    public_key_(const_cast< ::std::string*>(&_default_public_key_)),
    signed_public_key_(const_cast< ::std::string*>(&_default_signed_public_key_)),
    signed_request_(const_cast< ::std::string*>(&_default_signed_request_)),
    data_type_(0),
    offset_(0u),
    chunklet_size_(0u) {
  SharedCtor();
}

void StoreRequest::InitAsDefaultInstance() {}

StoreRequest::StoreRequest(const StoreRequest& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    chunkname_(const_cast< ::std::string*>(&_default_chunkname_)),
    data_(const_cast< ::std::string*>(&_default_data_)),
    pmid_(const_cast< ::std::string*>(&_default_pmid_)),
    public_key_(const_cast< ::std::string*>(&_default_public_key_)),
    signed_public_key_(const_cast< ::std::string*>(&_default_signed_public_key_)),
    signed_request_(const_cast< ::std::string*>(&_default_signed_request_)),
    data_type_(0),
    offset_(0u),
    chunklet_size_(0u) {
  SharedCtor();
  MergeFrom(from);
}

void StoreRequest::SharedCtor() {
  _cached_size_ = 0;
  chunkname_ = const_cast< ::std::string*>(&_default_chunkname_);
  data_ = const_cast< ::std::string*>(&_default_data_);
  pmid_ = const_cast< ::std::string*>(&_default_pmid_);
  public_key_ = const_cast< ::std::string*>(&_default_public_key_);
  signed_public_key_ = const_cast< ::std::string*>(&_default_signed_public_key_);
  signed_request_ = const_cast< ::std::string*>(&_default_signed_request_);
  data_type_ = 0;
  offset_ = 0u;
  chunklet_size_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StoreRequest::~StoreRequest() {
  SharedDtor();
}

void StoreRequest::SharedDtor() {
  if (chunkname_ != &_default_chunkname_) {
    delete chunkname_;
  }
  if (data_ != &_default_data_) {
    delete data_;
  }
  if (pmid_ != &_default_pmid_) {
    delete pmid_;
  }
  if (public_key_ != &_default_public_key_) {
    delete public_key_;
  }
  if (signed_public_key_ != &_default_signed_public_key_) {
    delete signed_public_key_;
  }
  if (signed_request_ != &_default_signed_request_) {
    delete signed_request_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* StoreRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StoreRequest_descriptor_;
}

const StoreRequest& StoreRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_5fservice_5fmessages_2eproto();  return *default_instance_;
}

StoreRequest* StoreRequest::default_instance_ = NULL;

StoreRequest* StoreRequest::New() const {
  return new StoreRequest;
}

void StoreRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (chunkname_ != &_default_chunkname_) {
        chunkname_->clear();
      }
    }
    if (_has_bit(1)) {
      if (data_ != &_default_data_) {
        data_->clear();
      }
    }
    if (_has_bit(2)) {
      if (pmid_ != &_default_pmid_) {
        pmid_->clear();
      }
    }
    if (_has_bit(3)) {
      if (public_key_ != &_default_public_key_) {
        public_key_->clear();
      }
    }
    if (_has_bit(4)) {
      if (signed_public_key_ != &_default_signed_public_key_) {
        signed_public_key_->clear();
      }
    }
    if (_has_bit(5)) {
      if (signed_request_ != &_default_signed_request_) {
        signed_request_->clear();
      }
    }
    data_type_ = 0;
    offset_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    chunklet_size_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StoreRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required bytes chunkname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_chunkname()));
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }
      
      // required bytes data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_data:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_data()));
        if (input->ExpectTag(26)) goto parse_pmid;
        break;
      }
      
      // optional bytes pmid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_pmid:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_pmid()));
        if (input->ExpectTag(34)) goto parse_public_key;
        break;
      }
      
      // required bytes public_key = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_public_key:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_public_key()));
        if (input->ExpectTag(42)) goto parse_signed_public_key;
        break;
      }
      
      // required bytes signed_public_key = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_signed_public_key:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_signed_public_key()));
        if (input->ExpectTag(50)) goto parse_signed_request;
        break;
      }
      
      // required bytes signed_request = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_signed_request:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_signed_request()));
        if (input->ExpectTag(56)) goto parse_data_type;
        break;
      }
      
      // required int32 data_type = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_data_type:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &data_type_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_offset;
        break;
      }
      
      // optional uint32 offset = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_offset:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &offset_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_chunklet_size;
        break;
      }
      
      // optional uint32 chunklet_size = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_chunklet_size:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &chunklet_size_));
        _set_bit(8);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StoreRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    StoreRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required bytes chunkname = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(1, this->chunkname(), output);
  }
  
  // required bytes data = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(2, this->data(), output);
  }
  
  // optional bytes pmid = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(3, this->pmid(), output);
  }
  
  // required bytes public_key = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(4, this->public_key(), output);
  }
  
  // required bytes signed_public_key = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(5, this->signed_public_key(), output);
  }
  
  // required bytes signed_request = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(6, this->signed_request(), output);
  }
  
  // required int32 data_type = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(7, this->data_type(), output);
  }
  
  // optional uint32 offset = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(8, this->offset(), output);
  }
  
  // optional uint32 chunklet_size = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(9, this->chunklet_size(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StoreRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes chunkname = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(1, this->chunkname(), target);
  }
  
  // required bytes data = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(2, this->data(), target);
  }
  
  // optional bytes pmid = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(3, this->pmid(), target);
  }
  
  // required bytes public_key = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(4, this->public_key(), target);
  }
  
  // required bytes signed_public_key = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(5, this->signed_public_key(), target);
  }
  
  // required bytes signed_request = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(6, this->signed_request(), target);
  }
  
  // required int32 data_type = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(7, this->data_type(), target);
  }
  
  // optional uint32 offset = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(8, this->offset(), target);
  }
  
  // optional uint32 chunklet_size = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(9, this->chunklet_size(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StoreRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes chunkname = 1;
    if (has_chunkname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->chunkname());
    }
    
    // required bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->data());
    }
    
    // optional bytes pmid = 3;
    if (has_pmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->pmid());
    }
    
    // required bytes public_key = 4;
    if (has_public_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->public_key());
    }
    
    // required bytes signed_public_key = 5;
    if (has_signed_public_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->signed_public_key());
    }
    
    // required bytes signed_request = 6;
    if (has_signed_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->signed_request());
    }
    
    // required int32 data_type = 7;
    if (has_data_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->data_type());
    }
    
    // optional uint32 offset = 8;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->offset());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 chunklet_size = 9;
    if (has_chunklet_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->chunklet_size());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void StoreRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StoreRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StoreRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StoreRequest::MergeFrom(const StoreRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_chunkname(from.chunkname());
    }
    if (from._has_bit(1)) {
      set_data(from.data());
    }
    if (from._has_bit(2)) {
      set_pmid(from.pmid());
    }
    if (from._has_bit(3)) {
      set_public_key(from.public_key());
    }
    if (from._has_bit(4)) {
      set_signed_public_key(from.signed_public_key());
    }
    if (from._has_bit(5)) {
      set_signed_request(from.signed_request());
    }
    if (from._has_bit(6)) {
      set_data_type(from.data_type());
    }
    if (from._has_bit(7)) {
      set_offset(from.offset());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_chunklet_size(from.chunklet_size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StoreRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoreRequest::CopyFrom(const StoreRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoreRequest::Swap(StoreRequest* other) {
  if (other != this) {
    std::swap(chunkname_, other->chunkname_);
    std::swap(data_, other->data_);
    std::swap(pmid_, other->pmid_);
    std::swap(public_key_, other->public_key_);
    std::swap(signed_public_key_, other->signed_public_key_);
    std::swap(signed_request_, other->signed_request_);
    std::swap(data_type_, other->data_type_);
    std::swap(offset_, other->offset_);
    std::swap(chunklet_size_, other->chunklet_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool StoreRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007b) != 0x0000007b) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* StoreRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* StoreRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return StoreRequest_reflection_;
}

// ===================================================================

const ::std::string StoreResponse::_default_pmid_id_;
#ifndef _MSC_VER
const int StoreResponse::kResultFieldNumber;
const int StoreResponse::kPmidIdFieldNumber;
#endif  // !_MSC_VER

StoreResponse::StoreResponse()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    result_(0u),
    pmid_id_(const_cast< ::std::string*>(&_default_pmid_id_)) {
  SharedCtor();
}

void StoreResponse::InitAsDefaultInstance() {}

StoreResponse::StoreResponse(const StoreResponse& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    result_(0u),
    pmid_id_(const_cast< ::std::string*>(&_default_pmid_id_)) {
  SharedCtor();
  MergeFrom(from);
}

void StoreResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  pmid_id_ = const_cast< ::std::string*>(&_default_pmid_id_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StoreResponse::~StoreResponse() {
  SharedDtor();
}

void StoreResponse::SharedDtor() {
  if (pmid_id_ != &_default_pmid_id_) {
    delete pmid_id_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* StoreResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StoreResponse_descriptor_;
}

const StoreResponse& StoreResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_5fservice_5fmessages_2eproto();  return *default_instance_;
}

StoreResponse* StoreResponse::default_instance_ = NULL;

StoreResponse* StoreResponse::New() const {
  return new StoreResponse;
}

void StoreResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    if (_has_bit(1)) {
      if (pmid_id_ != &_default_pmid_id_) {
        pmid_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StoreResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_pmid_id;
        break;
      }
      
      // optional bytes pmid_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_pmid_id:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_pmid_id()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StoreResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    StoreResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->result(), output);
  }
  
  // optional bytes pmid_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(2, this->pmid_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StoreResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->result(), target);
  }
  
  // optional bytes pmid_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(2, this->pmid_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StoreResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
    // optional bytes pmid_id = 2;
    if (has_pmid_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->pmid_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void StoreResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StoreResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StoreResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StoreResponse::MergeFrom(const StoreResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_result(from.result());
    }
    if (from._has_bit(1)) {
      set_pmid_id(from.pmid_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StoreResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoreResponse::CopyFrom(const StoreResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoreResponse::Swap(StoreResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(pmid_id_, other->pmid_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool StoreResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* StoreResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* StoreResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return StoreResponse_reflection_;
}

// ===================================================================

const ::std::string StoreIOURequest::_default_chunkname_;
const ::std::string StoreIOURequest::_default_collector_pmid_;
const ::std::string StoreIOURequest::_default_iou_;
const ::std::string StoreIOURequest::_default_own_pmid_;
const ::std::string StoreIOURequest::_default_public_key_;
const ::std::string StoreIOURequest::_default_signed_public_key_;
const ::std::string StoreIOURequest::_default_signed_request_;
#ifndef _MSC_VER
const int StoreIOURequest::kChunknameFieldNumber;
const int StoreIOURequest::kDataSizeFieldNumber;
const int StoreIOURequest::kCollectorPmidFieldNumber;
const int StoreIOURequest::kIouFieldNumber;
const int StoreIOURequest::kOwnPmidFieldNumber;
const int StoreIOURequest::kPublicKeyFieldNumber;
const int StoreIOURequest::kSignedPublicKeyFieldNumber;
const int StoreIOURequest::kSignedRequestFieldNumber;
#endif  // !_MSC_VER

StoreIOURequest::StoreIOURequest()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    chunkname_(const_cast< ::std::string*>(&_default_chunkname_)),
    data_size_(GOOGLE_ULONGLONG(0)),
    collector_pmid_(const_cast< ::std::string*>(&_default_collector_pmid_)),
    iou_(const_cast< ::std::string*>(&_default_iou_)),
    own_pmid_(const_cast< ::std::string*>(&_default_own_pmid_)),
    public_key_(const_cast< ::std::string*>(&_default_public_key_)),
    signed_public_key_(const_cast< ::std::string*>(&_default_signed_public_key_)),
    signed_request_(const_cast< ::std::string*>(&_default_signed_request_)) {
  SharedCtor();
}

void StoreIOURequest::InitAsDefaultInstance() {}

StoreIOURequest::StoreIOURequest(const StoreIOURequest& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    chunkname_(const_cast< ::std::string*>(&_default_chunkname_)),
    data_size_(GOOGLE_ULONGLONG(0)),
    collector_pmid_(const_cast< ::std::string*>(&_default_collector_pmid_)),
    iou_(const_cast< ::std::string*>(&_default_iou_)),
    own_pmid_(const_cast< ::std::string*>(&_default_own_pmid_)),
    public_key_(const_cast< ::std::string*>(&_default_public_key_)),
    signed_public_key_(const_cast< ::std::string*>(&_default_signed_public_key_)),
    signed_request_(const_cast< ::std::string*>(&_default_signed_request_)) {
  SharedCtor();
  MergeFrom(from);
}

void StoreIOURequest::SharedCtor() {
  _cached_size_ = 0;
  chunkname_ = const_cast< ::std::string*>(&_default_chunkname_);
  data_size_ = GOOGLE_ULONGLONG(0);
  collector_pmid_ = const_cast< ::std::string*>(&_default_collector_pmid_);
  iou_ = const_cast< ::std::string*>(&_default_iou_);
  own_pmid_ = const_cast< ::std::string*>(&_default_own_pmid_);
  public_key_ = const_cast< ::std::string*>(&_default_public_key_);
  signed_public_key_ = const_cast< ::std::string*>(&_default_signed_public_key_);
  signed_request_ = const_cast< ::std::string*>(&_default_signed_request_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StoreIOURequest::~StoreIOURequest() {
  SharedDtor();
}

void StoreIOURequest::SharedDtor() {
  if (chunkname_ != &_default_chunkname_) {
    delete chunkname_;
  }
  if (collector_pmid_ != &_default_collector_pmid_) {
    delete collector_pmid_;
  }
  if (iou_ != &_default_iou_) {
    delete iou_;
  }
  if (own_pmid_ != &_default_own_pmid_) {
    delete own_pmid_;
  }
  if (public_key_ != &_default_public_key_) {
    delete public_key_;
  }
  if (signed_public_key_ != &_default_signed_public_key_) {
    delete signed_public_key_;
  }
  if (signed_request_ != &_default_signed_request_) {
    delete signed_request_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* StoreIOURequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StoreIOURequest_descriptor_;
}

const StoreIOURequest& StoreIOURequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_5fservice_5fmessages_2eproto();  return *default_instance_;
}

StoreIOURequest* StoreIOURequest::default_instance_ = NULL;

StoreIOURequest* StoreIOURequest::New() const {
  return new StoreIOURequest;
}

void StoreIOURequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (chunkname_ != &_default_chunkname_) {
        chunkname_->clear();
      }
    }
    data_size_ = GOOGLE_ULONGLONG(0);
    if (_has_bit(2)) {
      if (collector_pmid_ != &_default_collector_pmid_) {
        collector_pmid_->clear();
      }
    }
    if (_has_bit(3)) {
      if (iou_ != &_default_iou_) {
        iou_->clear();
      }
    }
    if (_has_bit(4)) {
      if (own_pmid_ != &_default_own_pmid_) {
        own_pmid_->clear();
      }
    }
    if (_has_bit(5)) {
      if (public_key_ != &_default_public_key_) {
        public_key_->clear();
      }
    }
    if (_has_bit(6)) {
      if (signed_public_key_ != &_default_signed_public_key_) {
        signed_public_key_->clear();
      }
    }
    if (_has_bit(7)) {
      if (signed_request_ != &_default_signed_request_) {
        signed_request_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StoreIOURequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required bytes chunkname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_chunkname()));
        if (input->ExpectTag(16)) goto parse_data_size;
        break;
      }
      
      // required uint64 data_size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_data_size:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt64(
              input, &data_size_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_collector_pmid;
        break;
      }
      
      // required bytes collector_pmid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_collector_pmid:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_collector_pmid()));
        if (input->ExpectTag(34)) goto parse_iou;
        break;
      }
      
      // required bytes iou = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_iou:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_iou()));
        if (input->ExpectTag(42)) goto parse_own_pmid;
        break;
      }
      
      // required bytes own_pmid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_own_pmid:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_own_pmid()));
        if (input->ExpectTag(50)) goto parse_public_key;
        break;
      }
      
      // required bytes public_key = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_public_key:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_public_key()));
        if (input->ExpectTag(58)) goto parse_signed_public_key;
        break;
      }
      
      // required bytes signed_public_key = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_signed_public_key:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_signed_public_key()));
        if (input->ExpectTag(66)) goto parse_signed_request;
        break;
      }
      
      // required bytes signed_request = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_signed_request:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_signed_request()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StoreIOURequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    StoreIOURequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required bytes chunkname = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(1, this->chunkname(), output);
  }
  
  // required uint64 data_size = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt64(2, this->data_size(), output);
  }
  
  // required bytes collector_pmid = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(3, this->collector_pmid(), output);
  }
  
  // required bytes iou = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(4, this->iou(), output);
  }
  
  // required bytes own_pmid = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(5, this->own_pmid(), output);
  }
  
  // required bytes public_key = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(6, this->public_key(), output);
  }
  
  // required bytes signed_public_key = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(7, this->signed_public_key(), output);
  }
  
  // required bytes signed_request = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(8, this->signed_request(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StoreIOURequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes chunkname = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(1, this->chunkname(), target);
  }
  
  // required uint64 data_size = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt64ToArray(2, this->data_size(), target);
  }
  
  // required bytes collector_pmid = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(3, this->collector_pmid(), target);
  }
  
  // required bytes iou = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(4, this->iou(), target);
  }
  
  // required bytes own_pmid = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(5, this->own_pmid(), target);
  }
  
  // required bytes public_key = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(6, this->public_key(), target);
  }
  
  // required bytes signed_public_key = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(7, this->signed_public_key(), target);
  }
  
  // required bytes signed_request = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(8, this->signed_request(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StoreIOURequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes chunkname = 1;
    if (has_chunkname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->chunkname());
    }
    
    // required uint64 data_size = 2;
    if (has_data_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt64Size(
          this->data_size());
    }
    
    // required bytes collector_pmid = 3;
    if (has_collector_pmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->collector_pmid());
    }
    
    // required bytes iou = 4;
    if (has_iou()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->iou());
    }
    
    // required bytes own_pmid = 5;
    if (has_own_pmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->own_pmid());
    }
    
    // required bytes public_key = 6;
    if (has_public_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->public_key());
    }
    
    // required bytes signed_public_key = 7;
    if (has_signed_public_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->signed_public_key());
    }
    
    // required bytes signed_request = 8;
    if (has_signed_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->signed_request());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void StoreIOURequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StoreIOURequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StoreIOURequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StoreIOURequest::MergeFrom(const StoreIOURequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_chunkname(from.chunkname());
    }
    if (from._has_bit(1)) {
      set_data_size(from.data_size());
    }
    if (from._has_bit(2)) {
      set_collector_pmid(from.collector_pmid());
    }
    if (from._has_bit(3)) {
      set_iou(from.iou());
    }
    if (from._has_bit(4)) {
      set_own_pmid(from.own_pmid());
    }
    if (from._has_bit(5)) {
      set_public_key(from.public_key());
    }
    if (from._has_bit(6)) {
      set_signed_public_key(from.signed_public_key());
    }
    if (from._has_bit(7)) {
      set_signed_request(from.signed_request());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StoreIOURequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoreIOURequest::CopyFrom(const StoreIOURequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoreIOURequest::Swap(StoreIOURequest* other) {
  if (other != this) {
    std::swap(chunkname_, other->chunkname_);
    std::swap(data_size_, other->data_size_);
    std::swap(collector_pmid_, other->collector_pmid_);
    std::swap(iou_, other->iou_);
    std::swap(own_pmid_, other->own_pmid_);
    std::swap(public_key_, other->public_key_);
    std::swap(signed_public_key_, other->signed_public_key_);
    std::swap(signed_request_, other->signed_request_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool StoreIOURequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* StoreIOURequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* StoreIOURequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return StoreIOURequest_reflection_;
}

// ===================================================================

const ::std::string StoreIOUResponse::_default_pmid_id_;
#ifndef _MSC_VER
const int StoreIOUResponse::kResultFieldNumber;
const int StoreIOUResponse::kPmidIdFieldNumber;
#endif  // !_MSC_VER

StoreIOUResponse::StoreIOUResponse()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    result_(0u),
    pmid_id_(const_cast< ::std::string*>(&_default_pmid_id_)) {
  SharedCtor();
}

void StoreIOUResponse::InitAsDefaultInstance() {}

StoreIOUResponse::StoreIOUResponse(const StoreIOUResponse& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    result_(0u),
    pmid_id_(const_cast< ::std::string*>(&_default_pmid_id_)) {
  SharedCtor();
  MergeFrom(from);
}

void StoreIOUResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  pmid_id_ = const_cast< ::std::string*>(&_default_pmid_id_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StoreIOUResponse::~StoreIOUResponse() {
  SharedDtor();
}

void StoreIOUResponse::SharedDtor() {
  if (pmid_id_ != &_default_pmid_id_) {
    delete pmid_id_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* StoreIOUResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StoreIOUResponse_descriptor_;
}

const StoreIOUResponse& StoreIOUResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_5fservice_5fmessages_2eproto();  return *default_instance_;
}

StoreIOUResponse* StoreIOUResponse::default_instance_ = NULL;

StoreIOUResponse* StoreIOUResponse::New() const {
  return new StoreIOUResponse;
}

void StoreIOUResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    if (_has_bit(1)) {
      if (pmid_id_ != &_default_pmid_id_) {
        pmid_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StoreIOUResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_pmid_id;
        break;
      }
      
      // optional bytes pmid_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_pmid_id:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_pmid_id()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StoreIOUResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    StoreIOUResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->result(), output);
  }
  
  // optional bytes pmid_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(2, this->pmid_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StoreIOUResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->result(), target);
  }
  
  // optional bytes pmid_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(2, this->pmid_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StoreIOUResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
    // optional bytes pmid_id = 2;
    if (has_pmid_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->pmid_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void StoreIOUResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StoreIOUResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StoreIOUResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StoreIOUResponse::MergeFrom(const StoreIOUResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_result(from.result());
    }
    if (from._has_bit(1)) {
      set_pmid_id(from.pmid_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StoreIOUResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoreIOUResponse::CopyFrom(const StoreIOUResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoreIOUResponse::Swap(StoreIOUResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(pmid_id_, other->pmid_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool StoreIOUResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* StoreIOUResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* StoreIOUResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return StoreIOUResponse_reflection_;
}

// ===================================================================

const ::std::string IOUDoneRequest::_default_chunkname_;
const ::std::string IOUDoneRequest::_default_public_key_;
const ::std::string IOUDoneRequest::_default_signed_public_key_;
const ::std::string IOUDoneRequest::_default_signed_request_;
#ifndef _MSC_VER
const int IOUDoneRequest::kChunknameFieldNumber;
const int IOUDoneRequest::kPublicKeyFieldNumber;
const int IOUDoneRequest::kSignedPublicKeyFieldNumber;
const int IOUDoneRequest::kSignedRequestFieldNumber;
#endif  // !_MSC_VER

IOUDoneRequest::IOUDoneRequest()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    chunkname_(const_cast< ::std::string*>(&_default_chunkname_)),
    public_key_(const_cast< ::std::string*>(&_default_public_key_)),
    signed_public_key_(const_cast< ::std::string*>(&_default_signed_public_key_)),
    signed_request_(const_cast< ::std::string*>(&_default_signed_request_)) {
  SharedCtor();
}

void IOUDoneRequest::InitAsDefaultInstance() {}

IOUDoneRequest::IOUDoneRequest(const IOUDoneRequest& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    chunkname_(const_cast< ::std::string*>(&_default_chunkname_)),
    public_key_(const_cast< ::std::string*>(&_default_public_key_)),
    signed_public_key_(const_cast< ::std::string*>(&_default_signed_public_key_)),
    signed_request_(const_cast< ::std::string*>(&_default_signed_request_)) {
  SharedCtor();
  MergeFrom(from);
}

void IOUDoneRequest::SharedCtor() {
  _cached_size_ = 0;
  chunkname_ = const_cast< ::std::string*>(&_default_chunkname_);
  public_key_ = const_cast< ::std::string*>(&_default_public_key_);
  signed_public_key_ = const_cast< ::std::string*>(&_default_signed_public_key_);
  signed_request_ = const_cast< ::std::string*>(&_default_signed_request_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IOUDoneRequest::~IOUDoneRequest() {
  SharedDtor();
}

void IOUDoneRequest::SharedDtor() {
  if (chunkname_ != &_default_chunkname_) {
    delete chunkname_;
  }
  if (public_key_ != &_default_public_key_) {
    delete public_key_;
  }
  if (signed_public_key_ != &_default_signed_public_key_) {
    delete signed_public_key_;
  }
  if (signed_request_ != &_default_signed_request_) {
    delete signed_request_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* IOUDoneRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IOUDoneRequest_descriptor_;
}

const IOUDoneRequest& IOUDoneRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_5fservice_5fmessages_2eproto();  return *default_instance_;
}

IOUDoneRequest* IOUDoneRequest::default_instance_ = NULL;

IOUDoneRequest* IOUDoneRequest::New() const {
  return new IOUDoneRequest;
}

void IOUDoneRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (chunkname_ != &_default_chunkname_) {
        chunkname_->clear();
      }
    }
    if (_has_bit(1)) {
      if (public_key_ != &_default_public_key_) {
        public_key_->clear();
      }
    }
    if (_has_bit(2)) {
      if (signed_public_key_ != &_default_signed_public_key_) {
        signed_public_key_->clear();
      }
    }
    if (_has_bit(3)) {
      if (signed_request_ != &_default_signed_request_) {
        signed_request_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IOUDoneRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required bytes chunkname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_chunkname()));
        if (input->ExpectTag(18)) goto parse_public_key;
        break;
      }
      
      // required bytes public_key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_public_key:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_public_key()));
        if (input->ExpectTag(26)) goto parse_signed_public_key;
        break;
      }
      
      // required bytes signed_public_key = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_signed_public_key:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_signed_public_key()));
        if (input->ExpectTag(34)) goto parse_signed_request;
        break;
      }
      
      // required bytes signed_request = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_signed_request:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_signed_request()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IOUDoneRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    IOUDoneRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required bytes chunkname = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(1, this->chunkname(), output);
  }
  
  // required bytes public_key = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(2, this->public_key(), output);
  }
  
  // required bytes signed_public_key = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(3, this->signed_public_key(), output);
  }
  
  // required bytes signed_request = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(4, this->signed_request(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IOUDoneRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes chunkname = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(1, this->chunkname(), target);
  }
  
  // required bytes public_key = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(2, this->public_key(), target);
  }
  
  // required bytes signed_public_key = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(3, this->signed_public_key(), target);
  }
  
  // required bytes signed_request = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(4, this->signed_request(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IOUDoneRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes chunkname = 1;
    if (has_chunkname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->chunkname());
    }
    
    // required bytes public_key = 2;
    if (has_public_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->public_key());
    }
    
    // required bytes signed_public_key = 3;
    if (has_signed_public_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->signed_public_key());
    }
    
    // required bytes signed_request = 4;
    if (has_signed_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->signed_request());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void IOUDoneRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IOUDoneRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IOUDoneRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IOUDoneRequest::MergeFrom(const IOUDoneRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_chunkname(from.chunkname());
    }
    if (from._has_bit(1)) {
      set_public_key(from.public_key());
    }
    if (from._has_bit(2)) {
      set_signed_public_key(from.signed_public_key());
    }
    if (from._has_bit(3)) {
      set_signed_request(from.signed_request());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IOUDoneRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IOUDoneRequest::CopyFrom(const IOUDoneRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IOUDoneRequest::Swap(IOUDoneRequest* other) {
  if (other != this) {
    std::swap(chunkname_, other->chunkname_);
    std::swap(public_key_, other->public_key_);
    std::swap(signed_public_key_, other->signed_public_key_);
    std::swap(signed_request_, other->signed_request_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool IOUDoneRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* IOUDoneRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* IOUDoneRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return IOUDoneRequest_reflection_;
}

// ===================================================================

const ::std::string IOUDoneResponse::_default_pmid_id_;
#ifndef _MSC_VER
const int IOUDoneResponse::kResultFieldNumber;
const int IOUDoneResponse::kPmidIdFieldNumber;
#endif  // !_MSC_VER

IOUDoneResponse::IOUDoneResponse()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    result_(0u),
    pmid_id_(const_cast< ::std::string*>(&_default_pmid_id_)) {
  SharedCtor();
}

void IOUDoneResponse::InitAsDefaultInstance() {}

IOUDoneResponse::IOUDoneResponse(const IOUDoneResponse& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    result_(0u),
    pmid_id_(const_cast< ::std::string*>(&_default_pmid_id_)) {
  SharedCtor();
  MergeFrom(from);
}

void IOUDoneResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  pmid_id_ = const_cast< ::std::string*>(&_default_pmid_id_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IOUDoneResponse::~IOUDoneResponse() {
  SharedDtor();
}

void IOUDoneResponse::SharedDtor() {
  if (pmid_id_ != &_default_pmid_id_) {
    delete pmid_id_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* IOUDoneResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IOUDoneResponse_descriptor_;
}

const IOUDoneResponse& IOUDoneResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_5fservice_5fmessages_2eproto();  return *default_instance_;
}

IOUDoneResponse* IOUDoneResponse::default_instance_ = NULL;

IOUDoneResponse* IOUDoneResponse::New() const {
  return new IOUDoneResponse;
}

void IOUDoneResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    if (_has_bit(1)) {
      if (pmid_id_ != &_default_pmid_id_) {
        pmid_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IOUDoneResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_pmid_id;
        break;
      }
      
      // optional bytes pmid_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_pmid_id:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_pmid_id()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IOUDoneResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    IOUDoneResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->result(), output);
  }
  
  // optional bytes pmid_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(2, this->pmid_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IOUDoneResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->result(), target);
  }
  
  // optional bytes pmid_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(2, this->pmid_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IOUDoneResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
    // optional bytes pmid_id = 2;
    if (has_pmid_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->pmid_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void IOUDoneResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IOUDoneResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IOUDoneResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IOUDoneResponse::MergeFrom(const IOUDoneResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_result(from.result());
    }
    if (from._has_bit(1)) {
      set_pmid_id(from.pmid_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IOUDoneResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IOUDoneResponse::CopyFrom(const IOUDoneResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IOUDoneResponse::Swap(IOUDoneResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(pmid_id_, other->pmid_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool IOUDoneResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* IOUDoneResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* IOUDoneResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return IOUDoneResponse_reflection_;
}

// ===================================================================

const ::std::string RankAuthority::_default_chunkname_;
const ::std::string RankAuthority::_default_pmid_;
#ifndef _MSC_VER
const int RankAuthority::kChunknameFieldNumber;
const int RankAuthority::kDataSizeFieldNumber;
const int RankAuthority::kPmidFieldNumber;
#endif  // !_MSC_VER

RankAuthority::RankAuthority()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    chunkname_(const_cast< ::std::string*>(&_default_chunkname_)),
    data_size_(GOOGLE_ULONGLONG(0)),
    pmid_(const_cast< ::std::string*>(&_default_pmid_)) {
  SharedCtor();
}

void RankAuthority::InitAsDefaultInstance() {}

RankAuthority::RankAuthority(const RankAuthority& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    chunkname_(const_cast< ::std::string*>(&_default_chunkname_)),
    data_size_(GOOGLE_ULONGLONG(0)),
    pmid_(const_cast< ::std::string*>(&_default_pmid_)) {
  SharedCtor();
  MergeFrom(from);
}

void RankAuthority::SharedCtor() {
  _cached_size_ = 0;
  chunkname_ = const_cast< ::std::string*>(&_default_chunkname_);
  data_size_ = GOOGLE_ULONGLONG(0);
  pmid_ = const_cast< ::std::string*>(&_default_pmid_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RankAuthority::~RankAuthority() {
  SharedDtor();
}

void RankAuthority::SharedDtor() {
  if (chunkname_ != &_default_chunkname_) {
    delete chunkname_;
  }
  if (pmid_ != &_default_pmid_) {
    delete pmid_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* RankAuthority::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RankAuthority_descriptor_;
}

const RankAuthority& RankAuthority::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_5fservice_5fmessages_2eproto();  return *default_instance_;
}

RankAuthority* RankAuthority::default_instance_ = NULL;

RankAuthority* RankAuthority::New() const {
  return new RankAuthority;
}

void RankAuthority::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (chunkname_ != &_default_chunkname_) {
        chunkname_->clear();
      }
    }
    data_size_ = GOOGLE_ULONGLONG(0);
    if (_has_bit(2)) {
      if (pmid_ != &_default_pmid_) {
        pmid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RankAuthority::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required bytes chunkname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_chunkname()));
        if (input->ExpectTag(16)) goto parse_data_size;
        break;
      }
      
      // required uint64 data_size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_data_size:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt64(
              input, &data_size_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_pmid;
        break;
      }
      
      // required bytes pmid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_pmid:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_pmid()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RankAuthority::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    RankAuthority::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required bytes chunkname = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(1, this->chunkname(), output);
  }
  
  // required uint64 data_size = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt64(2, this->data_size(), output);
  }
  
  // required bytes pmid = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(3, this->pmid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RankAuthority::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes chunkname = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(1, this->chunkname(), target);
  }
  
  // required uint64 data_size = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt64ToArray(2, this->data_size(), target);
  }
  
  // required bytes pmid = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(3, this->pmid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RankAuthority::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes chunkname = 1;
    if (has_chunkname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->chunkname());
    }
    
    // required uint64 data_size = 2;
    if (has_data_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt64Size(
          this->data_size());
    }
    
    // required bytes pmid = 3;
    if (has_pmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->pmid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void RankAuthority::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RankAuthority* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RankAuthority*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RankAuthority::MergeFrom(const RankAuthority& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_chunkname(from.chunkname());
    }
    if (from._has_bit(1)) {
      set_data_size(from.data_size());
    }
    if (from._has_bit(2)) {
      set_pmid(from.pmid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RankAuthority::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankAuthority::CopyFrom(const RankAuthority& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankAuthority::Swap(RankAuthority* other) {
  if (other != this) {
    std::swap(chunkname_, other->chunkname_);
    std::swap(data_size_, other->data_size_);
    std::swap(pmid_, other->pmid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool RankAuthority::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* RankAuthority::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* RankAuthority::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return RankAuthority_reflection_;
}

// ===================================================================

const ::std::string StoreReferenceRequest::_default_chunkname_;
const ::std::string StoreReferenceRequest::_default_pmid_;
const ::std::string StoreReferenceRequest::_default_signed_pmid_;
const ::std::string StoreReferenceRequest::_default_public_key_;
const ::std::string StoreReferenceRequest::_default_signed_public_key_;
const ::std::string StoreReferenceRequest::_default_signed_request_;
#ifndef _MSC_VER
const int StoreReferenceRequest::kChunknameFieldNumber;
const int StoreReferenceRequest::kPmidFieldNumber;
const int StoreReferenceRequest::kSignedPmidFieldNumber;
const int StoreReferenceRequest::kPublicKeyFieldNumber;
const int StoreReferenceRequest::kSignedPublicKeyFieldNumber;
const int StoreReferenceRequest::kSignedRequestFieldNumber;
const int StoreReferenceRequest::kNoIouRankFieldNumber;
#endif  // !_MSC_VER

StoreReferenceRequest::StoreReferenceRequest()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    chunkname_(const_cast< ::std::string*>(&_default_chunkname_)),
    pmid_(const_cast< ::std::string*>(&_default_pmid_)),
    signed_pmid_(const_cast< ::std::string*>(&_default_signed_pmid_)),
    public_key_(const_cast< ::std::string*>(&_default_public_key_)),
    signed_public_key_(const_cast< ::std::string*>(&_default_signed_public_key_)),
    signed_request_(const_cast< ::std::string*>(&_default_signed_request_)),
    no_iou_rank_(false) {
  SharedCtor();
}

void StoreReferenceRequest::InitAsDefaultInstance() {}

StoreReferenceRequest::StoreReferenceRequest(const StoreReferenceRequest& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    chunkname_(const_cast< ::std::string*>(&_default_chunkname_)),
    pmid_(const_cast< ::std::string*>(&_default_pmid_)),
    signed_pmid_(const_cast< ::std::string*>(&_default_signed_pmid_)),
    public_key_(const_cast< ::std::string*>(&_default_public_key_)),
    signed_public_key_(const_cast< ::std::string*>(&_default_signed_public_key_)),
    signed_request_(const_cast< ::std::string*>(&_default_signed_request_)),
    no_iou_rank_(false) {
  SharedCtor();
  MergeFrom(from);
}

void StoreReferenceRequest::SharedCtor() {
  _cached_size_ = 0;
  chunkname_ = const_cast< ::std::string*>(&_default_chunkname_);
  pmid_ = const_cast< ::std::string*>(&_default_pmid_);
  signed_pmid_ = const_cast< ::std::string*>(&_default_signed_pmid_);
  public_key_ = const_cast< ::std::string*>(&_default_public_key_);
  signed_public_key_ = const_cast< ::std::string*>(&_default_signed_public_key_);
  signed_request_ = const_cast< ::std::string*>(&_default_signed_request_);
  no_iou_rank_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StoreReferenceRequest::~StoreReferenceRequest() {
  SharedDtor();
}

void StoreReferenceRequest::SharedDtor() {
  if (chunkname_ != &_default_chunkname_) {
    delete chunkname_;
  }
  if (pmid_ != &_default_pmid_) {
    delete pmid_;
  }
  if (signed_pmid_ != &_default_signed_pmid_) {
    delete signed_pmid_;
  }
  if (public_key_ != &_default_public_key_) {
    delete public_key_;
  }
  if (signed_public_key_ != &_default_signed_public_key_) {
    delete signed_public_key_;
  }
  if (signed_request_ != &_default_signed_request_) {
    delete signed_request_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* StoreReferenceRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StoreReferenceRequest_descriptor_;
}

const StoreReferenceRequest& StoreReferenceRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_5fservice_5fmessages_2eproto();  return *default_instance_;
}

StoreReferenceRequest* StoreReferenceRequest::default_instance_ = NULL;

StoreReferenceRequest* StoreReferenceRequest::New() const {
  return new StoreReferenceRequest;
}

void StoreReferenceRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (chunkname_ != &_default_chunkname_) {
        chunkname_->clear();
      }
    }
    if (_has_bit(1)) {
      if (pmid_ != &_default_pmid_) {
        pmid_->clear();
      }
    }
    if (_has_bit(2)) {
      if (signed_pmid_ != &_default_signed_pmid_) {
        signed_pmid_->clear();
      }
    }
    if (_has_bit(3)) {
      if (public_key_ != &_default_public_key_) {
        public_key_->clear();
      }
    }
    if (_has_bit(4)) {
      if (signed_public_key_ != &_default_signed_public_key_) {
        signed_public_key_->clear();
      }
    }
    if (_has_bit(5)) {
      if (signed_request_ != &_default_signed_request_) {
        signed_request_->clear();
      }
    }
    no_iou_rank_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StoreReferenceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required bytes chunkname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_chunkname()));
        if (input->ExpectTag(18)) goto parse_pmid;
        break;
      }
      
      // required bytes pmid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_pmid:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_pmid()));
        if (input->ExpectTag(26)) goto parse_signed_pmid;
        break;
      }
      
      // required bytes signed_pmid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_signed_pmid:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_signed_pmid()));
        if (input->ExpectTag(34)) goto parse_public_key;
        break;
      }
      
      // required bytes public_key = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_public_key:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_public_key()));
        if (input->ExpectTag(42)) goto parse_signed_public_key;
        break;
      }
      
      // required bytes signed_public_key = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_signed_public_key:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_signed_public_key()));
        if (input->ExpectTag(50)) goto parse_signed_request;
        break;
      }
      
      // required bytes signed_request = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_signed_request:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_signed_request()));
        if (input->ExpectTag(56)) goto parse_no_iou_rank;
        break;
      }
      
      // optional bool no_iou_rank = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_no_iou_rank:
        DO_(::google::protobuf::internal::WireFormat::ReadBool(
              input, &no_iou_rank_));
        _set_bit(6);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StoreReferenceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    StoreReferenceRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required bytes chunkname = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(1, this->chunkname(), output);
  }
  
  // required bytes pmid = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(2, this->pmid(), output);
  }
  
  // required bytes signed_pmid = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(3, this->signed_pmid(), output);
  }
  
  // required bytes public_key = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(4, this->public_key(), output);
  }
  
  // required bytes signed_public_key = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(5, this->signed_public_key(), output);
  }
  
  // required bytes signed_request = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(6, this->signed_request(), output);
  }
  
  // optional bool no_iou_rank = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteBool(7, this->no_iou_rank(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StoreReferenceRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes chunkname = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(1, this->chunkname(), target);
  }
  
  // required bytes pmid = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(2, this->pmid(), target);
  }
  
  // required bytes signed_pmid = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(3, this->signed_pmid(), target);
  }
  
  // required bytes public_key = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(4, this->public_key(), target);
  }
  
  // required bytes signed_public_key = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(5, this->signed_public_key(), target);
  }
  
  // required bytes signed_request = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(6, this->signed_request(), target);
  }
  
  // optional bool no_iou_rank = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteBoolToArray(7, this->no_iou_rank(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StoreReferenceRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes chunkname = 1;
    if (has_chunkname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->chunkname());
    }
    
    // required bytes pmid = 2;
    if (has_pmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->pmid());
    }
    
    // required bytes signed_pmid = 3;
    if (has_signed_pmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->signed_pmid());
    }
    
    // required bytes public_key = 4;
    if (has_public_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->public_key());
    }
    
    // required bytes signed_public_key = 5;
    if (has_signed_public_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->signed_public_key());
    }
    
    // required bytes signed_request = 6;
    if (has_signed_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->signed_request());
    }
    
    // optional bool no_iou_rank = 7;
    if (has_no_iou_rank()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void StoreReferenceRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StoreReferenceRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StoreReferenceRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StoreReferenceRequest::MergeFrom(const StoreReferenceRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_chunkname(from.chunkname());
    }
    if (from._has_bit(1)) {
      set_pmid(from.pmid());
    }
    if (from._has_bit(2)) {
      set_signed_pmid(from.signed_pmid());
    }
    if (from._has_bit(3)) {
      set_public_key(from.public_key());
    }
    if (from._has_bit(4)) {
      set_signed_public_key(from.signed_public_key());
    }
    if (from._has_bit(5)) {
      set_signed_request(from.signed_request());
    }
    if (from._has_bit(6)) {
      set_no_iou_rank(from.no_iou_rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StoreReferenceRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoreReferenceRequest::CopyFrom(const StoreReferenceRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoreReferenceRequest::Swap(StoreReferenceRequest* other) {
  if (other != this) {
    std::swap(chunkname_, other->chunkname_);
    std::swap(pmid_, other->pmid_);
    std::swap(signed_pmid_, other->signed_pmid_);
    std::swap(public_key_, other->public_key_);
    std::swap(signed_public_key_, other->signed_public_key_);
    std::swap(signed_request_, other->signed_request_);
    std::swap(no_iou_rank_, other->no_iou_rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool StoreReferenceRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* StoreReferenceRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* StoreReferenceRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return StoreReferenceRequest_reflection_;
}

// ===================================================================

const ::std::string StoreReferenceResponse::_default_rank_authority_;
const ::std::string StoreReferenceResponse::_default_signed_rank_authority_;
const ::std::string StoreReferenceResponse::_default_iou_;
const ::std::string StoreReferenceResponse::_default_pmid_id_;
const ::std::string StoreReferenceResponse::_default_public_key_;
const ::std::string StoreReferenceResponse::_default_signed_public_key_;
#ifndef _MSC_VER
const int StoreReferenceResponse::kResultFieldNumber;
const int StoreReferenceResponse::kRankAuthorityFieldNumber;
const int StoreReferenceResponse::kSignedRankAuthorityFieldNumber;
const int StoreReferenceResponse::kIouFieldNumber;
const int StoreReferenceResponse::kPmidIdFieldNumber;
const int StoreReferenceResponse::kPublicKeyFieldNumber;
const int StoreReferenceResponse::kSignedPublicKeyFieldNumber;
#endif  // !_MSC_VER

StoreReferenceResponse::StoreReferenceResponse()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    result_(0u),
    rank_authority_(const_cast< ::std::string*>(&_default_rank_authority_)),
    signed_rank_authority_(const_cast< ::std::string*>(&_default_signed_rank_authority_)),
    iou_(const_cast< ::std::string*>(&_default_iou_)),
    pmid_id_(const_cast< ::std::string*>(&_default_pmid_id_)),
    public_key_(const_cast< ::std::string*>(&_default_public_key_)),
    signed_public_key_(const_cast< ::std::string*>(&_default_signed_public_key_)) {
  SharedCtor();
}

void StoreReferenceResponse::InitAsDefaultInstance() {}

StoreReferenceResponse::StoreReferenceResponse(const StoreReferenceResponse& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    result_(0u),
    rank_authority_(const_cast< ::std::string*>(&_default_rank_authority_)),
    signed_rank_authority_(const_cast< ::std::string*>(&_default_signed_rank_authority_)),
    iou_(const_cast< ::std::string*>(&_default_iou_)),
    pmid_id_(const_cast< ::std::string*>(&_default_pmid_id_)),
    public_key_(const_cast< ::std::string*>(&_default_public_key_)),
    signed_public_key_(const_cast< ::std::string*>(&_default_signed_public_key_)) {
  SharedCtor();
  MergeFrom(from);
}

void StoreReferenceResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  rank_authority_ = const_cast< ::std::string*>(&_default_rank_authority_);
  signed_rank_authority_ = const_cast< ::std::string*>(&_default_signed_rank_authority_);
  iou_ = const_cast< ::std::string*>(&_default_iou_);
  pmid_id_ = const_cast< ::std::string*>(&_default_pmid_id_);
  public_key_ = const_cast< ::std::string*>(&_default_public_key_);
  signed_public_key_ = const_cast< ::std::string*>(&_default_signed_public_key_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StoreReferenceResponse::~StoreReferenceResponse() {
  SharedDtor();
}

void StoreReferenceResponse::SharedDtor() {
  if (rank_authority_ != &_default_rank_authority_) {
    delete rank_authority_;
  }
  if (signed_rank_authority_ != &_default_signed_rank_authority_) {
    delete signed_rank_authority_;
  }
  if (iou_ != &_default_iou_) {
    delete iou_;
  }
  if (pmid_id_ != &_default_pmid_id_) {
    delete pmid_id_;
  }
  if (public_key_ != &_default_public_key_) {
    delete public_key_;
  }
  if (signed_public_key_ != &_default_signed_public_key_) {
    delete signed_public_key_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* StoreReferenceResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StoreReferenceResponse_descriptor_;
}

const StoreReferenceResponse& StoreReferenceResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_5fservice_5fmessages_2eproto();  return *default_instance_;
}

StoreReferenceResponse* StoreReferenceResponse::default_instance_ = NULL;

StoreReferenceResponse* StoreReferenceResponse::New() const {
  return new StoreReferenceResponse;
}

void StoreReferenceResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    if (_has_bit(1)) {
      if (rank_authority_ != &_default_rank_authority_) {
        rank_authority_->clear();
      }
    }
    if (_has_bit(2)) {
      if (signed_rank_authority_ != &_default_signed_rank_authority_) {
        signed_rank_authority_->clear();
      }
    }
    if (_has_bit(3)) {
      if (iou_ != &_default_iou_) {
        iou_->clear();
      }
    }
    if (_has_bit(4)) {
      if (pmid_id_ != &_default_pmid_id_) {
        pmid_id_->clear();
      }
    }
    if (_has_bit(5)) {
      if (public_key_ != &_default_public_key_) {
        public_key_->clear();
      }
    }
    if (_has_bit(6)) {
      if (signed_public_key_ != &_default_signed_public_key_) {
        signed_public_key_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StoreReferenceResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_rank_authority;
        break;
      }
      
      // optional bytes rank_authority = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_rank_authority:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_rank_authority()));
        if (input->ExpectTag(26)) goto parse_signed_rank_authority;
        break;
      }
      
      // optional bytes signed_rank_authority = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_signed_rank_authority:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_signed_rank_authority()));
        if (input->ExpectTag(34)) goto parse_iou;
        break;
      }
      
      // optional bytes iou = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_iou:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_iou()));
        if (input->ExpectTag(42)) goto parse_pmid_id;
        break;
      }
      
      // optional bytes pmid_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_pmid_id:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_pmid_id()));
        if (input->ExpectTag(50)) goto parse_public_key;
        break;
      }
      
      // optional bytes public_key = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_public_key:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_public_key()));
        if (input->ExpectTag(58)) goto parse_signed_public_key;
        break;
      }
      
      // optional bytes signed_public_key = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_signed_public_key:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_signed_public_key()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StoreReferenceResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    StoreReferenceResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->result(), output);
  }
  
  // optional bytes rank_authority = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(2, this->rank_authority(), output);
  }
  
  // optional bytes signed_rank_authority = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(3, this->signed_rank_authority(), output);
  }
  
  // optional bytes iou = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(4, this->iou(), output);
  }
  
  // optional bytes pmid_id = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(5, this->pmid_id(), output);
  }
  
  // optional bytes public_key = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(6, this->public_key(), output);
  }
  
  // optional bytes signed_public_key = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(7, this->signed_public_key(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StoreReferenceResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->result(), target);
  }
  
  // optional bytes rank_authority = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(2, this->rank_authority(), target);
  }
  
  // optional bytes signed_rank_authority = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(3, this->signed_rank_authority(), target);
  }
  
  // optional bytes iou = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(4, this->iou(), target);
  }
  
  // optional bytes pmid_id = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(5, this->pmid_id(), target);
  }
  
  // optional bytes public_key = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(6, this->public_key(), target);
  }
  
  // optional bytes signed_public_key = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(7, this->signed_public_key(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StoreReferenceResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
    // optional bytes rank_authority = 2;
    if (has_rank_authority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->rank_authority());
    }
    
    // optional bytes signed_rank_authority = 3;
    if (has_signed_rank_authority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->signed_rank_authority());
    }
    
    // optional bytes iou = 4;
    if (has_iou()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->iou());
    }
    
    // optional bytes pmid_id = 5;
    if (has_pmid_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->pmid_id());
    }
    
    // optional bytes public_key = 6;
    if (has_public_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->public_key());
    }
    
    // optional bytes signed_public_key = 7;
    if (has_signed_public_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->signed_public_key());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void StoreReferenceResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StoreReferenceResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StoreReferenceResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StoreReferenceResponse::MergeFrom(const StoreReferenceResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_result(from.result());
    }
    if (from._has_bit(1)) {
      set_rank_authority(from.rank_authority());
    }
    if (from._has_bit(2)) {
      set_signed_rank_authority(from.signed_rank_authority());
    }
    if (from._has_bit(3)) {
      set_iou(from.iou());
    }
    if (from._has_bit(4)) {
      set_pmid_id(from.pmid_id());
    }
    if (from._has_bit(5)) {
      set_public_key(from.public_key());
    }
    if (from._has_bit(6)) {
      set_signed_public_key(from.signed_public_key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StoreReferenceResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoreReferenceResponse::CopyFrom(const StoreReferenceResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoreReferenceResponse::Swap(StoreReferenceResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(rank_authority_, other->rank_authority_);
    std::swap(signed_rank_authority_, other->signed_rank_authority_);
    std::swap(iou_, other->iou_);
    std::swap(pmid_id_, other->pmid_id_);
    std::swap(public_key_, other->public_key_);
    std::swap(signed_public_key_, other->signed_public_key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool StoreReferenceResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* StoreReferenceResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* StoreReferenceResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return StoreReferenceResponse_reflection_;
}

// ===================================================================

const ::std::string DeleteRequest::_default_chunkname_;
const ::std::string DeleteRequest::_default_public_key_;
const ::std::string DeleteRequest::_default_signed_public_key_;
const ::std::string DeleteRequest::_default_signed_request_;
#ifndef _MSC_VER
const int DeleteRequest::kChunknameFieldNumber;
const int DeleteRequest::kPublicKeyFieldNumber;
const int DeleteRequest::kSignedPublicKeyFieldNumber;
const int DeleteRequest::kSignedRequestFieldNumber;
const int DeleteRequest::kDataTypeFieldNumber;
#endif  // !_MSC_VER

DeleteRequest::DeleteRequest()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    chunkname_(const_cast< ::std::string*>(&_default_chunkname_)),
    public_key_(const_cast< ::std::string*>(&_default_public_key_)),
    signed_public_key_(const_cast< ::std::string*>(&_default_signed_public_key_)),
    signed_request_(const_cast< ::std::string*>(&_default_signed_request_)),
    data_type_(0) {
  SharedCtor();
}

void DeleteRequest::InitAsDefaultInstance() {}

DeleteRequest::DeleteRequest(const DeleteRequest& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    chunkname_(const_cast< ::std::string*>(&_default_chunkname_)),
    public_key_(const_cast< ::std::string*>(&_default_public_key_)),
    signed_public_key_(const_cast< ::std::string*>(&_default_signed_public_key_)),
    signed_request_(const_cast< ::std::string*>(&_default_signed_request_)),
    data_type_(0) {
  SharedCtor();
  MergeFrom(from);
}

void DeleteRequest::SharedCtor() {
  _cached_size_ = 0;
  chunkname_ = const_cast< ::std::string*>(&_default_chunkname_);
  public_key_ = const_cast< ::std::string*>(&_default_public_key_);
  signed_public_key_ = const_cast< ::std::string*>(&_default_signed_public_key_);
  signed_request_ = const_cast< ::std::string*>(&_default_signed_request_);
  data_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteRequest::~DeleteRequest() {
  SharedDtor();
}

void DeleteRequest::SharedDtor() {
  if (chunkname_ != &_default_chunkname_) {
    delete chunkname_;
  }
  if (public_key_ != &_default_public_key_) {
    delete public_key_;
  }
  if (signed_public_key_ != &_default_signed_public_key_) {
    delete signed_public_key_;
  }
  if (signed_request_ != &_default_signed_request_) {
    delete signed_request_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DeleteRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteRequest_descriptor_;
}

const DeleteRequest& DeleteRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_5fservice_5fmessages_2eproto();  return *default_instance_;
}

DeleteRequest* DeleteRequest::default_instance_ = NULL;

DeleteRequest* DeleteRequest::New() const {
  return new DeleteRequest;
}

void DeleteRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (chunkname_ != &_default_chunkname_) {
        chunkname_->clear();
      }
    }
    if (_has_bit(1)) {
      if (public_key_ != &_default_public_key_) {
        public_key_->clear();
      }
    }
    if (_has_bit(2)) {
      if (signed_public_key_ != &_default_signed_public_key_) {
        signed_public_key_->clear();
      }
    }
    if (_has_bit(3)) {
      if (signed_request_ != &_default_signed_request_) {
        signed_request_->clear();
      }
    }
    data_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required bytes chunkname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_chunkname()));
        if (input->ExpectTag(18)) goto parse_public_key;
        break;
      }
      
      // required bytes public_key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_public_key:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_public_key()));
        if (input->ExpectTag(26)) goto parse_signed_public_key;
        break;
      }
      
      // required bytes signed_public_key = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_signed_public_key:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_signed_public_key()));
        if (input->ExpectTag(34)) goto parse_signed_request;
        break;
      }
      
      // required bytes signed_request = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_signed_request:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_signed_request()));
        if (input->ExpectTag(40)) goto parse_data_type;
        break;
      }
      
      // required int32 data_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_data_type:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &data_type_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeleteRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DeleteRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required bytes chunkname = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(1, this->chunkname(), output);
  }
  
  // required bytes public_key = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(2, this->public_key(), output);
  }
  
  // required bytes signed_public_key = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(3, this->signed_public_key(), output);
  }
  
  // required bytes signed_request = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(4, this->signed_request(), output);
  }
  
  // required int32 data_type = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(5, this->data_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeleteRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes chunkname = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(1, this->chunkname(), target);
  }
  
  // required bytes public_key = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(2, this->public_key(), target);
  }
  
  // required bytes signed_public_key = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(3, this->signed_public_key(), target);
  }
  
  // required bytes signed_request = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(4, this->signed_request(), target);
  }
  
  // required int32 data_type = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(5, this->data_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeleteRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes chunkname = 1;
    if (has_chunkname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->chunkname());
    }
    
    // required bytes public_key = 2;
    if (has_public_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->public_key());
    }
    
    // required bytes signed_public_key = 3;
    if (has_signed_public_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->signed_public_key());
    }
    
    // required bytes signed_request = 4;
    if (has_signed_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->signed_request());
    }
    
    // required int32 data_type = 5;
    if (has_data_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->data_type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DeleteRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteRequest::MergeFrom(const DeleteRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_chunkname(from.chunkname());
    }
    if (from._has_bit(1)) {
      set_public_key(from.public_key());
    }
    if (from._has_bit(2)) {
      set_signed_public_key(from.signed_public_key());
    }
    if (from._has_bit(3)) {
      set_signed_request(from.signed_request());
    }
    if (from._has_bit(4)) {
      set_data_type(from.data_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteRequest::CopyFrom(const DeleteRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteRequest::Swap(DeleteRequest* other) {
  if (other != this) {
    std::swap(chunkname_, other->chunkname_);
    std::swap(public_key_, other->public_key_);
    std::swap(signed_public_key_, other->signed_public_key_);
    std::swap(signed_request_, other->signed_request_);
    std::swap(data_type_, other->data_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool DeleteRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* DeleteRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* DeleteRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return DeleteRequest_reflection_;
}

// ===================================================================

const ::std::string DeleteResponse::_default_pmid_id_;
#ifndef _MSC_VER
const int DeleteResponse::kResultFieldNumber;
const int DeleteResponse::kPmidIdFieldNumber;
#endif  // !_MSC_VER

DeleteResponse::DeleteResponse()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    result_(0u),
    pmid_id_(const_cast< ::std::string*>(&_default_pmid_id_)) {
  SharedCtor();
}

void DeleteResponse::InitAsDefaultInstance() {}

DeleteResponse::DeleteResponse(const DeleteResponse& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    result_(0u),
    pmid_id_(const_cast< ::std::string*>(&_default_pmid_id_)) {
  SharedCtor();
  MergeFrom(from);
}

void DeleteResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  pmid_id_ = const_cast< ::std::string*>(&_default_pmid_id_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteResponse::~DeleteResponse() {
  SharedDtor();
}

void DeleteResponse::SharedDtor() {
  if (pmid_id_ != &_default_pmid_id_) {
    delete pmid_id_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DeleteResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteResponse_descriptor_;
}

const DeleteResponse& DeleteResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_5fservice_5fmessages_2eproto();  return *default_instance_;
}

DeleteResponse* DeleteResponse::default_instance_ = NULL;

DeleteResponse* DeleteResponse::New() const {
  return new DeleteResponse;
}

void DeleteResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    if (_has_bit(1)) {
      if (pmid_id_ != &_default_pmid_id_) {
        pmid_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_pmid_id;
        break;
      }
      
      // optional bytes pmid_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_pmid_id:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_pmid_id()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeleteResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DeleteResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->result(), output);
  }
  
  // optional bytes pmid_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(2, this->pmid_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeleteResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->result(), target);
  }
  
  // optional bytes pmid_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(2, this->pmid_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeleteResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
    // optional bytes pmid_id = 2;
    if (has_pmid_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->pmid_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DeleteResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteResponse::MergeFrom(const DeleteResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_result(from.result());
    }
    if (from._has_bit(1)) {
      set_pmid_id(from.pmid_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteResponse::CopyFrom(const DeleteResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteResponse::Swap(DeleteResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(pmid_id_, other->pmid_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool DeleteResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* DeleteResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* DeleteResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return DeleteResponse_reflection_;
}

// ===================================================================

const ::std::string GetRequest::_default_chunkname_;
#ifndef _MSC_VER
const int GetRequest::kChunknameFieldNumber;
#endif  // !_MSC_VER

GetRequest::GetRequest()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    chunkname_(const_cast< ::std::string*>(&_default_chunkname_)) {
  SharedCtor();
}

void GetRequest::InitAsDefaultInstance() {}

GetRequest::GetRequest(const GetRequest& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    chunkname_(const_cast< ::std::string*>(&_default_chunkname_)) {
  SharedCtor();
  MergeFrom(from);
}

void GetRequest::SharedCtor() {
  _cached_size_ = 0;
  chunkname_ = const_cast< ::std::string*>(&_default_chunkname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetRequest::~GetRequest() {
  SharedDtor();
}

void GetRequest::SharedDtor() {
  if (chunkname_ != &_default_chunkname_) {
    delete chunkname_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* GetRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetRequest_descriptor_;
}

const GetRequest& GetRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_5fservice_5fmessages_2eproto();  return *default_instance_;
}

GetRequest* GetRequest::default_instance_ = NULL;

GetRequest* GetRequest::New() const {
  return new GetRequest;
}

void GetRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (chunkname_ != &_default_chunkname_) {
        chunkname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required bytes chunkname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_chunkname()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    GetRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required bytes chunkname = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(1, this->chunkname(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes chunkname = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(1, this->chunkname(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes chunkname = 1;
    if (has_chunkname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->chunkname());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void GetRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetRequest::MergeFrom(const GetRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_chunkname(from.chunkname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRequest::CopyFrom(const GetRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRequest::Swap(GetRequest* other) {
  if (other != this) {
    std::swap(chunkname_, other->chunkname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool GetRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* GetRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* GetRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return GetRequest_reflection_;
}

// ===================================================================

const ::std::string GetResponse::_default_content_;
const ::std::string GetResponse::_default_pmid_id_;
#ifndef _MSC_VER
const int GetResponse::kResultFieldNumber;
const int GetResponse::kContentFieldNumber;
const int GetResponse::kPmidIdFieldNumber;
#endif  // !_MSC_VER

GetResponse::GetResponse()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    result_(0u),
    content_(const_cast< ::std::string*>(&_default_content_)),
    pmid_id_(const_cast< ::std::string*>(&_default_pmid_id_)) {
  SharedCtor();
}

void GetResponse::InitAsDefaultInstance() {}

GetResponse::GetResponse(const GetResponse& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    result_(0u),
    content_(const_cast< ::std::string*>(&_default_content_)),
    pmid_id_(const_cast< ::std::string*>(&_default_pmid_id_)) {
  SharedCtor();
  MergeFrom(from);
}

void GetResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  content_ = const_cast< ::std::string*>(&_default_content_);
  pmid_id_ = const_cast< ::std::string*>(&_default_pmid_id_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetResponse::~GetResponse() {
  SharedDtor();
}

void GetResponse::SharedDtor() {
  if (content_ != &_default_content_) {
    delete content_;
  }
  if (pmid_id_ != &_default_pmid_id_) {
    delete pmid_id_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* GetResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetResponse_descriptor_;
}

const GetResponse& GetResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_5fservice_5fmessages_2eproto();  return *default_instance_;
}

GetResponse* GetResponse::default_instance_ = NULL;

GetResponse* GetResponse::New() const {
  return new GetResponse;
}

void GetResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    if (_has_bit(1)) {
      if (content_ != &_default_content_) {
        content_->clear();
      }
    }
    if (_has_bit(2)) {
      if (pmid_id_ != &_default_pmid_id_) {
        pmid_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }
      
      // optional bytes content = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_content:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_content()));
        if (input->ExpectTag(26)) goto parse_pmid_id;
        break;
      }
      
      // optional bytes pmid_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_pmid_id:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_pmid_id()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    GetResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->result(), output);
  }
  
  // optional bytes content = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(2, this->content(), output);
  }
  
  // optional bytes pmid_id = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(3, this->pmid_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->result(), target);
  }
  
  // optional bytes content = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(2, this->content(), target);
  }
  
  // optional bytes pmid_id = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(3, this->pmid_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
    // optional bytes content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->content());
    }
    
    // optional bytes pmid_id = 3;
    if (has_pmid_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->pmid_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void GetResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetResponse::MergeFrom(const GetResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_result(from.result());
    }
    if (from._has_bit(1)) {
      set_content(from.content());
    }
    if (from._has_bit(2)) {
      set_pmid_id(from.pmid_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetResponse::CopyFrom(const GetResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetResponse::Swap(GetResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(content_, other->content_);
    std::swap(pmid_id_, other->pmid_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool GetResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* GetResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* GetResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return GetResponse_reflection_;
}

// ===================================================================

const ::std::string CheckChunkRequest::_default_chunkname_;
#ifndef _MSC_VER
const int CheckChunkRequest::kChunknameFieldNumber;
#endif  // !_MSC_VER

CheckChunkRequest::CheckChunkRequest()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    chunkname_(const_cast< ::std::string*>(&_default_chunkname_)) {
  SharedCtor();
}

void CheckChunkRequest::InitAsDefaultInstance() {}

CheckChunkRequest::CheckChunkRequest(const CheckChunkRequest& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    chunkname_(const_cast< ::std::string*>(&_default_chunkname_)) {
  SharedCtor();
  MergeFrom(from);
}

void CheckChunkRequest::SharedCtor() {
  _cached_size_ = 0;
  chunkname_ = const_cast< ::std::string*>(&_default_chunkname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CheckChunkRequest::~CheckChunkRequest() {
  SharedDtor();
}

void CheckChunkRequest::SharedDtor() {
  if (chunkname_ != &_default_chunkname_) {
    delete chunkname_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CheckChunkRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CheckChunkRequest_descriptor_;
}

const CheckChunkRequest& CheckChunkRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_5fservice_5fmessages_2eproto();  return *default_instance_;
}

CheckChunkRequest* CheckChunkRequest::default_instance_ = NULL;

CheckChunkRequest* CheckChunkRequest::New() const {
  return new CheckChunkRequest;
}

void CheckChunkRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (chunkname_ != &_default_chunkname_) {
        chunkname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CheckChunkRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required bytes chunkname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_chunkname()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CheckChunkRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CheckChunkRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required bytes chunkname = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(1, this->chunkname(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CheckChunkRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes chunkname = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(1, this->chunkname(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CheckChunkRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes chunkname = 1;
    if (has_chunkname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->chunkname());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CheckChunkRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CheckChunkRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CheckChunkRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CheckChunkRequest::MergeFrom(const CheckChunkRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_chunkname(from.chunkname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CheckChunkRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckChunkRequest::CopyFrom(const CheckChunkRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckChunkRequest::Swap(CheckChunkRequest* other) {
  if (other != this) {
    std::swap(chunkname_, other->chunkname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CheckChunkRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* CheckChunkRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CheckChunkRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CheckChunkRequest_reflection_;
}

// ===================================================================

const ::std::string CheckChunkResponse::_default_pmid_id_;
#ifndef _MSC_VER
const int CheckChunkResponse::kResultFieldNumber;
const int CheckChunkResponse::kPmidIdFieldNumber;
#endif  // !_MSC_VER

CheckChunkResponse::CheckChunkResponse()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    result_(0u),
    pmid_id_(const_cast< ::std::string*>(&_default_pmid_id_)) {
  SharedCtor();
}

void CheckChunkResponse::InitAsDefaultInstance() {}

CheckChunkResponse::CheckChunkResponse(const CheckChunkResponse& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    result_(0u),
    pmid_id_(const_cast< ::std::string*>(&_default_pmid_id_)) {
  SharedCtor();
  MergeFrom(from);
}

void CheckChunkResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  pmid_id_ = const_cast< ::std::string*>(&_default_pmid_id_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CheckChunkResponse::~CheckChunkResponse() {
  SharedDtor();
}

void CheckChunkResponse::SharedDtor() {
  if (pmid_id_ != &_default_pmid_id_) {
    delete pmid_id_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CheckChunkResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CheckChunkResponse_descriptor_;
}

const CheckChunkResponse& CheckChunkResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_5fservice_5fmessages_2eproto();  return *default_instance_;
}

CheckChunkResponse* CheckChunkResponse::default_instance_ = NULL;

CheckChunkResponse* CheckChunkResponse::New() const {
  return new CheckChunkResponse;
}

void CheckChunkResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    if (_has_bit(1)) {
      if (pmid_id_ != &_default_pmid_id_) {
        pmid_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CheckChunkResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_pmid_id;
        break;
      }
      
      // required bytes pmid_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_pmid_id:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_pmid_id()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CheckChunkResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CheckChunkResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->result(), output);
  }
  
  // required bytes pmid_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(2, this->pmid_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CheckChunkResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->result(), target);
  }
  
  // required bytes pmid_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(2, this->pmid_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CheckChunkResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
    // required bytes pmid_id = 2;
    if (has_pmid_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->pmid_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CheckChunkResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CheckChunkResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CheckChunkResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CheckChunkResponse::MergeFrom(const CheckChunkResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_result(from.result());
    }
    if (from._has_bit(1)) {
      set_pmid_id(from.pmid_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CheckChunkResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckChunkResponse::CopyFrom(const CheckChunkResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckChunkResponse::Swap(CheckChunkResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(pmid_id_, other->pmid_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CheckChunkResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* CheckChunkResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CheckChunkResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CheckChunkResponse_reflection_;
}

// ===================================================================

const ::std::string ValidityCheckRequest::_default_chunkname_;
const ::std::string ValidityCheckRequest::_default_random_data_;
#ifndef _MSC_VER
const int ValidityCheckRequest::kChunknameFieldNumber;
const int ValidityCheckRequest::kRandomDataFieldNumber;
#endif  // !_MSC_VER

ValidityCheckRequest::ValidityCheckRequest()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    chunkname_(const_cast< ::std::string*>(&_default_chunkname_)),
    random_data_(const_cast< ::std::string*>(&_default_random_data_)) {
  SharedCtor();
}

void ValidityCheckRequest::InitAsDefaultInstance() {}

ValidityCheckRequest::ValidityCheckRequest(const ValidityCheckRequest& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    chunkname_(const_cast< ::std::string*>(&_default_chunkname_)),
    random_data_(const_cast< ::std::string*>(&_default_random_data_)) {
  SharedCtor();
  MergeFrom(from);
}

void ValidityCheckRequest::SharedCtor() {
  _cached_size_ = 0;
  chunkname_ = const_cast< ::std::string*>(&_default_chunkname_);
  random_data_ = const_cast< ::std::string*>(&_default_random_data_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ValidityCheckRequest::~ValidityCheckRequest() {
  SharedDtor();
}

void ValidityCheckRequest::SharedDtor() {
  if (chunkname_ != &_default_chunkname_) {
    delete chunkname_;
  }
  if (random_data_ != &_default_random_data_) {
    delete random_data_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* ValidityCheckRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ValidityCheckRequest_descriptor_;
}

const ValidityCheckRequest& ValidityCheckRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_5fservice_5fmessages_2eproto();  return *default_instance_;
}

ValidityCheckRequest* ValidityCheckRequest::default_instance_ = NULL;

ValidityCheckRequest* ValidityCheckRequest::New() const {
  return new ValidityCheckRequest;
}

void ValidityCheckRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (chunkname_ != &_default_chunkname_) {
        chunkname_->clear();
      }
    }
    if (_has_bit(1)) {
      if (random_data_ != &_default_random_data_) {
        random_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ValidityCheckRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required bytes chunkname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_chunkname()));
        if (input->ExpectTag(18)) goto parse_random_data;
        break;
      }
      
      // required bytes random_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_random_data:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_random_data()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ValidityCheckRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    ValidityCheckRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required bytes chunkname = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(1, this->chunkname(), output);
  }
  
  // required bytes random_data = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(2, this->random_data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ValidityCheckRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes chunkname = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(1, this->chunkname(), target);
  }
  
  // required bytes random_data = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(2, this->random_data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ValidityCheckRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes chunkname = 1;
    if (has_chunkname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->chunkname());
    }
    
    // required bytes random_data = 2;
    if (has_random_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->random_data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void ValidityCheckRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ValidityCheckRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ValidityCheckRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ValidityCheckRequest::MergeFrom(const ValidityCheckRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_chunkname(from.chunkname());
    }
    if (from._has_bit(1)) {
      set_random_data(from.random_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ValidityCheckRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ValidityCheckRequest::CopyFrom(const ValidityCheckRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ValidityCheckRequest::Swap(ValidityCheckRequest* other) {
  if (other != this) {
    std::swap(chunkname_, other->chunkname_);
    std::swap(random_data_, other->random_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool ValidityCheckRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* ValidityCheckRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* ValidityCheckRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return ValidityCheckRequest_reflection_;
}

// ===================================================================

const ::std::string ValidityCheckResponse::_default_hash_content_;
const ::std::string ValidityCheckResponse::_default_pmid_id_;
#ifndef _MSC_VER
const int ValidityCheckResponse::kResultFieldNumber;
const int ValidityCheckResponse::kHashContentFieldNumber;
const int ValidityCheckResponse::kPmidIdFieldNumber;
#endif  // !_MSC_VER

ValidityCheckResponse::ValidityCheckResponse()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    result_(0u),
    hash_content_(const_cast< ::std::string*>(&_default_hash_content_)),
    pmid_id_(const_cast< ::std::string*>(&_default_pmid_id_)) {
  SharedCtor();
}

void ValidityCheckResponse::InitAsDefaultInstance() {}

ValidityCheckResponse::ValidityCheckResponse(const ValidityCheckResponse& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    result_(0u),
    hash_content_(const_cast< ::std::string*>(&_default_hash_content_)),
    pmid_id_(const_cast< ::std::string*>(&_default_pmid_id_)) {
  SharedCtor();
  MergeFrom(from);
}

void ValidityCheckResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  hash_content_ = const_cast< ::std::string*>(&_default_hash_content_);
  pmid_id_ = const_cast< ::std::string*>(&_default_pmid_id_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ValidityCheckResponse::~ValidityCheckResponse() {
  SharedDtor();
}

void ValidityCheckResponse::SharedDtor() {
  if (hash_content_ != &_default_hash_content_) {
    delete hash_content_;
  }
  if (pmid_id_ != &_default_pmid_id_) {
    delete pmid_id_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* ValidityCheckResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ValidityCheckResponse_descriptor_;
}

const ValidityCheckResponse& ValidityCheckResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_5fservice_5fmessages_2eproto();  return *default_instance_;
}

ValidityCheckResponse* ValidityCheckResponse::default_instance_ = NULL;

ValidityCheckResponse* ValidityCheckResponse::New() const {
  return new ValidityCheckResponse;
}

void ValidityCheckResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    if (_has_bit(1)) {
      if (hash_content_ != &_default_hash_content_) {
        hash_content_->clear();
      }
    }
    if (_has_bit(2)) {
      if (pmid_id_ != &_default_pmid_id_) {
        pmid_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ValidityCheckResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_hash_content;
        break;
      }
      
      // optional bytes hash_content = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_hash_content:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_hash_content()));
        if (input->ExpectTag(26)) goto parse_pmid_id;
        break;
      }
      
      // required bytes pmid_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_pmid_id:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_pmid_id()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ValidityCheckResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    ValidityCheckResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->result(), output);
  }
  
  // optional bytes hash_content = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(2, this->hash_content(), output);
  }
  
  // required bytes pmid_id = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(3, this->pmid_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ValidityCheckResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->result(), target);
  }
  
  // optional bytes hash_content = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(2, this->hash_content(), target);
  }
  
  // required bytes pmid_id = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(3, this->pmid_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ValidityCheckResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
    // optional bytes hash_content = 2;
    if (has_hash_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->hash_content());
    }
    
    // required bytes pmid_id = 3;
    if (has_pmid_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->pmid_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void ValidityCheckResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ValidityCheckResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ValidityCheckResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ValidityCheckResponse::MergeFrom(const ValidityCheckResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_result(from.result());
    }
    if (from._has_bit(1)) {
      set_hash_content(from.hash_content());
    }
    if (from._has_bit(2)) {
      set_pmid_id(from.pmid_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ValidityCheckResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ValidityCheckResponse::CopyFrom(const ValidityCheckResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ValidityCheckResponse::Swap(ValidityCheckResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(hash_content_, other->hash_content_);
    std::swap(pmid_id_, other->pmid_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool ValidityCheckResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* ValidityCheckResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* ValidityCheckResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return ValidityCheckResponse_reflection_;
}

// ===================================================================

const ::std::string UpdateRequest::_default_chunkname_;
const ::std::string UpdateRequest::_default_data_;
const ::std::string UpdateRequest::_default_public_key_;
const ::std::string UpdateRequest::_default_signed_public_key_;
const ::std::string UpdateRequest::_default_signed_request_;
#ifndef _MSC_VER
const int UpdateRequest::kChunknameFieldNumber;
const int UpdateRequest::kDataFieldNumber;
const int UpdateRequest::kPublicKeyFieldNumber;
const int UpdateRequest::kSignedPublicKeyFieldNumber;
const int UpdateRequest::kSignedRequestFieldNumber;
const int UpdateRequest::kDataTypeFieldNumber;
#endif  // !_MSC_VER

UpdateRequest::UpdateRequest()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    chunkname_(const_cast< ::std::string*>(&_default_chunkname_)),
    data_(const_cast< ::std::string*>(&_default_data_)),
    public_key_(const_cast< ::std::string*>(&_default_public_key_)),
    signed_public_key_(const_cast< ::std::string*>(&_default_signed_public_key_)),
    signed_request_(const_cast< ::std::string*>(&_default_signed_request_)),
    data_type_(0) {
  SharedCtor();
}

void UpdateRequest::InitAsDefaultInstance() {}

UpdateRequest::UpdateRequest(const UpdateRequest& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    chunkname_(const_cast< ::std::string*>(&_default_chunkname_)),
    data_(const_cast< ::std::string*>(&_default_data_)),
    public_key_(const_cast< ::std::string*>(&_default_public_key_)),
    signed_public_key_(const_cast< ::std::string*>(&_default_signed_public_key_)),
    signed_request_(const_cast< ::std::string*>(&_default_signed_request_)),
    data_type_(0) {
  SharedCtor();
  MergeFrom(from);
}

void UpdateRequest::SharedCtor() {
  _cached_size_ = 0;
  chunkname_ = const_cast< ::std::string*>(&_default_chunkname_);
  data_ = const_cast< ::std::string*>(&_default_data_);
  public_key_ = const_cast< ::std::string*>(&_default_public_key_);
  signed_public_key_ = const_cast< ::std::string*>(&_default_signed_public_key_);
  signed_request_ = const_cast< ::std::string*>(&_default_signed_request_);
  data_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateRequest::~UpdateRequest() {
  SharedDtor();
}

void UpdateRequest::SharedDtor() {
  if (chunkname_ != &_default_chunkname_) {
    delete chunkname_;
  }
  if (data_ != &_default_data_) {
    delete data_;
  }
  if (public_key_ != &_default_public_key_) {
    delete public_key_;
  }
  if (signed_public_key_ != &_default_signed_public_key_) {
    delete signed_public_key_;
  }
  if (signed_request_ != &_default_signed_request_) {
    delete signed_request_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* UpdateRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateRequest_descriptor_;
}

const UpdateRequest& UpdateRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_5fservice_5fmessages_2eproto();  return *default_instance_;
}

UpdateRequest* UpdateRequest::default_instance_ = NULL;

UpdateRequest* UpdateRequest::New() const {
  return new UpdateRequest;
}

void UpdateRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (chunkname_ != &_default_chunkname_) {
        chunkname_->clear();
      }
    }
    if (_has_bit(1)) {
      if (data_ != &_default_data_) {
        data_->clear();
      }
    }
    if (_has_bit(2)) {
      if (public_key_ != &_default_public_key_) {
        public_key_->clear();
      }
    }
    if (_has_bit(3)) {
      if (signed_public_key_ != &_default_signed_public_key_) {
        signed_public_key_->clear();
      }
    }
    if (_has_bit(4)) {
      if (signed_request_ != &_default_signed_request_) {
        signed_request_->clear();
      }
    }
    data_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required bytes chunkname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_chunkname()));
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }
      
      // required bytes data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_data:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_data()));
        if (input->ExpectTag(26)) goto parse_public_key;
        break;
      }
      
      // required bytes public_key = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_public_key:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_public_key()));
        if (input->ExpectTag(34)) goto parse_signed_public_key;
        break;
      }
      
      // required bytes signed_public_key = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_signed_public_key:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_signed_public_key()));
        if (input->ExpectTag(42)) goto parse_signed_request;
        break;
      }
      
      // required bytes signed_request = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_signed_request:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_signed_request()));
        if (input->ExpectTag(48)) goto parse_data_type;
        break;
      }
      
      // required int32 data_type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_data_type:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &data_type_));
        _set_bit(5);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    UpdateRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required bytes chunkname = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(1, this->chunkname(), output);
  }
  
  // required bytes data = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(2, this->data(), output);
  }
  
  // required bytes public_key = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(3, this->public_key(), output);
  }
  
  // required bytes signed_public_key = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(4, this->signed_public_key(), output);
  }
  
  // required bytes signed_request = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(5, this->signed_request(), output);
  }
  
  // required int32 data_type = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(6, this->data_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes chunkname = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(1, this->chunkname(), target);
  }
  
  // required bytes data = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(2, this->data(), target);
  }
  
  // required bytes public_key = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(3, this->public_key(), target);
  }
  
  // required bytes signed_public_key = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(4, this->signed_public_key(), target);
  }
  
  // required bytes signed_request = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(5, this->signed_request(), target);
  }
  
  // required int32 data_type = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(6, this->data_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes chunkname = 1;
    if (has_chunkname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->chunkname());
    }
    
    // required bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->data());
    }
    
    // required bytes public_key = 3;
    if (has_public_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->public_key());
    }
    
    // required bytes signed_public_key = 4;
    if (has_signed_public_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->signed_public_key());
    }
    
    // required bytes signed_request = 5;
    if (has_signed_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->signed_request());
    }
    
    // required int32 data_type = 6;
    if (has_data_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->data_type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void UpdateRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateRequest::MergeFrom(const UpdateRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_chunkname(from.chunkname());
    }
    if (from._has_bit(1)) {
      set_data(from.data());
    }
    if (from._has_bit(2)) {
      set_public_key(from.public_key());
    }
    if (from._has_bit(3)) {
      set_signed_public_key(from.signed_public_key());
    }
    if (from._has_bit(4)) {
      set_signed_request(from.signed_request());
    }
    if (from._has_bit(5)) {
      set_data_type(from.data_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateRequest::CopyFrom(const UpdateRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateRequest::Swap(UpdateRequest* other) {
  if (other != this) {
    std::swap(chunkname_, other->chunkname_);
    std::swap(data_, other->data_);
    std::swap(public_key_, other->public_key_);
    std::swap(signed_public_key_, other->signed_public_key_);
    std::swap(signed_request_, other->signed_request_);
    std::swap(data_type_, other->data_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool UpdateRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* UpdateRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* UpdateRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return UpdateRequest_reflection_;
}

// ===================================================================

const ::std::string UpdateResponse::_default_pmid_id_;
#ifndef _MSC_VER
const int UpdateResponse::kResultFieldNumber;
const int UpdateResponse::kPmidIdFieldNumber;
#endif  // !_MSC_VER

UpdateResponse::UpdateResponse()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    result_(0u),
    pmid_id_(const_cast< ::std::string*>(&_default_pmid_id_)) {
  SharedCtor();
}

void UpdateResponse::InitAsDefaultInstance() {}

UpdateResponse::UpdateResponse(const UpdateResponse& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    result_(0u),
    pmid_id_(const_cast< ::std::string*>(&_default_pmid_id_)) {
  SharedCtor();
  MergeFrom(from);
}

void UpdateResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  pmid_id_ = const_cast< ::std::string*>(&_default_pmid_id_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateResponse::~UpdateResponse() {
  SharedDtor();
}

void UpdateResponse::SharedDtor() {
  if (pmid_id_ != &_default_pmid_id_) {
    delete pmid_id_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* UpdateResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateResponse_descriptor_;
}

const UpdateResponse& UpdateResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_5fservice_5fmessages_2eproto();  return *default_instance_;
}

UpdateResponse* UpdateResponse::default_instance_ = NULL;

UpdateResponse* UpdateResponse::New() const {
  return new UpdateResponse;
}

void UpdateResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    if (_has_bit(1)) {
      if (pmid_id_ != &_default_pmid_id_) {
        pmid_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_pmid_id;
        break;
      }
      
      // optional bytes pmid_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_pmid_id:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_pmid_id()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    UpdateResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->result(), output);
  }
  
  // optional bytes pmid_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(2, this->pmid_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->result(), target);
  }
  
  // optional bytes pmid_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(2, this->pmid_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
    // optional bytes pmid_id = 2;
    if (has_pmid_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->pmid_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void UpdateResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateResponse::MergeFrom(const UpdateResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_result(from.result());
    }
    if (from._has_bit(1)) {
      set_pmid_id(from.pmid_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateResponse::CopyFrom(const UpdateResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateResponse::Swap(UpdateResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(pmid_id_, other->pmid_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool UpdateResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* UpdateResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* UpdateResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return UpdateResponse_reflection_;
}

// ===================================================================

const ::std::string SwapChunkRequest::_default_chunkname1_;
const ::std::string SwapChunkRequest::_default_chunkcontent1_;
const ::std::string SwapChunkRequest::_default_chunkname2_;
#ifndef _MSC_VER
const int SwapChunkRequest::kRequestTypeFieldNumber;
const int SwapChunkRequest::kChunkname1FieldNumber;
const int SwapChunkRequest::kChunkcontent1FieldNumber;
const int SwapChunkRequest::kSize1FieldNumber;
const int SwapChunkRequest::kChunkname2FieldNumber;
#endif  // !_MSC_VER

SwapChunkRequest::SwapChunkRequest()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    request_type_(0),
    chunkname1_(const_cast< ::std::string*>(&_default_chunkname1_)),
    chunkcontent1_(const_cast< ::std::string*>(&_default_chunkcontent1_)),
    size1_(0),
    chunkname2_(const_cast< ::std::string*>(&_default_chunkname2_)) {
  SharedCtor();
}

void SwapChunkRequest::InitAsDefaultInstance() {}

SwapChunkRequest::SwapChunkRequest(const SwapChunkRequest& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    request_type_(0),
    chunkname1_(const_cast< ::std::string*>(&_default_chunkname1_)),
    chunkcontent1_(const_cast< ::std::string*>(&_default_chunkcontent1_)),
    size1_(0),
    chunkname2_(const_cast< ::std::string*>(&_default_chunkname2_)) {
  SharedCtor();
  MergeFrom(from);
}

void SwapChunkRequest::SharedCtor() {
  _cached_size_ = 0;
  request_type_ = 0;
  chunkname1_ = const_cast< ::std::string*>(&_default_chunkname1_);
  chunkcontent1_ = const_cast< ::std::string*>(&_default_chunkcontent1_);
  size1_ = 0;
  chunkname2_ = const_cast< ::std::string*>(&_default_chunkname2_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SwapChunkRequest::~SwapChunkRequest() {
  SharedDtor();
}

void SwapChunkRequest::SharedDtor() {
  if (chunkname1_ != &_default_chunkname1_) {
    delete chunkname1_;
  }
  if (chunkcontent1_ != &_default_chunkcontent1_) {
    delete chunkcontent1_;
  }
  if (chunkname2_ != &_default_chunkname2_) {
    delete chunkname2_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* SwapChunkRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SwapChunkRequest_descriptor_;
}

const SwapChunkRequest& SwapChunkRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_5fservice_5fmessages_2eproto();  return *default_instance_;
}

SwapChunkRequest* SwapChunkRequest::default_instance_ = NULL;

SwapChunkRequest* SwapChunkRequest::New() const {
  return new SwapChunkRequest;
}

void SwapChunkRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    request_type_ = 0;
    if (_has_bit(1)) {
      if (chunkname1_ != &_default_chunkname1_) {
        chunkname1_->clear();
      }
    }
    if (_has_bit(2)) {
      if (chunkcontent1_ != &_default_chunkcontent1_) {
        chunkcontent1_->clear();
      }
    }
    size1_ = 0;
    if (_has_bit(4)) {
      if (chunkname2_ != &_default_chunkname2_) {
        chunkname2_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SwapChunkRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required int32 request_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &request_type_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_chunkname1;
        break;
      }
      
      // required bytes chunkname1 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_chunkname1:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_chunkname1()));
        if (input->ExpectTag(26)) goto parse_chunkcontent1;
        break;
      }
      
      // optional bytes chunkcontent1 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_chunkcontent1:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_chunkcontent1()));
        if (input->ExpectTag(32)) goto parse_size1;
        break;
      }
      
      // optional int32 size1 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_size1:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &size1_));
        _set_bit(3);
        if (input->ExpectTag(42)) goto parse_chunkname2;
        break;
      }
      
      // optional bytes chunkname2 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_chunkname2:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_chunkname2()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SwapChunkRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    SwapChunkRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 request_type = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(1, this->request_type(), output);
  }
  
  // required bytes chunkname1 = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(2, this->chunkname1(), output);
  }
  
  // optional bytes chunkcontent1 = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(3, this->chunkcontent1(), output);
  }
  
  // optional int32 size1 = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(4, this->size1(), output);
  }
  
  // optional bytes chunkname2 = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(5, this->chunkname2(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SwapChunkRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 request_type = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(1, this->request_type(), target);
  }
  
  // required bytes chunkname1 = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(2, this->chunkname1(), target);
  }
  
  // optional bytes chunkcontent1 = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(3, this->chunkcontent1(), target);
  }
  
  // optional int32 size1 = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(4, this->size1(), target);
  }
  
  // optional bytes chunkname2 = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(5, this->chunkname2(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SwapChunkRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 request_type = 1;
    if (has_request_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->request_type());
    }
    
    // required bytes chunkname1 = 2;
    if (has_chunkname1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->chunkname1());
    }
    
    // optional bytes chunkcontent1 = 3;
    if (has_chunkcontent1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->chunkcontent1());
    }
    
    // optional int32 size1 = 4;
    if (has_size1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->size1());
    }
    
    // optional bytes chunkname2 = 5;
    if (has_chunkname2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->chunkname2());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void SwapChunkRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SwapChunkRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SwapChunkRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SwapChunkRequest::MergeFrom(const SwapChunkRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_request_type(from.request_type());
    }
    if (from._has_bit(1)) {
      set_chunkname1(from.chunkname1());
    }
    if (from._has_bit(2)) {
      set_chunkcontent1(from.chunkcontent1());
    }
    if (from._has_bit(3)) {
      set_size1(from.size1());
    }
    if (from._has_bit(4)) {
      set_chunkname2(from.chunkname2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SwapChunkRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SwapChunkRequest::CopyFrom(const SwapChunkRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SwapChunkRequest::Swap(SwapChunkRequest* other) {
  if (other != this) {
    std::swap(request_type_, other->request_type_);
    std::swap(chunkname1_, other->chunkname1_);
    std::swap(chunkcontent1_, other->chunkcontent1_);
    std::swap(size1_, other->size1_);
    std::swap(chunkname2_, other->chunkname2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool SwapChunkRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* SwapChunkRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* SwapChunkRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return SwapChunkRequest_reflection_;
}

// ===================================================================

const ::std::string SwapChunkResponse::_default_chunkname1_;
const ::std::string SwapChunkResponse::_default_chunkcontent1_;
const ::std::string SwapChunkResponse::_default_chunkname2_;
const ::std::string SwapChunkResponse::_default_chunkcontent2_;
const ::std::string SwapChunkResponse::_default_pmid_id_;
#ifndef _MSC_VER
const int SwapChunkResponse::kRequestTypeFieldNumber;
const int SwapChunkResponse::kResultFieldNumber;
const int SwapChunkResponse::kChunkname1FieldNumber;
const int SwapChunkResponse::kChunkcontent1FieldNumber;
const int SwapChunkResponse::kSize1FieldNumber;
const int SwapChunkResponse::kChunkname2FieldNumber;
const int SwapChunkResponse::kChunkcontent2FieldNumber;
const int SwapChunkResponse::kSize2FieldNumber;
const int SwapChunkResponse::kPmidIdFieldNumber;
#endif  // !_MSC_VER

SwapChunkResponse::SwapChunkResponse()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    request_type_(0),
    result_(0u),
    chunkname1_(const_cast< ::std::string*>(&_default_chunkname1_)),
    chunkcontent1_(const_cast< ::std::string*>(&_default_chunkcontent1_)),
    size1_(0),
    chunkname2_(const_cast< ::std::string*>(&_default_chunkname2_)),
    chunkcontent2_(const_cast< ::std::string*>(&_default_chunkcontent2_)),
    size2_(0),
    pmid_id_(const_cast< ::std::string*>(&_default_pmid_id_)) {
  SharedCtor();
}

void SwapChunkResponse::InitAsDefaultInstance() {}

SwapChunkResponse::SwapChunkResponse(const SwapChunkResponse& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    request_type_(0),
    result_(0u),
    chunkname1_(const_cast< ::std::string*>(&_default_chunkname1_)),
    chunkcontent1_(const_cast< ::std::string*>(&_default_chunkcontent1_)),
    size1_(0),
    chunkname2_(const_cast< ::std::string*>(&_default_chunkname2_)),
    chunkcontent2_(const_cast< ::std::string*>(&_default_chunkcontent2_)),
    size2_(0),
    pmid_id_(const_cast< ::std::string*>(&_default_pmid_id_)) {
  SharedCtor();
  MergeFrom(from);
}

void SwapChunkResponse::SharedCtor() {
  _cached_size_ = 0;
  request_type_ = 0;
  result_ = 0u;
  chunkname1_ = const_cast< ::std::string*>(&_default_chunkname1_);
  chunkcontent1_ = const_cast< ::std::string*>(&_default_chunkcontent1_);
  size1_ = 0;
  chunkname2_ = const_cast< ::std::string*>(&_default_chunkname2_);
  chunkcontent2_ = const_cast< ::std::string*>(&_default_chunkcontent2_);
  size2_ = 0;
  pmid_id_ = const_cast< ::std::string*>(&_default_pmid_id_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SwapChunkResponse::~SwapChunkResponse() {
  SharedDtor();
}

void SwapChunkResponse::SharedDtor() {
  if (chunkname1_ != &_default_chunkname1_) {
    delete chunkname1_;
  }
  if (chunkcontent1_ != &_default_chunkcontent1_) {
    delete chunkcontent1_;
  }
  if (chunkname2_ != &_default_chunkname2_) {
    delete chunkname2_;
  }
  if (chunkcontent2_ != &_default_chunkcontent2_) {
    delete chunkcontent2_;
  }
  if (pmid_id_ != &_default_pmid_id_) {
    delete pmid_id_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* SwapChunkResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SwapChunkResponse_descriptor_;
}

const SwapChunkResponse& SwapChunkResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_5fservice_5fmessages_2eproto();  return *default_instance_;
}

SwapChunkResponse* SwapChunkResponse::default_instance_ = NULL;

SwapChunkResponse* SwapChunkResponse::New() const {
  return new SwapChunkResponse;
}

void SwapChunkResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    request_type_ = 0;
    result_ = 0u;
    if (_has_bit(2)) {
      if (chunkname1_ != &_default_chunkname1_) {
        chunkname1_->clear();
      }
    }
    if (_has_bit(3)) {
      if (chunkcontent1_ != &_default_chunkcontent1_) {
        chunkcontent1_->clear();
      }
    }
    size1_ = 0;
    if (_has_bit(5)) {
      if (chunkname2_ != &_default_chunkname2_) {
        chunkname2_->clear();
      }
    }
    if (_has_bit(6)) {
      if (chunkcontent2_ != &_default_chunkcontent2_) {
        chunkcontent2_->clear();
      }
    }
    size2_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (_has_bit(8)) {
      if (pmid_id_ != &_default_pmid_id_) {
        pmid_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SwapChunkResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required int32 request_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &request_type_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }
      
      // required uint32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_result:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_chunkname1;
        break;
      }
      
      // optional bytes chunkname1 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_chunkname1:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_chunkname1()));
        if (input->ExpectTag(34)) goto parse_chunkcontent1;
        break;
      }
      
      // optional bytes chunkcontent1 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_chunkcontent1:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_chunkcontent1()));
        if (input->ExpectTag(40)) goto parse_size1;
        break;
      }
      
      // optional int32 size1 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_size1:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &size1_));
        _set_bit(4);
        if (input->ExpectTag(50)) goto parse_chunkname2;
        break;
      }
      
      // optional bytes chunkname2 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_chunkname2:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_chunkname2()));
        if (input->ExpectTag(58)) goto parse_chunkcontent2;
        break;
      }
      
      // optional bytes chunkcontent2 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_chunkcontent2:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_chunkcontent2()));
        if (input->ExpectTag(64)) goto parse_size2;
        break;
      }
      
      // optional int32 size2 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_size2:
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &size2_));
        _set_bit(7);
        if (input->ExpectTag(74)) goto parse_pmid_id;
        break;
      }
      
      // required bytes pmid_id = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_pmid_id:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_pmid_id()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SwapChunkResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    SwapChunkResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 request_type = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(1, this->request_type(), output);
  }
  
  // required uint32 result = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(2, this->result(), output);
  }
  
  // optional bytes chunkname1 = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(3, this->chunkname1(), output);
  }
  
  // optional bytes chunkcontent1 = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(4, this->chunkcontent1(), output);
  }
  
  // optional int32 size1 = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(5, this->size1(), output);
  }
  
  // optional bytes chunkname2 = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(6, this->chunkname2(), output);
  }
  
  // optional bytes chunkcontent2 = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(7, this->chunkcontent2(), output);
  }
  
  // optional int32 size2 = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(8, this->size2(), output);
  }
  
  // required bytes pmid_id = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(9, this->pmid_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SwapChunkResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 request_type = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(1, this->request_type(), target);
  }
  
  // required uint32 result = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(2, this->result(), target);
  }
  
  // optional bytes chunkname1 = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(3, this->chunkname1(), target);
  }
  
  // optional bytes chunkcontent1 = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(4, this->chunkcontent1(), target);
  }
  
  // optional int32 size1 = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(5, this->size1(), target);
  }
  
  // optional bytes chunkname2 = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(6, this->chunkname2(), target);
  }
  
  // optional bytes chunkcontent2 = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(7, this->chunkcontent2(), target);
  }
  
  // optional int32 size2 = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(8, this->size2(), target);
  }
  
  // required bytes pmid_id = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(9, this->pmid_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SwapChunkResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 request_type = 1;
    if (has_request_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->request_type());
    }
    
    // required uint32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
    // optional bytes chunkname1 = 3;
    if (has_chunkname1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->chunkname1());
    }
    
    // optional bytes chunkcontent1 = 4;
    if (has_chunkcontent1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->chunkcontent1());
    }
    
    // optional int32 size1 = 5;
    if (has_size1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->size1());
    }
    
    // optional bytes chunkname2 = 6;
    if (has_chunkname2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->chunkname2());
    }
    
    // optional bytes chunkcontent2 = 7;
    if (has_chunkcontent2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->chunkcontent2());
    }
    
    // optional int32 size2 = 8;
    if (has_size2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->size2());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required bytes pmid_id = 9;
    if (has_pmid_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->pmid_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void SwapChunkResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SwapChunkResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SwapChunkResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SwapChunkResponse::MergeFrom(const SwapChunkResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_request_type(from.request_type());
    }
    if (from._has_bit(1)) {
      set_result(from.result());
    }
    if (from._has_bit(2)) {
      set_chunkname1(from.chunkname1());
    }
    if (from._has_bit(3)) {
      set_chunkcontent1(from.chunkcontent1());
    }
    if (from._has_bit(4)) {
      set_size1(from.size1());
    }
    if (from._has_bit(5)) {
      set_chunkname2(from.chunkname2());
    }
    if (from._has_bit(6)) {
      set_chunkcontent2(from.chunkcontent2());
    }
    if (from._has_bit(7)) {
      set_size2(from.size2());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_pmid_id(from.pmid_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SwapChunkResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SwapChunkResponse::CopyFrom(const SwapChunkResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SwapChunkResponse::Swap(SwapChunkResponse* other) {
  if (other != this) {
    std::swap(request_type_, other->request_type_);
    std::swap(result_, other->result_);
    std::swap(chunkname1_, other->chunkname1_);
    std::swap(chunkcontent1_, other->chunkcontent1_);
    std::swap(size1_, other->size1_);
    std::swap(chunkname2_, other->chunkname2_);
    std::swap(chunkcontent2_, other->chunkcontent2_);
    std::swap(size2_, other->size2_);
    std::swap(pmid_id_, other->pmid_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool SwapChunkResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000103) != 0x00000103) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* SwapChunkResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* SwapChunkResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return SwapChunkResponse_reflection_;
}

// ===================================================================

const ::std::string VaultCommunication::_default_chunkstore_;
const ::std::string VaultCommunication::_default_ip_;
#ifndef _MSC_VER
const int VaultCommunication::kChunkstoreFieldNumber;
const int VaultCommunication::kOfferedSpaceFieldNumber;
const int VaultCommunication::kFreeSpaceFieldNumber;
const int VaultCommunication::kIpFieldNumber;
const int VaultCommunication::kPortFieldNumber;
const int VaultCommunication::kTimestampFieldNumber;
#endif  // !_MSC_VER

VaultCommunication::VaultCommunication()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    chunkstore_(const_cast< ::std::string*>(&_default_chunkstore_)),
    offered_space_(GOOGLE_ULONGLONG(0)),
    free_space_(GOOGLE_ULONGLONG(0)),
    ip_(const_cast< ::std::string*>(&_default_ip_)),
    port_(0u),
    timestamp_(0u) {
  SharedCtor();
}

void VaultCommunication::InitAsDefaultInstance() {}

VaultCommunication::VaultCommunication(const VaultCommunication& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    chunkstore_(const_cast< ::std::string*>(&_default_chunkstore_)),
    offered_space_(GOOGLE_ULONGLONG(0)),
    free_space_(GOOGLE_ULONGLONG(0)),
    ip_(const_cast< ::std::string*>(&_default_ip_)),
    port_(0u),
    timestamp_(0u) {
  SharedCtor();
  MergeFrom(from);
}

void VaultCommunication::SharedCtor() {
  _cached_size_ = 0;
  chunkstore_ = const_cast< ::std::string*>(&_default_chunkstore_);
  offered_space_ = GOOGLE_ULONGLONG(0);
  free_space_ = GOOGLE_ULONGLONG(0);
  ip_ = const_cast< ::std::string*>(&_default_ip_);
  port_ = 0u;
  timestamp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VaultCommunication::~VaultCommunication() {
  SharedDtor();
}

void VaultCommunication::SharedDtor() {
  if (chunkstore_ != &_default_chunkstore_) {
    delete chunkstore_;
  }
  if (ip_ != &_default_ip_) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* VaultCommunication::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VaultCommunication_descriptor_;
}

const VaultCommunication& VaultCommunication::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_5fservice_5fmessages_2eproto();  return *default_instance_;
}

VaultCommunication* VaultCommunication::default_instance_ = NULL;

VaultCommunication* VaultCommunication::New() const {
  return new VaultCommunication;
}

void VaultCommunication::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (chunkstore_ != &_default_chunkstore_) {
        chunkstore_->clear();
      }
    }
    offered_space_ = GOOGLE_ULONGLONG(0);
    free_space_ = GOOGLE_ULONGLONG(0);
    if (_has_bit(3)) {
      if (ip_ != &_default_ip_) {
        ip_->clear();
      }
    }
    port_ = 0u;
    timestamp_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VaultCommunication::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // optional bytes chunkstore = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_chunkstore()));
        if (input->ExpectTag(16)) goto parse_offered_space;
        break;
      }
      
      // optional uint64 offered_space = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_offered_space:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt64(
              input, &offered_space_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_free_space;
        break;
      }
      
      // optional uint64 free_space = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_free_space:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt64(
              input, &free_space_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_ip;
        break;
      }
      
      // optional bytes ip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ip:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_ip()));
        if (input->ExpectTag(40)) goto parse_port;
        break;
      }
      
      // optional uint32 port = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_port:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &port_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_timestamp;
        break;
      }
      
      // required uint32 timestamp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_timestamp:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &timestamp_));
        _set_bit(5);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VaultCommunication::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    VaultCommunication::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional bytes chunkstore = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(1, this->chunkstore(), output);
  }
  
  // optional uint64 offered_space = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteUInt64(2, this->offered_space(), output);
  }
  
  // optional uint64 free_space = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteUInt64(3, this->free_space(), output);
  }
  
  // optional bytes ip = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(4, this->ip(), output);
  }
  
  // optional uint32 port = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->port(), output);
  }
  
  // required uint32 timestamp = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(6, this->timestamp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VaultCommunication::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes chunkstore = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(1, this->chunkstore(), target);
  }
  
  // optional uint64 offered_space = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt64ToArray(2, this->offered_space(), target);
  }
  
  // optional uint64 free_space = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt64ToArray(3, this->free_space(), target);
  }
  
  // optional bytes ip = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(4, this->ip(), target);
  }
  
  // optional uint32 port = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->port(), target);
  }
  
  // required uint32 timestamp = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(6, this->timestamp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VaultCommunication::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes chunkstore = 1;
    if (has_chunkstore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->chunkstore());
    }
    
    // optional uint64 offered_space = 2;
    if (has_offered_space()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt64Size(
          this->offered_space());
    }
    
    // optional uint64 free_space = 3;
    if (has_free_space()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt64Size(
          this->free_space());
    }
    
    // optional bytes ip = 4;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->ip());
    }
    
    // optional uint32 port = 5;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->port());
    }
    
    // required uint32 timestamp = 6;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->timestamp());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void VaultCommunication::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VaultCommunication* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VaultCommunication*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VaultCommunication::MergeFrom(const VaultCommunication& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_chunkstore(from.chunkstore());
    }
    if (from._has_bit(1)) {
      set_offered_space(from.offered_space());
    }
    if (from._has_bit(2)) {
      set_free_space(from.free_space());
    }
    if (from._has_bit(3)) {
      set_ip(from.ip());
    }
    if (from._has_bit(4)) {
      set_port(from.port());
    }
    if (from._has_bit(5)) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VaultCommunication::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VaultCommunication::CopyFrom(const VaultCommunication& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VaultCommunication::Swap(VaultCommunication* other) {
  if (other != this) {
    std::swap(chunkstore_, other->chunkstore_);
    std::swap(offered_space_, other->offered_space_);
    std::swap(free_space_, other->free_space_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool VaultCommunication::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000020) != 0x00000020) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* VaultCommunication::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* VaultCommunication::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return VaultCommunication_reflection_;
}

// ===================================================================

const ::std::string VaultStatusRequest::_default_encrypted_request_;
#ifndef _MSC_VER
const int VaultStatusRequest::kEncryptedRequestFieldNumber;
#endif  // !_MSC_VER

VaultStatusRequest::VaultStatusRequest()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    encrypted_request_(const_cast< ::std::string*>(&_default_encrypted_request_)) {
  SharedCtor();
}

void VaultStatusRequest::InitAsDefaultInstance() {}

VaultStatusRequest::VaultStatusRequest(const VaultStatusRequest& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    encrypted_request_(const_cast< ::std::string*>(&_default_encrypted_request_)) {
  SharedCtor();
  MergeFrom(from);
}

void VaultStatusRequest::SharedCtor() {
  _cached_size_ = 0;
  encrypted_request_ = const_cast< ::std::string*>(&_default_encrypted_request_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VaultStatusRequest::~VaultStatusRequest() {
  SharedDtor();
}

void VaultStatusRequest::SharedDtor() {
  if (encrypted_request_ != &_default_encrypted_request_) {
    delete encrypted_request_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* VaultStatusRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VaultStatusRequest_descriptor_;
}

const VaultStatusRequest& VaultStatusRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_5fservice_5fmessages_2eproto();  return *default_instance_;
}

VaultStatusRequest* VaultStatusRequest::default_instance_ = NULL;

VaultStatusRequest* VaultStatusRequest::New() const {
  return new VaultStatusRequest;
}

void VaultStatusRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (encrypted_request_ != &_default_encrypted_request_) {
        encrypted_request_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VaultStatusRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required bytes encrypted_request = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_encrypted_request()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VaultStatusRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    VaultStatusRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required bytes encrypted_request = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(1, this->encrypted_request(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VaultStatusRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes encrypted_request = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(1, this->encrypted_request(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VaultStatusRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes encrypted_request = 1;
    if (has_encrypted_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->encrypted_request());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void VaultStatusRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VaultStatusRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VaultStatusRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VaultStatusRequest::MergeFrom(const VaultStatusRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_encrypted_request(from.encrypted_request());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VaultStatusRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VaultStatusRequest::CopyFrom(const VaultStatusRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VaultStatusRequest::Swap(VaultStatusRequest* other) {
  if (other != this) {
    std::swap(encrypted_request_, other->encrypted_request_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool VaultStatusRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* VaultStatusRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* VaultStatusRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return VaultStatusRequest_reflection_;
}

// ===================================================================

const ::std::string VaultStatusResponse::_default_encrypted_response_;
#ifndef _MSC_VER
const int VaultStatusResponse::kResultFieldNumber;
const int VaultStatusResponse::kEncryptedResponseFieldNumber;
#endif  // !_MSC_VER

VaultStatusResponse::VaultStatusResponse()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    result_(0u),
    encrypted_response_(const_cast< ::std::string*>(&_default_encrypted_response_)) {
  SharedCtor();
}

void VaultStatusResponse::InitAsDefaultInstance() {}

VaultStatusResponse::VaultStatusResponse(const VaultStatusResponse& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    result_(0u),
    encrypted_response_(const_cast< ::std::string*>(&_default_encrypted_response_)) {
  SharedCtor();
  MergeFrom(from);
}

void VaultStatusResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  encrypted_response_ = const_cast< ::std::string*>(&_default_encrypted_response_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VaultStatusResponse::~VaultStatusResponse() {
  SharedDtor();
}

void VaultStatusResponse::SharedDtor() {
  if (encrypted_response_ != &_default_encrypted_response_) {
    delete encrypted_response_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* VaultStatusResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VaultStatusResponse_descriptor_;
}

const VaultStatusResponse& VaultStatusResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_5fservice_5fmessages_2eproto();  return *default_instance_;
}

VaultStatusResponse* VaultStatusResponse::default_instance_ = NULL;

VaultStatusResponse* VaultStatusResponse::New() const {
  return new VaultStatusResponse;
}

void VaultStatusResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    if (_has_bit(1)) {
      if (encrypted_response_ != &_default_encrypted_response_) {
        encrypted_response_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VaultStatusResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_encrypted_response;
        break;
      }
      
      // optional bytes encrypted_response = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_encrypted_response:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_encrypted_response()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VaultStatusResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    VaultStatusResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->result(), output);
  }
  
  // optional bytes encrypted_response = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(2, this->encrypted_response(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VaultStatusResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->result(), target);
  }
  
  // optional bytes encrypted_response = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(2, this->encrypted_response(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VaultStatusResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
    // optional bytes encrypted_response = 2;
    if (has_encrypted_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->encrypted_response());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void VaultStatusResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VaultStatusResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VaultStatusResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VaultStatusResponse::MergeFrom(const VaultStatusResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_result(from.result());
    }
    if (from._has_bit(1)) {
      set_encrypted_response(from.encrypted_response());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VaultStatusResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VaultStatusResponse::CopyFrom(const VaultStatusResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VaultStatusResponse::Swap(VaultStatusResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(encrypted_response_, other->encrypted_response_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool VaultStatusResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* VaultStatusResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* VaultStatusResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return VaultStatusResponse_reflection_;
}

// ===================================================================

const ::std::string OwnVaultRequest::_default_public_key_;
const ::std::string OwnVaultRequest::_default_private_key_;
const ::std::string OwnVaultRequest::_default_signed_public_key_;
const ::std::string OwnVaultRequest::_default_chunkstore_dir_;
#ifndef _MSC_VER
const int OwnVaultRequest::kPublicKeyFieldNumber;
const int OwnVaultRequest::kPrivateKeyFieldNumber;
const int OwnVaultRequest::kSignedPublicKeyFieldNumber;
const int OwnVaultRequest::kChunkstoreDirFieldNumber;
const int OwnVaultRequest::kPortFieldNumber;
const int OwnVaultRequest::kSpaceFieldNumber;
#endif  // !_MSC_VER

OwnVaultRequest::OwnVaultRequest()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    public_key_(const_cast< ::std::string*>(&_default_public_key_)),
    private_key_(const_cast< ::std::string*>(&_default_private_key_)),
    signed_public_key_(const_cast< ::std::string*>(&_default_signed_public_key_)),
    chunkstore_dir_(const_cast< ::std::string*>(&_default_chunkstore_dir_)),
    port_(0u),
    space_(GOOGLE_ULONGLONG(0)) {
  SharedCtor();
}

void OwnVaultRequest::InitAsDefaultInstance() {}

OwnVaultRequest::OwnVaultRequest(const OwnVaultRequest& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    public_key_(const_cast< ::std::string*>(&_default_public_key_)),
    private_key_(const_cast< ::std::string*>(&_default_private_key_)),
    signed_public_key_(const_cast< ::std::string*>(&_default_signed_public_key_)),
    chunkstore_dir_(const_cast< ::std::string*>(&_default_chunkstore_dir_)),
    port_(0u),
    space_(GOOGLE_ULONGLONG(0)) {
  SharedCtor();
  MergeFrom(from);
}

void OwnVaultRequest::SharedCtor() {
  _cached_size_ = 0;
  public_key_ = const_cast< ::std::string*>(&_default_public_key_);
  private_key_ = const_cast< ::std::string*>(&_default_private_key_);
  signed_public_key_ = const_cast< ::std::string*>(&_default_signed_public_key_);
  chunkstore_dir_ = const_cast< ::std::string*>(&_default_chunkstore_dir_);
  port_ = 0u;
  space_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OwnVaultRequest::~OwnVaultRequest() {
  SharedDtor();
}

void OwnVaultRequest::SharedDtor() {
  if (public_key_ != &_default_public_key_) {
    delete public_key_;
  }
  if (private_key_ != &_default_private_key_) {
    delete private_key_;
  }
  if (signed_public_key_ != &_default_signed_public_key_) {
    delete signed_public_key_;
  }
  if (chunkstore_dir_ != &_default_chunkstore_dir_) {
    delete chunkstore_dir_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* OwnVaultRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OwnVaultRequest_descriptor_;
}

const OwnVaultRequest& OwnVaultRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_5fservice_5fmessages_2eproto();  return *default_instance_;
}

OwnVaultRequest* OwnVaultRequest::default_instance_ = NULL;

OwnVaultRequest* OwnVaultRequest::New() const {
  return new OwnVaultRequest;
}

void OwnVaultRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (public_key_ != &_default_public_key_) {
        public_key_->clear();
      }
    }
    if (_has_bit(1)) {
      if (private_key_ != &_default_private_key_) {
        private_key_->clear();
      }
    }
    if (_has_bit(2)) {
      if (signed_public_key_ != &_default_signed_public_key_) {
        signed_public_key_->clear();
      }
    }
    if (_has_bit(3)) {
      if (chunkstore_dir_ != &_default_chunkstore_dir_) {
        chunkstore_dir_->clear();
      }
    }
    port_ = 0u;
    space_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OwnVaultRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required bytes public_key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_public_key()));
        if (input->ExpectTag(18)) goto parse_private_key;
        break;
      }
      
      // required bytes private_key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_private_key:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_private_key()));
        if (input->ExpectTag(26)) goto parse_signed_public_key;
        break;
      }
      
      // required bytes signed_public_key = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_signed_public_key:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_signed_public_key()));
        if (input->ExpectTag(34)) goto parse_chunkstore_dir;
        break;
      }
      
      // required bytes chunkstore_dir = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_chunkstore_dir:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_chunkstore_dir()));
        if (input->ExpectTag(40)) goto parse_port;
        break;
      }
      
      // required uint32 port = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_port:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &port_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_space;
        break;
      }
      
      // required uint64 space = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_space:
        DO_(::google::protobuf::internal::WireFormat::ReadUInt64(
              input, &space_));
        _set_bit(5);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OwnVaultRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    OwnVaultRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required bytes public_key = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(1, this->public_key(), output);
  }
  
  // required bytes private_key = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(2, this->private_key(), output);
  }
  
  // required bytes signed_public_key = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(3, this->signed_public_key(), output);
  }
  
  // required bytes chunkstore_dir = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(4, this->chunkstore_dir(), output);
  }
  
  // required uint32 port = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(5, this->port(), output);
  }
  
  // required uint64 space = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteUInt64(6, this->space(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OwnVaultRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes public_key = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(1, this->public_key(), target);
  }
  
  // required bytes private_key = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(2, this->private_key(), target);
  }
  
  // required bytes signed_public_key = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(3, this->signed_public_key(), target);
  }
  
  // required bytes chunkstore_dir = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(4, this->chunkstore_dir(), target);
  }
  
  // required uint32 port = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(5, this->port(), target);
  }
  
  // required uint64 space = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt64ToArray(6, this->space(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OwnVaultRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes public_key = 1;
    if (has_public_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->public_key());
    }
    
    // required bytes private_key = 2;
    if (has_private_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->private_key());
    }
    
    // required bytes signed_public_key = 3;
    if (has_signed_public_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->signed_public_key());
    }
    
    // required bytes chunkstore_dir = 4;
    if (has_chunkstore_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->chunkstore_dir());
    }
    
    // required uint32 port = 5;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->port());
    }
    
    // required uint64 space = 6;
    if (has_space()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt64Size(
          this->space());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void OwnVaultRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OwnVaultRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OwnVaultRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OwnVaultRequest::MergeFrom(const OwnVaultRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_public_key(from.public_key());
    }
    if (from._has_bit(1)) {
      set_private_key(from.private_key());
    }
    if (from._has_bit(2)) {
      set_signed_public_key(from.signed_public_key());
    }
    if (from._has_bit(3)) {
      set_chunkstore_dir(from.chunkstore_dir());
    }
    if (from._has_bit(4)) {
      set_port(from.port());
    }
    if (from._has_bit(5)) {
      set_space(from.space());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OwnVaultRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OwnVaultRequest::CopyFrom(const OwnVaultRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OwnVaultRequest::Swap(OwnVaultRequest* other) {
  if (other != this) {
    std::swap(public_key_, other->public_key_);
    std::swap(private_key_, other->private_key_);
    std::swap(signed_public_key_, other->signed_public_key_);
    std::swap(chunkstore_dir_, other->chunkstore_dir_);
    std::swap(port_, other->port_);
    std::swap(space_, other->space_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool OwnVaultRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* OwnVaultRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* OwnVaultRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return OwnVaultRequest_reflection_;
}

// ===================================================================

const ::std::string OwnVaultResponse::_default_pmid_name_;
#ifndef _MSC_VER
const int OwnVaultResponse::kResultFieldNumber;
const int OwnVaultResponse::kPmidNameFieldNumber;
#endif  // !_MSC_VER

OwnVaultResponse::OwnVaultResponse()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    result_(0),
    pmid_name_(const_cast< ::std::string*>(&_default_pmid_name_)) {
  SharedCtor();
}

void OwnVaultResponse::InitAsDefaultInstance() {}

OwnVaultResponse::OwnVaultResponse(const OwnVaultResponse& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    result_(0),
    pmid_name_(const_cast< ::std::string*>(&_default_pmid_name_)) {
  SharedCtor();
  MergeFrom(from);
}

void OwnVaultResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  pmid_name_ = const_cast< ::std::string*>(&_default_pmid_name_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OwnVaultResponse::~OwnVaultResponse() {
  SharedDtor();
}

void OwnVaultResponse::SharedDtor() {
  if (pmid_name_ != &_default_pmid_name_) {
    delete pmid_name_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* OwnVaultResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OwnVaultResponse_descriptor_;
}

const OwnVaultResponse& OwnVaultResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_5fservice_5fmessages_2eproto();  return *default_instance_;
}

OwnVaultResponse* OwnVaultResponse::default_instance_ = NULL;

OwnVaultResponse* OwnVaultResponse::New() const {
  return new OwnVaultResponse;
}

void OwnVaultResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (_has_bit(1)) {
      if (pmid_name_ != &_default_pmid_name_) {
        pmid_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OwnVaultResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required .maidsafe.OwnVaultResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        int value;
        DO_(::google::protobuf::internal::WireFormat::ReadEnum(input, &value));
        if (maidsafe::OwnVaultResult_IsValid(value)) {
          set_result(static_cast< maidsafe::OwnVaultResult >(value));
        } else {
          mutable_unknown_fields()->AddVarint(1, value);
        }
        if (input->ExpectTag(18)) goto parse_pmid_name;
        break;
      }
      
      // optional bytes pmid_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_pmid_name:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_pmid_name()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OwnVaultResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    OwnVaultResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required .maidsafe.OwnVaultResult result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteEnum(1, this->result(), output);
  }
  
  // optional bytes pmid_name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(2, this->pmid_name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OwnVaultResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .maidsafe.OwnVaultResult result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteEnumToArray(1, this->result(), target);
  }
  
  // optional bytes pmid_name = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(2, this->pmid_name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OwnVaultResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .maidsafe.OwnVaultResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::EnumSize(this->result());
    }
    
    // optional bytes pmid_name = 2;
    if (has_pmid_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->pmid_name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void OwnVaultResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OwnVaultResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OwnVaultResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OwnVaultResponse::MergeFrom(const OwnVaultResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_result(from.result());
    }
    if (from._has_bit(1)) {
      set_pmid_name(from.pmid_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OwnVaultResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OwnVaultResponse::CopyFrom(const OwnVaultResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OwnVaultResponse::Swap(OwnVaultResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(pmid_name_, other->pmid_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool OwnVaultResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* OwnVaultResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* OwnVaultResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return OwnVaultResponse_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

IsOwnedRequest::IsOwnedRequest()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0) {
  SharedCtor();
}

void IsOwnedRequest::InitAsDefaultInstance() {}

IsOwnedRequest::IsOwnedRequest(const IsOwnedRequest& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0) {
  SharedCtor();
  MergeFrom(from);
}

void IsOwnedRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IsOwnedRequest::~IsOwnedRequest() {
  SharedDtor();
}

void IsOwnedRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* IsOwnedRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IsOwnedRequest_descriptor_;
}

const IsOwnedRequest& IsOwnedRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_5fservice_5fmessages_2eproto();  return *default_instance_;
}

IsOwnedRequest* IsOwnedRequest::default_instance_ = NULL;

IsOwnedRequest* IsOwnedRequest::New() const {
  return new IsOwnedRequest;
}

void IsOwnedRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IsOwnedRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void IsOwnedRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    IsOwnedRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IsOwnedRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IsOwnedRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void IsOwnedRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IsOwnedRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IsOwnedRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IsOwnedRequest::MergeFrom(const IsOwnedRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IsOwnedRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsOwnedRequest::CopyFrom(const IsOwnedRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsOwnedRequest::Swap(IsOwnedRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool IsOwnedRequest::IsInitialized() const {
  
  return true;
}

const ::google::protobuf::Descriptor* IsOwnedRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* IsOwnedRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return IsOwnedRequest_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int IsOwnedResponse::kStatusFieldNumber;
#endif  // !_MSC_VER

IsOwnedResponse::IsOwnedResponse()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    status_(0) {
  SharedCtor();
}

void IsOwnedResponse::InitAsDefaultInstance() {}

IsOwnedResponse::IsOwnedResponse(const IsOwnedResponse& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    status_(0) {
  SharedCtor();
  MergeFrom(from);
}

void IsOwnedResponse::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IsOwnedResponse::~IsOwnedResponse() {
  SharedDtor();
}

void IsOwnedResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* IsOwnedResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IsOwnedResponse_descriptor_;
}

const IsOwnedResponse& IsOwnedResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_5fservice_5fmessages_2eproto();  return *default_instance_;
}

IsOwnedResponse* IsOwnedResponse::default_instance_ = NULL;

IsOwnedResponse* IsOwnedResponse::New() const {
  return new IsOwnedResponse;
}

void IsOwnedResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IsOwnedResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required .maidsafe.VaultStatus status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        int value;
        DO_(::google::protobuf::internal::WireFormat::ReadEnum(input, &value));
        if (maidsafe::VaultStatus_IsValid(value)) {
          set_status(static_cast< maidsafe::VaultStatus >(value));
        } else {
          mutable_unknown_fields()->AddVarint(1, value);
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IsOwnedResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    IsOwnedResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required .maidsafe.VaultStatus status = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteEnum(1, this->status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IsOwnedResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .maidsafe.VaultStatus status = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteEnumToArray(1, this->status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IsOwnedResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .maidsafe.VaultStatus status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::EnumSize(this->status());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void IsOwnedResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IsOwnedResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IsOwnedResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IsOwnedResponse::MergeFrom(const IsOwnedResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IsOwnedResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsOwnedResponse::CopyFrom(const IsOwnedResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsOwnedResponse::Swap(IsOwnedResponse* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool IsOwnedResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* IsOwnedResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* IsOwnedResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return IsOwnedResponse_reflection_;
}

// ===================================================================

const ::std::string CreateBPRequest::_default_bufferpacket_name_;
const ::std::string CreateBPRequest::_default_data_;
const ::std::string CreateBPRequest::_default_pmid_;
const ::std::string CreateBPRequest::_default_public_key_;
const ::std::string CreateBPRequest::_default_signed_public_key_;
const ::std::string CreateBPRequest::_default_signed_request_;
#ifndef _MSC_VER
const int CreateBPRequest::kBufferpacketNameFieldNumber;
const int CreateBPRequest::kDataFieldNumber;
const int CreateBPRequest::kPmidFieldNumber;
const int CreateBPRequest::kPublicKeyFieldNumber;
const int CreateBPRequest::kSignedPublicKeyFieldNumber;
const int CreateBPRequest::kSignedRequestFieldNumber;
#endif  // !_MSC_VER

CreateBPRequest::CreateBPRequest()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    bufferpacket_name_(const_cast< ::std::string*>(&_default_bufferpacket_name_)),
    data_(const_cast< ::std::string*>(&_default_data_)),
    pmid_(const_cast< ::std::string*>(&_default_pmid_)),
    public_key_(const_cast< ::std::string*>(&_default_public_key_)),
    signed_public_key_(const_cast< ::std::string*>(&_default_signed_public_key_)),
    signed_request_(const_cast< ::std::string*>(&_default_signed_request_)) {
  SharedCtor();
}

void CreateBPRequest::InitAsDefaultInstance() {}

CreateBPRequest::CreateBPRequest(const CreateBPRequest& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    bufferpacket_name_(const_cast< ::std::string*>(&_default_bufferpacket_name_)),
    data_(const_cast< ::std::string*>(&_default_data_)),
    pmid_(const_cast< ::std::string*>(&_default_pmid_)),
    public_key_(const_cast< ::std::string*>(&_default_public_key_)),
    signed_public_key_(const_cast< ::std::string*>(&_default_signed_public_key_)),
    signed_request_(const_cast< ::std::string*>(&_default_signed_request_)) {
  SharedCtor();
  MergeFrom(from);
}

void CreateBPRequest::SharedCtor() {
  _cached_size_ = 0;
  bufferpacket_name_ = const_cast< ::std::string*>(&_default_bufferpacket_name_);
  data_ = const_cast< ::std::string*>(&_default_data_);
  pmid_ = const_cast< ::std::string*>(&_default_pmid_);
  public_key_ = const_cast< ::std::string*>(&_default_public_key_);
  signed_public_key_ = const_cast< ::std::string*>(&_default_signed_public_key_);
  signed_request_ = const_cast< ::std::string*>(&_default_signed_request_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateBPRequest::~CreateBPRequest() {
  SharedDtor();
}

void CreateBPRequest::SharedDtor() {
  if (bufferpacket_name_ != &_default_bufferpacket_name_) {
    delete bufferpacket_name_;
  }
  if (data_ != &_default_data_) {
    delete data_;
  }
  if (pmid_ != &_default_pmid_) {
    delete pmid_;
  }
  if (public_key_ != &_default_public_key_) {
    delete public_key_;
  }
  if (signed_public_key_ != &_default_signed_public_key_) {
    delete signed_public_key_;
  }
  if (signed_request_ != &_default_signed_request_) {
    delete signed_request_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CreateBPRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateBPRequest_descriptor_;
}

const CreateBPRequest& CreateBPRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_5fservice_5fmessages_2eproto();  return *default_instance_;
}

CreateBPRequest* CreateBPRequest::default_instance_ = NULL;

CreateBPRequest* CreateBPRequest::New() const {
  return new CreateBPRequest;
}

void CreateBPRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (bufferpacket_name_ != &_default_bufferpacket_name_) {
        bufferpacket_name_->clear();
      }
    }
    if (_has_bit(1)) {
      if (data_ != &_default_data_) {
        data_->clear();
      }
    }
    if (_has_bit(2)) {
      if (pmid_ != &_default_pmid_) {
        pmid_->clear();
      }
    }
    if (_has_bit(3)) {
      if (public_key_ != &_default_public_key_) {
        public_key_->clear();
      }
    }
    if (_has_bit(4)) {
      if (signed_public_key_ != &_default_signed_public_key_) {
        signed_public_key_->clear();
      }
    }
    if (_has_bit(5)) {
      if (signed_request_ != &_default_signed_request_) {
        signed_request_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateBPRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required bytes bufferpacket_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_bufferpacket_name()));
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }
      
      // required bytes data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_data:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_data()));
        if (input->ExpectTag(26)) goto parse_pmid;
        break;
      }
      
      // required bytes pmid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_pmid:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_pmid()));
        if (input->ExpectTag(34)) goto parse_public_key;
        break;
      }
      
      // required bytes public_key = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_public_key:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_public_key()));
        if (input->ExpectTag(42)) goto parse_signed_public_key;
        break;
      }
      
      // required bytes signed_public_key = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_signed_public_key:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_signed_public_key()));
        if (input->ExpectTag(50)) goto parse_signed_request;
        break;
      }
      
      // required bytes signed_request = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_signed_request:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_signed_request()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateBPRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CreateBPRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required bytes bufferpacket_name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(1, this->bufferpacket_name(), output);
  }
  
  // required bytes data = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(2, this->data(), output);
  }
  
  // required bytes pmid = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(3, this->pmid(), output);
  }
  
  // required bytes public_key = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(4, this->public_key(), output);
  }
  
  // required bytes signed_public_key = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(5, this->signed_public_key(), output);
  }
  
  // required bytes signed_request = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(6, this->signed_request(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateBPRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes bufferpacket_name = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(1, this->bufferpacket_name(), target);
  }
  
  // required bytes data = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(2, this->data(), target);
  }
  
  // required bytes pmid = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(3, this->pmid(), target);
  }
  
  // required bytes public_key = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(4, this->public_key(), target);
  }
  
  // required bytes signed_public_key = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(5, this->signed_public_key(), target);
  }
  
  // required bytes signed_request = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(6, this->signed_request(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateBPRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes bufferpacket_name = 1;
    if (has_bufferpacket_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->bufferpacket_name());
    }
    
    // required bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->data());
    }
    
    // required bytes pmid = 3;
    if (has_pmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->pmid());
    }
    
    // required bytes public_key = 4;
    if (has_public_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->public_key());
    }
    
    // required bytes signed_public_key = 5;
    if (has_signed_public_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->signed_public_key());
    }
    
    // required bytes signed_request = 6;
    if (has_signed_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->signed_request());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CreateBPRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateBPRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateBPRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateBPRequest::MergeFrom(const CreateBPRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_bufferpacket_name(from.bufferpacket_name());
    }
    if (from._has_bit(1)) {
      set_data(from.data());
    }
    if (from._has_bit(2)) {
      set_pmid(from.pmid());
    }
    if (from._has_bit(3)) {
      set_public_key(from.public_key());
    }
    if (from._has_bit(4)) {
      set_signed_public_key(from.signed_public_key());
    }
    if (from._has_bit(5)) {
      set_signed_request(from.signed_request());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateBPRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateBPRequest::CopyFrom(const CreateBPRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateBPRequest::Swap(CreateBPRequest* other) {
  if (other != this) {
    std::swap(bufferpacket_name_, other->bufferpacket_name_);
    std::swap(data_, other->data_);
    std::swap(pmid_, other->pmid_);
    std::swap(public_key_, other->public_key_);
    std::swap(signed_public_key_, other->signed_public_key_);
    std::swap(signed_request_, other->signed_request_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CreateBPRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* CreateBPRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CreateBPRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CreateBPRequest_reflection_;
}

// ===================================================================

const ::std::string CreateBPResponse::_default_pmid_id_;
const ::std::string CreateBPResponse::_default_public_key_;
const ::std::string CreateBPResponse::_default_signed_public_key_;
#ifndef _MSC_VER
const int CreateBPResponse::kResultFieldNumber;
const int CreateBPResponse::kPmidIdFieldNumber;
const int CreateBPResponse::kPublicKeyFieldNumber;
const int CreateBPResponse::kSignedPublicKeyFieldNumber;
#endif  // !_MSC_VER

CreateBPResponse::CreateBPResponse()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    result_(0u),
    pmid_id_(const_cast< ::std::string*>(&_default_pmid_id_)),
    public_key_(const_cast< ::std::string*>(&_default_public_key_)),
    signed_public_key_(const_cast< ::std::string*>(&_default_signed_public_key_)) {
  SharedCtor();
}

void CreateBPResponse::InitAsDefaultInstance() {}

CreateBPResponse::CreateBPResponse(const CreateBPResponse& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    result_(0u),
    pmid_id_(const_cast< ::std::string*>(&_default_pmid_id_)),
    public_key_(const_cast< ::std::string*>(&_default_public_key_)),
    signed_public_key_(const_cast< ::std::string*>(&_default_signed_public_key_)) {
  SharedCtor();
  MergeFrom(from);
}

void CreateBPResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  pmid_id_ = const_cast< ::std::string*>(&_default_pmid_id_);
  public_key_ = const_cast< ::std::string*>(&_default_public_key_);
  signed_public_key_ = const_cast< ::std::string*>(&_default_signed_public_key_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateBPResponse::~CreateBPResponse() {
  SharedDtor();
}

void CreateBPResponse::SharedDtor() {
  if (pmid_id_ != &_default_pmid_id_) {
    delete pmid_id_;
  }
  if (public_key_ != &_default_public_key_) {
    delete public_key_;
  }
  if (signed_public_key_ != &_default_signed_public_key_) {
    delete signed_public_key_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CreateBPResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateBPResponse_descriptor_;
}

const CreateBPResponse& CreateBPResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_5fservice_5fmessages_2eproto();  return *default_instance_;
}

CreateBPResponse* CreateBPResponse::default_instance_ = NULL;

CreateBPResponse* CreateBPResponse::New() const {
  return new CreateBPResponse;
}

void CreateBPResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    if (_has_bit(1)) {
      if (pmid_id_ != &_default_pmid_id_) {
        pmid_id_->clear();
      }
    }
    if (_has_bit(2)) {
      if (public_key_ != &_default_public_key_) {
        public_key_->clear();
      }
    }
    if (_has_bit(3)) {
      if (signed_public_key_ != &_default_signed_public_key_) {
        signed_public_key_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateBPResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_pmid_id;
        break;
      }
      
      // optional bytes pmid_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_pmid_id:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_pmid_id()));
        if (input->ExpectTag(26)) goto parse_public_key;
        break;
      }
      
      // optional bytes public_key = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_public_key:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_public_key()));
        if (input->ExpectTag(34)) goto parse_signed_public_key;
        break;
      }
      
      // optional bytes signed_public_key = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_signed_public_key:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_signed_public_key()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateBPResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CreateBPResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->result(), output);
  }
  
  // optional bytes pmid_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(2, this->pmid_id(), output);
  }
  
  // optional bytes public_key = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(3, this->public_key(), output);
  }
  
  // optional bytes signed_public_key = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(4, this->signed_public_key(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateBPResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->result(), target);
  }
  
  // optional bytes pmid_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(2, this->pmid_id(), target);
  }
  
  // optional bytes public_key = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(3, this->public_key(), target);
  }
  
  // optional bytes signed_public_key = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(4, this->signed_public_key(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateBPResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
    // optional bytes pmid_id = 2;
    if (has_pmid_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->pmid_id());
    }
    
    // optional bytes public_key = 3;
    if (has_public_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->public_key());
    }
    
    // optional bytes signed_public_key = 4;
    if (has_signed_public_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->signed_public_key());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CreateBPResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateBPResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateBPResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateBPResponse::MergeFrom(const CreateBPResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_result(from.result());
    }
    if (from._has_bit(1)) {
      set_pmid_id(from.pmid_id());
    }
    if (from._has_bit(2)) {
      set_public_key(from.public_key());
    }
    if (from._has_bit(3)) {
      set_signed_public_key(from.signed_public_key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateBPResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateBPResponse::CopyFrom(const CreateBPResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateBPResponse::Swap(CreateBPResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(pmid_id_, other->pmid_id_);
    std::swap(public_key_, other->public_key_);
    std::swap(signed_public_key_, other->signed_public_key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CreateBPResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* CreateBPResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CreateBPResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CreateBPResponse_reflection_;
}

// ===================================================================

const ::std::string ModifyBPInfoRequest::_default_bufferpacket_name_;
const ::std::string ModifyBPInfoRequest::_default_data_;
const ::std::string ModifyBPInfoRequest::_default_pmid_;
const ::std::string ModifyBPInfoRequest::_default_public_key_;
const ::std::string ModifyBPInfoRequest::_default_signed_public_key_;
const ::std::string ModifyBPInfoRequest::_default_signed_request_;
#ifndef _MSC_VER
const int ModifyBPInfoRequest::kBufferpacketNameFieldNumber;
const int ModifyBPInfoRequest::kDataFieldNumber;
const int ModifyBPInfoRequest::kPmidFieldNumber;
const int ModifyBPInfoRequest::kPublicKeyFieldNumber;
const int ModifyBPInfoRequest::kSignedPublicKeyFieldNumber;
const int ModifyBPInfoRequest::kSignedRequestFieldNumber;
#endif  // !_MSC_VER

ModifyBPInfoRequest::ModifyBPInfoRequest()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    bufferpacket_name_(const_cast< ::std::string*>(&_default_bufferpacket_name_)),
    data_(const_cast< ::std::string*>(&_default_data_)),
    pmid_(const_cast< ::std::string*>(&_default_pmid_)),
    public_key_(const_cast< ::std::string*>(&_default_public_key_)),
    signed_public_key_(const_cast< ::std::string*>(&_default_signed_public_key_)),
    signed_request_(const_cast< ::std::string*>(&_default_signed_request_)) {
  SharedCtor();
}

void ModifyBPInfoRequest::InitAsDefaultInstance() {}

ModifyBPInfoRequest::ModifyBPInfoRequest(const ModifyBPInfoRequest& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    bufferpacket_name_(const_cast< ::std::string*>(&_default_bufferpacket_name_)),
    data_(const_cast< ::std::string*>(&_default_data_)),
    pmid_(const_cast< ::std::string*>(&_default_pmid_)),
    public_key_(const_cast< ::std::string*>(&_default_public_key_)),
    signed_public_key_(const_cast< ::std::string*>(&_default_signed_public_key_)),
    signed_request_(const_cast< ::std::string*>(&_default_signed_request_)) {
  SharedCtor();
  MergeFrom(from);
}

void ModifyBPInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  bufferpacket_name_ = const_cast< ::std::string*>(&_default_bufferpacket_name_);
  data_ = const_cast< ::std::string*>(&_default_data_);
  pmid_ = const_cast< ::std::string*>(&_default_pmid_);
  public_key_ = const_cast< ::std::string*>(&_default_public_key_);
  signed_public_key_ = const_cast< ::std::string*>(&_default_signed_public_key_);
  signed_request_ = const_cast< ::std::string*>(&_default_signed_request_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModifyBPInfoRequest::~ModifyBPInfoRequest() {
  SharedDtor();
}

void ModifyBPInfoRequest::SharedDtor() {
  if (bufferpacket_name_ != &_default_bufferpacket_name_) {
    delete bufferpacket_name_;
  }
  if (data_ != &_default_data_) {
    delete data_;
  }
  if (pmid_ != &_default_pmid_) {
    delete pmid_;
  }
  if (public_key_ != &_default_public_key_) {
    delete public_key_;
  }
  if (signed_public_key_ != &_default_signed_public_key_) {
    delete signed_public_key_;
  }
  if (signed_request_ != &_default_signed_request_) {
    delete signed_request_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* ModifyBPInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModifyBPInfoRequest_descriptor_;
}

const ModifyBPInfoRequest& ModifyBPInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_5fservice_5fmessages_2eproto();  return *default_instance_;
}

ModifyBPInfoRequest* ModifyBPInfoRequest::default_instance_ = NULL;

ModifyBPInfoRequest* ModifyBPInfoRequest::New() const {
  return new ModifyBPInfoRequest;
}

void ModifyBPInfoRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (bufferpacket_name_ != &_default_bufferpacket_name_) {
        bufferpacket_name_->clear();
      }
    }
    if (_has_bit(1)) {
      if (data_ != &_default_data_) {
        data_->clear();
      }
    }
    if (_has_bit(2)) {
      if (pmid_ != &_default_pmid_) {
        pmid_->clear();
      }
    }
    if (_has_bit(3)) {
      if (public_key_ != &_default_public_key_) {
        public_key_->clear();
      }
    }
    if (_has_bit(4)) {
      if (signed_public_key_ != &_default_signed_public_key_) {
        signed_public_key_->clear();
      }
    }
    if (_has_bit(5)) {
      if (signed_request_ != &_default_signed_request_) {
        signed_request_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModifyBPInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required bytes bufferpacket_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_bufferpacket_name()));
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }
      
      // required bytes data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_data:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_data()));
        if (input->ExpectTag(26)) goto parse_pmid;
        break;
      }
      
      // required bytes pmid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_pmid:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_pmid()));
        if (input->ExpectTag(34)) goto parse_public_key;
        break;
      }
      
      // required bytes public_key = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_public_key:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_public_key()));
        if (input->ExpectTag(42)) goto parse_signed_public_key;
        break;
      }
      
      // required bytes signed_public_key = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_signed_public_key:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_signed_public_key()));
        if (input->ExpectTag(50)) goto parse_signed_request;
        break;
      }
      
      // required bytes signed_request = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_signed_request:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_signed_request()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ModifyBPInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    ModifyBPInfoRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required bytes bufferpacket_name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(1, this->bufferpacket_name(), output);
  }
  
  // required bytes data = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(2, this->data(), output);
  }
  
  // required bytes pmid = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(3, this->pmid(), output);
  }
  
  // required bytes public_key = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(4, this->public_key(), output);
  }
  
  // required bytes signed_public_key = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(5, this->signed_public_key(), output);
  }
  
  // required bytes signed_request = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(6, this->signed_request(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ModifyBPInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes bufferpacket_name = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(1, this->bufferpacket_name(), target);
  }
  
  // required bytes data = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(2, this->data(), target);
  }
  
  // required bytes pmid = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(3, this->pmid(), target);
  }
  
  // required bytes public_key = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(4, this->public_key(), target);
  }
  
  // required bytes signed_public_key = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(5, this->signed_public_key(), target);
  }
  
  // required bytes signed_request = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(6, this->signed_request(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ModifyBPInfoRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes bufferpacket_name = 1;
    if (has_bufferpacket_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->bufferpacket_name());
    }
    
    // required bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->data());
    }
    
    // required bytes pmid = 3;
    if (has_pmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->pmid());
    }
    
    // required bytes public_key = 4;
    if (has_public_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->public_key());
    }
    
    // required bytes signed_public_key = 5;
    if (has_signed_public_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->signed_public_key());
    }
    
    // required bytes signed_request = 6;
    if (has_signed_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->signed_request());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void ModifyBPInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModifyBPInfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModifyBPInfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModifyBPInfoRequest::MergeFrom(const ModifyBPInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_bufferpacket_name(from.bufferpacket_name());
    }
    if (from._has_bit(1)) {
      set_data(from.data());
    }
    if (from._has_bit(2)) {
      set_pmid(from.pmid());
    }
    if (from._has_bit(3)) {
      set_public_key(from.public_key());
    }
    if (from._has_bit(4)) {
      set_signed_public_key(from.signed_public_key());
    }
    if (from._has_bit(5)) {
      set_signed_request(from.signed_request());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModifyBPInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModifyBPInfoRequest::CopyFrom(const ModifyBPInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModifyBPInfoRequest::Swap(ModifyBPInfoRequest* other) {
  if (other != this) {
    std::swap(bufferpacket_name_, other->bufferpacket_name_);
    std::swap(data_, other->data_);
    std::swap(pmid_, other->pmid_);
    std::swap(public_key_, other->public_key_);
    std::swap(signed_public_key_, other->signed_public_key_);
    std::swap(signed_request_, other->signed_request_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool ModifyBPInfoRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* ModifyBPInfoRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* ModifyBPInfoRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return ModifyBPInfoRequest_reflection_;
}

// ===================================================================

const ::std::string ModifyBPInfoResponse::_default_pmid_id_;
const ::std::string ModifyBPInfoResponse::_default_public_key_;
const ::std::string ModifyBPInfoResponse::_default_signed_public_key_;
#ifndef _MSC_VER
const int ModifyBPInfoResponse::kResultFieldNumber;
const int ModifyBPInfoResponse::kPmidIdFieldNumber;
const int ModifyBPInfoResponse::kPublicKeyFieldNumber;
const int ModifyBPInfoResponse::kSignedPublicKeyFieldNumber;
#endif  // !_MSC_VER

ModifyBPInfoResponse::ModifyBPInfoResponse()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    result_(0u),
    pmid_id_(const_cast< ::std::string*>(&_default_pmid_id_)),
    public_key_(const_cast< ::std::string*>(&_default_public_key_)),
    signed_public_key_(const_cast< ::std::string*>(&_default_signed_public_key_)) {
  SharedCtor();
}

void ModifyBPInfoResponse::InitAsDefaultInstance() {}

ModifyBPInfoResponse::ModifyBPInfoResponse(const ModifyBPInfoResponse& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    result_(0u),
    pmid_id_(const_cast< ::std::string*>(&_default_pmid_id_)),
    public_key_(const_cast< ::std::string*>(&_default_public_key_)),
    signed_public_key_(const_cast< ::std::string*>(&_default_signed_public_key_)) {
  SharedCtor();
  MergeFrom(from);
}

void ModifyBPInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  pmid_id_ = const_cast< ::std::string*>(&_default_pmid_id_);
  public_key_ = const_cast< ::std::string*>(&_default_public_key_);
  signed_public_key_ = const_cast< ::std::string*>(&_default_signed_public_key_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModifyBPInfoResponse::~ModifyBPInfoResponse() {
  SharedDtor();
}

void ModifyBPInfoResponse::SharedDtor() {
  if (pmid_id_ != &_default_pmid_id_) {
    delete pmid_id_;
  }
  if (public_key_ != &_default_public_key_) {
    delete public_key_;
  }
  if (signed_public_key_ != &_default_signed_public_key_) {
    delete signed_public_key_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* ModifyBPInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModifyBPInfoResponse_descriptor_;
}

const ModifyBPInfoResponse& ModifyBPInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_5fservice_5fmessages_2eproto();  return *default_instance_;
}

ModifyBPInfoResponse* ModifyBPInfoResponse::default_instance_ = NULL;

ModifyBPInfoResponse* ModifyBPInfoResponse::New() const {
  return new ModifyBPInfoResponse;
}

void ModifyBPInfoResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    if (_has_bit(1)) {
      if (pmid_id_ != &_default_pmid_id_) {
        pmid_id_->clear();
      }
    }
    if (_has_bit(2)) {
      if (public_key_ != &_default_public_key_) {
        public_key_->clear();
      }
    }
    if (_has_bit(3)) {
      if (signed_public_key_ != &_default_signed_public_key_) {
        signed_public_key_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModifyBPInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_pmid_id;
        break;
      }
      
      // optional bytes pmid_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_pmid_id:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_pmid_id()));
        if (input->ExpectTag(26)) goto parse_public_key;
        break;
      }
      
      // optional bytes public_key = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_public_key:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_public_key()));
        if (input->ExpectTag(34)) goto parse_signed_public_key;
        break;
      }
      
      // optional bytes signed_public_key = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_signed_public_key:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_signed_public_key()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ModifyBPInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    ModifyBPInfoResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->result(), output);
  }
  
  // optional bytes pmid_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(2, this->pmid_id(), output);
  }
  
  // optional bytes public_key = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(3, this->public_key(), output);
  }
  
  // optional bytes signed_public_key = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(4, this->signed_public_key(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ModifyBPInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->result(), target);
  }
  
  // optional bytes pmid_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(2, this->pmid_id(), target);
  }
  
  // optional bytes public_key = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(3, this->public_key(), target);
  }
  
  // optional bytes signed_public_key = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(4, this->signed_public_key(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ModifyBPInfoResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
    // optional bytes pmid_id = 2;
    if (has_pmid_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->pmid_id());
    }
    
    // optional bytes public_key = 3;
    if (has_public_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->public_key());
    }
    
    // optional bytes signed_public_key = 4;
    if (has_signed_public_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->signed_public_key());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void ModifyBPInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModifyBPInfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModifyBPInfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModifyBPInfoResponse::MergeFrom(const ModifyBPInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_result(from.result());
    }
    if (from._has_bit(1)) {
      set_pmid_id(from.pmid_id());
    }
    if (from._has_bit(2)) {
      set_public_key(from.public_key());
    }
    if (from._has_bit(3)) {
      set_signed_public_key(from.signed_public_key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModifyBPInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModifyBPInfoResponse::CopyFrom(const ModifyBPInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModifyBPInfoResponse::Swap(ModifyBPInfoResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(pmid_id_, other->pmid_id_);
    std::swap(public_key_, other->public_key_);
    std::swap(signed_public_key_, other->signed_public_key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool ModifyBPInfoResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* ModifyBPInfoResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* ModifyBPInfoResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return ModifyBPInfoResponse_reflection_;
}

// ===================================================================

const ::std::string GetBPMessagesRequest::_default_bufferpacket_name_;
const ::std::string GetBPMessagesRequest::_default_public_key_;
const ::std::string GetBPMessagesRequest::_default_pmid_;
const ::std::string GetBPMessagesRequest::_default_signed_public_key_;
const ::std::string GetBPMessagesRequest::_default_signed_request_;
#ifndef _MSC_VER
const int GetBPMessagesRequest::kBufferpacketNameFieldNumber;
const int GetBPMessagesRequest::kPublicKeyFieldNumber;
const int GetBPMessagesRequest::kPmidFieldNumber;
const int GetBPMessagesRequest::kSignedPublicKeyFieldNumber;
const int GetBPMessagesRequest::kSignedRequestFieldNumber;
#endif  // !_MSC_VER

GetBPMessagesRequest::GetBPMessagesRequest()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    bufferpacket_name_(const_cast< ::std::string*>(&_default_bufferpacket_name_)),
    public_key_(const_cast< ::std::string*>(&_default_public_key_)),
    pmid_(const_cast< ::std::string*>(&_default_pmid_)),
    signed_public_key_(const_cast< ::std::string*>(&_default_signed_public_key_)),
    signed_request_(const_cast< ::std::string*>(&_default_signed_request_)) {
  SharedCtor();
}

void GetBPMessagesRequest::InitAsDefaultInstance() {}

GetBPMessagesRequest::GetBPMessagesRequest(const GetBPMessagesRequest& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    bufferpacket_name_(const_cast< ::std::string*>(&_default_bufferpacket_name_)),
    public_key_(const_cast< ::std::string*>(&_default_public_key_)),
    pmid_(const_cast< ::std::string*>(&_default_pmid_)),
    signed_public_key_(const_cast< ::std::string*>(&_default_signed_public_key_)),
    signed_request_(const_cast< ::std::string*>(&_default_signed_request_)) {
  SharedCtor();
  MergeFrom(from);
}

void GetBPMessagesRequest::SharedCtor() {
  _cached_size_ = 0;
  bufferpacket_name_ = const_cast< ::std::string*>(&_default_bufferpacket_name_);
  public_key_ = const_cast< ::std::string*>(&_default_public_key_);
  pmid_ = const_cast< ::std::string*>(&_default_pmid_);
  signed_public_key_ = const_cast< ::std::string*>(&_default_signed_public_key_);
  signed_request_ = const_cast< ::std::string*>(&_default_signed_request_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetBPMessagesRequest::~GetBPMessagesRequest() {
  SharedDtor();
}

void GetBPMessagesRequest::SharedDtor() {
  if (bufferpacket_name_ != &_default_bufferpacket_name_) {
    delete bufferpacket_name_;
  }
  if (public_key_ != &_default_public_key_) {
    delete public_key_;
  }
  if (pmid_ != &_default_pmid_) {
    delete pmid_;
  }
  if (signed_public_key_ != &_default_signed_public_key_) {
    delete signed_public_key_;
  }
  if (signed_request_ != &_default_signed_request_) {
    delete signed_request_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* GetBPMessagesRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetBPMessagesRequest_descriptor_;
}

const GetBPMessagesRequest& GetBPMessagesRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_5fservice_5fmessages_2eproto();  return *default_instance_;
}

GetBPMessagesRequest* GetBPMessagesRequest::default_instance_ = NULL;

GetBPMessagesRequest* GetBPMessagesRequest::New() const {
  return new GetBPMessagesRequest;
}

void GetBPMessagesRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (bufferpacket_name_ != &_default_bufferpacket_name_) {
        bufferpacket_name_->clear();
      }
    }
    if (_has_bit(1)) {
      if (public_key_ != &_default_public_key_) {
        public_key_->clear();
      }
    }
    if (_has_bit(2)) {
      if (pmid_ != &_default_pmid_) {
        pmid_->clear();
      }
    }
    if (_has_bit(3)) {
      if (signed_public_key_ != &_default_signed_public_key_) {
        signed_public_key_->clear();
      }
    }
    if (_has_bit(4)) {
      if (signed_request_ != &_default_signed_request_) {
        signed_request_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetBPMessagesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required bytes bufferpacket_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_bufferpacket_name()));
        if (input->ExpectTag(18)) goto parse_public_key;
        break;
      }
      
      // required bytes public_key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_public_key:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_public_key()));
        if (input->ExpectTag(26)) goto parse_pmid;
        break;
      }
      
      // required bytes pmid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_pmid:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_pmid()));
        if (input->ExpectTag(34)) goto parse_signed_public_key;
        break;
      }
      
      // required bytes signed_public_key = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_signed_public_key:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_signed_public_key()));
        if (input->ExpectTag(42)) goto parse_signed_request;
        break;
      }
      
      // required bytes signed_request = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_signed_request:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_signed_request()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetBPMessagesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    GetBPMessagesRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required bytes bufferpacket_name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(1, this->bufferpacket_name(), output);
  }
  
  // required bytes public_key = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(2, this->public_key(), output);
  }
  
  // required bytes pmid = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(3, this->pmid(), output);
  }
  
  // required bytes signed_public_key = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(4, this->signed_public_key(), output);
  }
  
  // required bytes signed_request = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(5, this->signed_request(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetBPMessagesRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes bufferpacket_name = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(1, this->bufferpacket_name(), target);
  }
  
  // required bytes public_key = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(2, this->public_key(), target);
  }
  
  // required bytes pmid = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(3, this->pmid(), target);
  }
  
  // required bytes signed_public_key = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(4, this->signed_public_key(), target);
  }
  
  // required bytes signed_request = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(5, this->signed_request(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetBPMessagesRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes bufferpacket_name = 1;
    if (has_bufferpacket_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->bufferpacket_name());
    }
    
    // required bytes public_key = 2;
    if (has_public_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->public_key());
    }
    
    // required bytes pmid = 3;
    if (has_pmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->pmid());
    }
    
    // required bytes signed_public_key = 4;
    if (has_signed_public_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->signed_public_key());
    }
    
    // required bytes signed_request = 5;
    if (has_signed_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->signed_request());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void GetBPMessagesRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetBPMessagesRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetBPMessagesRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetBPMessagesRequest::MergeFrom(const GetBPMessagesRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_bufferpacket_name(from.bufferpacket_name());
    }
    if (from._has_bit(1)) {
      set_public_key(from.public_key());
    }
    if (from._has_bit(2)) {
      set_pmid(from.pmid());
    }
    if (from._has_bit(3)) {
      set_signed_public_key(from.signed_public_key());
    }
    if (from._has_bit(4)) {
      set_signed_request(from.signed_request());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetBPMessagesRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBPMessagesRequest::CopyFrom(const GetBPMessagesRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBPMessagesRequest::Swap(GetBPMessagesRequest* other) {
  if (other != this) {
    std::swap(bufferpacket_name_, other->bufferpacket_name_);
    std::swap(public_key_, other->public_key_);
    std::swap(pmid_, other->pmid_);
    std::swap(signed_public_key_, other->signed_public_key_);
    std::swap(signed_request_, other->signed_request_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool GetBPMessagesRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* GetBPMessagesRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* GetBPMessagesRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return GetBPMessagesRequest_reflection_;
}

// ===================================================================

const ::std::string GetBPMessagesResponse::_default_pmid_id_;
const ::std::string GetBPMessagesResponse::_default_public_key_;
const ::std::string GetBPMessagesResponse::_default_signed_public_key_;
#ifndef _MSC_VER
const int GetBPMessagesResponse::kResultFieldNumber;
const int GetBPMessagesResponse::kMessagesFieldNumber;
const int GetBPMessagesResponse::kPmidIdFieldNumber;
const int GetBPMessagesResponse::kPublicKeyFieldNumber;
const int GetBPMessagesResponse::kSignedPublicKeyFieldNumber;
#endif  // !_MSC_VER

GetBPMessagesResponse::GetBPMessagesResponse()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    result_(0u),
    messages_(),
    pmid_id_(const_cast< ::std::string*>(&_default_pmid_id_)),
    public_key_(const_cast< ::std::string*>(&_default_public_key_)),
    signed_public_key_(const_cast< ::std::string*>(&_default_signed_public_key_)) {
  SharedCtor();
}

void GetBPMessagesResponse::InitAsDefaultInstance() {}

GetBPMessagesResponse::GetBPMessagesResponse(const GetBPMessagesResponse& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    result_(0u),
    messages_(),
    pmid_id_(const_cast< ::std::string*>(&_default_pmid_id_)),
    public_key_(const_cast< ::std::string*>(&_default_public_key_)),
    signed_public_key_(const_cast< ::std::string*>(&_default_signed_public_key_)) {
  SharedCtor();
  MergeFrom(from);
}

void GetBPMessagesResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  pmid_id_ = const_cast< ::std::string*>(&_default_pmid_id_);
  public_key_ = const_cast< ::std::string*>(&_default_public_key_);
  signed_public_key_ = const_cast< ::std::string*>(&_default_signed_public_key_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetBPMessagesResponse::~GetBPMessagesResponse() {
  SharedDtor();
}

void GetBPMessagesResponse::SharedDtor() {
  if (pmid_id_ != &_default_pmid_id_) {
    delete pmid_id_;
  }
  if (public_key_ != &_default_public_key_) {
    delete public_key_;
  }
  if (signed_public_key_ != &_default_signed_public_key_) {
    delete signed_public_key_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* GetBPMessagesResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetBPMessagesResponse_descriptor_;
}

const GetBPMessagesResponse& GetBPMessagesResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_5fservice_5fmessages_2eproto();  return *default_instance_;
}

GetBPMessagesResponse* GetBPMessagesResponse::default_instance_ = NULL;

GetBPMessagesResponse* GetBPMessagesResponse::New() const {
  return new GetBPMessagesResponse;
}

void GetBPMessagesResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    if (_has_bit(2)) {
      if (pmid_id_ != &_default_pmid_id_) {
        pmid_id_->clear();
      }
    }
    if (_has_bit(3)) {
      if (public_key_ != &_default_public_key_) {
        public_key_->clear();
      }
    }
    if (_has_bit(4)) {
      if (signed_public_key_ != &_default_signed_public_key_) {
        signed_public_key_->clear();
      }
    }
  }
  messages_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetBPMessagesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_messages;
        break;
      }
      
      // repeated bytes messages = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_messages:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(
             input, add_messages()));
        if (input->ExpectTag(18)) goto parse_messages;
        if (input->ExpectTag(26)) goto parse_pmid_id;
        break;
      }
      
      // optional bytes pmid_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_pmid_id:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_pmid_id()));
        if (input->ExpectTag(34)) goto parse_public_key;
        break;
      }
      
      // optional bytes public_key = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_public_key:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_public_key()));
        if (input->ExpectTag(42)) goto parse_signed_public_key;
        break;
      }
      
      // optional bytes signed_public_key = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_signed_public_key:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_signed_public_key()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetBPMessagesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    GetBPMessagesResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->result(), output);
  }
  
  // repeated bytes messages = 2;
  for (int i = 0; i < this->messages_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteBytes(2, this->messages(i), output);
  }
  
  // optional bytes pmid_id = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(3, this->pmid_id(), output);
  }
  
  // optional bytes public_key = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(4, this->public_key(), output);
  }
  
  // optional bytes signed_public_key = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(5, this->signed_public_key(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetBPMessagesResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->result(), target);
  }
  
  // repeated bytes messages = 2;
  for (int i = 0; i < this->messages_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(2, this->messages(i), target);
  }
  
  // optional bytes pmid_id = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(3, this->pmid_id(), target);
  }
  
  // optional bytes public_key = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(4, this->public_key(), target);
  }
  
  // optional bytes signed_public_key = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(5, this->signed_public_key(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetBPMessagesResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
    // optional bytes pmid_id = 3;
    if (has_pmid_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->pmid_id());
    }
    
    // optional bytes public_key = 4;
    if (has_public_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->public_key());
    }
    
    // optional bytes signed_public_key = 5;
    if (has_signed_public_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->signed_public_key());
    }
    
  }
  // repeated bytes messages = 2;
  total_size += 1 * this->messages_size();
  for (int i = 0; i < this->messages_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormat::BytesSize(
      this->messages(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void GetBPMessagesResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetBPMessagesResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetBPMessagesResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetBPMessagesResponse::MergeFrom(const GetBPMessagesResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  messages_.MergeFrom(from.messages_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_result(from.result());
    }
    if (from._has_bit(2)) {
      set_pmid_id(from.pmid_id());
    }
    if (from._has_bit(3)) {
      set_public_key(from.public_key());
    }
    if (from._has_bit(4)) {
      set_signed_public_key(from.signed_public_key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetBPMessagesResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBPMessagesResponse::CopyFrom(const GetBPMessagesResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBPMessagesResponse::Swap(GetBPMessagesResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    messages_.Swap(&other->messages_);
    std::swap(pmid_id_, other->pmid_id_);
    std::swap(public_key_, other->public_key_);
    std::swap(signed_public_key_, other->signed_public_key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool GetBPMessagesResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* GetBPMessagesResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* GetBPMessagesResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return GetBPMessagesResponse_reflection_;
}

// ===================================================================

const ::std::string AddBPMessageRequest::_default_bufferpacket_name_;
const ::std::string AddBPMessageRequest::_default_data_;
const ::std::string AddBPMessageRequest::_default_pmid_;
const ::std::string AddBPMessageRequest::_default_public_key_;
const ::std::string AddBPMessageRequest::_default_signed_public_key_;
const ::std::string AddBPMessageRequest::_default_signed_request_;
#ifndef _MSC_VER
const int AddBPMessageRequest::kBufferpacketNameFieldNumber;
const int AddBPMessageRequest::kDataFieldNumber;
const int AddBPMessageRequest::kPmidFieldNumber;
const int AddBPMessageRequest::kPublicKeyFieldNumber;
const int AddBPMessageRequest::kSignedPublicKeyFieldNumber;
const int AddBPMessageRequest::kSignedRequestFieldNumber;
#endif  // !_MSC_VER

AddBPMessageRequest::AddBPMessageRequest()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    bufferpacket_name_(const_cast< ::std::string*>(&_default_bufferpacket_name_)),
    data_(const_cast< ::std::string*>(&_default_data_)),
    pmid_(const_cast< ::std::string*>(&_default_pmid_)),
    public_key_(const_cast< ::std::string*>(&_default_public_key_)),
    signed_public_key_(const_cast< ::std::string*>(&_default_signed_public_key_)),
    signed_request_(const_cast< ::std::string*>(&_default_signed_request_)) {
  SharedCtor();
}

void AddBPMessageRequest::InitAsDefaultInstance() {}

AddBPMessageRequest::AddBPMessageRequest(const AddBPMessageRequest& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    bufferpacket_name_(const_cast< ::std::string*>(&_default_bufferpacket_name_)),
    data_(const_cast< ::std::string*>(&_default_data_)),
    pmid_(const_cast< ::std::string*>(&_default_pmid_)),
    public_key_(const_cast< ::std::string*>(&_default_public_key_)),
    signed_public_key_(const_cast< ::std::string*>(&_default_signed_public_key_)),
    signed_request_(const_cast< ::std::string*>(&_default_signed_request_)) {
  SharedCtor();
  MergeFrom(from);
}

void AddBPMessageRequest::SharedCtor() {
  _cached_size_ = 0;
  bufferpacket_name_ = const_cast< ::std::string*>(&_default_bufferpacket_name_);
  data_ = const_cast< ::std::string*>(&_default_data_);
  pmid_ = const_cast< ::std::string*>(&_default_pmid_);
  public_key_ = const_cast< ::std::string*>(&_default_public_key_);
  signed_public_key_ = const_cast< ::std::string*>(&_default_signed_public_key_);
  signed_request_ = const_cast< ::std::string*>(&_default_signed_request_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddBPMessageRequest::~AddBPMessageRequest() {
  SharedDtor();
}

void AddBPMessageRequest::SharedDtor() {
  if (bufferpacket_name_ != &_default_bufferpacket_name_) {
    delete bufferpacket_name_;
  }
  if (data_ != &_default_data_) {
    delete data_;
  }
  if (pmid_ != &_default_pmid_) {
    delete pmid_;
  }
  if (public_key_ != &_default_public_key_) {
    delete public_key_;
  }
  if (signed_public_key_ != &_default_signed_public_key_) {
    delete signed_public_key_;
  }
  if (signed_request_ != &_default_signed_request_) {
    delete signed_request_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* AddBPMessageRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddBPMessageRequest_descriptor_;
}

const AddBPMessageRequest& AddBPMessageRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_5fservice_5fmessages_2eproto();  return *default_instance_;
}

AddBPMessageRequest* AddBPMessageRequest::default_instance_ = NULL;

AddBPMessageRequest* AddBPMessageRequest::New() const {
  return new AddBPMessageRequest;
}

void AddBPMessageRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (bufferpacket_name_ != &_default_bufferpacket_name_) {
        bufferpacket_name_->clear();
      }
    }
    if (_has_bit(1)) {
      if (data_ != &_default_data_) {
        data_->clear();
      }
    }
    if (_has_bit(2)) {
      if (pmid_ != &_default_pmid_) {
        pmid_->clear();
      }
    }
    if (_has_bit(3)) {
      if (public_key_ != &_default_public_key_) {
        public_key_->clear();
      }
    }
    if (_has_bit(4)) {
      if (signed_public_key_ != &_default_signed_public_key_) {
        signed_public_key_->clear();
      }
    }
    if (_has_bit(5)) {
      if (signed_request_ != &_default_signed_request_) {
        signed_request_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddBPMessageRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required bytes bufferpacket_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_bufferpacket_name()));
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }
      
      // required bytes data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_data:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_data()));
        if (input->ExpectTag(26)) goto parse_pmid;
        break;
      }
      
      // required bytes pmid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_pmid:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_pmid()));
        if (input->ExpectTag(34)) goto parse_public_key;
        break;
      }
      
      // required bytes public_key = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_public_key:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_public_key()));
        if (input->ExpectTag(42)) goto parse_signed_public_key;
        break;
      }
      
      // required bytes signed_public_key = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_signed_public_key:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_signed_public_key()));
        if (input->ExpectTag(50)) goto parse_signed_request;
        break;
      }
      
      // required bytes signed_request = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_signed_request:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_signed_request()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddBPMessageRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    AddBPMessageRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required bytes bufferpacket_name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(1, this->bufferpacket_name(), output);
  }
  
  // required bytes data = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(2, this->data(), output);
  }
  
  // required bytes pmid = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(3, this->pmid(), output);
  }
  
  // required bytes public_key = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(4, this->public_key(), output);
  }
  
  // required bytes signed_public_key = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(5, this->signed_public_key(), output);
  }
  
  // required bytes signed_request = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(6, this->signed_request(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddBPMessageRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes bufferpacket_name = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(1, this->bufferpacket_name(), target);
  }
  
  // required bytes data = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(2, this->data(), target);
  }
  
  // required bytes pmid = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(3, this->pmid(), target);
  }
  
  // required bytes public_key = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(4, this->public_key(), target);
  }
  
  // required bytes signed_public_key = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(5, this->signed_public_key(), target);
  }
  
  // required bytes signed_request = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(6, this->signed_request(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddBPMessageRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes bufferpacket_name = 1;
    if (has_bufferpacket_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->bufferpacket_name());
    }
    
    // required bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->data());
    }
    
    // required bytes pmid = 3;
    if (has_pmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->pmid());
    }
    
    // required bytes public_key = 4;
    if (has_public_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->public_key());
    }
    
    // required bytes signed_public_key = 5;
    if (has_signed_public_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->signed_public_key());
    }
    
    // required bytes signed_request = 6;
    if (has_signed_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->signed_request());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void AddBPMessageRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddBPMessageRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddBPMessageRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddBPMessageRequest::MergeFrom(const AddBPMessageRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_bufferpacket_name(from.bufferpacket_name());
    }
    if (from._has_bit(1)) {
      set_data(from.data());
    }
    if (from._has_bit(2)) {
      set_pmid(from.pmid());
    }
    if (from._has_bit(3)) {
      set_public_key(from.public_key());
    }
    if (from._has_bit(4)) {
      set_signed_public_key(from.signed_public_key());
    }
    if (from._has_bit(5)) {
      set_signed_request(from.signed_request());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddBPMessageRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddBPMessageRequest::CopyFrom(const AddBPMessageRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddBPMessageRequest::Swap(AddBPMessageRequest* other) {
  if (other != this) {
    std::swap(bufferpacket_name_, other->bufferpacket_name_);
    std::swap(data_, other->data_);
    std::swap(pmid_, other->pmid_);
    std::swap(public_key_, other->public_key_);
    std::swap(signed_public_key_, other->signed_public_key_);
    std::swap(signed_request_, other->signed_request_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool AddBPMessageRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* AddBPMessageRequest::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* AddBPMessageRequest::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return AddBPMessageRequest_reflection_;
}

// ===================================================================

const ::std::string AddBPMessageResponse::_default_pmid_id_;
const ::std::string AddBPMessageResponse::_default_public_key_;
const ::std::string AddBPMessageResponse::_default_signed_public_key_;
#ifndef _MSC_VER
const int AddBPMessageResponse::kResultFieldNumber;
const int AddBPMessageResponse::kPmidIdFieldNumber;
const int AddBPMessageResponse::kPublicKeyFieldNumber;
const int AddBPMessageResponse::kSignedPublicKeyFieldNumber;
#endif  // !_MSC_VER

AddBPMessageResponse::AddBPMessageResponse()
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    result_(0u),
    pmid_id_(const_cast< ::std::string*>(&_default_pmid_id_)),
    public_key_(const_cast< ::std::string*>(&_default_public_key_)),
    signed_public_key_(const_cast< ::std::string*>(&_default_signed_public_key_)) {
  SharedCtor();
}

void AddBPMessageResponse::InitAsDefaultInstance() {}

AddBPMessageResponse::AddBPMessageResponse(const AddBPMessageResponse& from)
  : ::google::protobuf::Message(),
    _unknown_fields_(),
    _cached_size_(0),
    result_(0u),
    pmid_id_(const_cast< ::std::string*>(&_default_pmid_id_)),
    public_key_(const_cast< ::std::string*>(&_default_public_key_)),
    signed_public_key_(const_cast< ::std::string*>(&_default_signed_public_key_)) {
  SharedCtor();
  MergeFrom(from);
}

void AddBPMessageResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  pmid_id_ = const_cast< ::std::string*>(&_default_pmid_id_);
  public_key_ = const_cast< ::std::string*>(&_default_public_key_);
  signed_public_key_ = const_cast< ::std::string*>(&_default_signed_public_key_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddBPMessageResponse::~AddBPMessageResponse() {
  SharedDtor();
}

void AddBPMessageResponse::SharedDtor() {
  if (pmid_id_ != &_default_pmid_id_) {
    delete pmid_id_;
  }
  if (public_key_ != &_default_public_key_) {
    delete public_key_;
  }
  if (signed_public_key_ != &_default_signed_public_key_) {
    delete signed_public_key_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* AddBPMessageResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddBPMessageResponse_descriptor_;
}

const AddBPMessageResponse& AddBPMessageResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maidsafe_5fservice_5fmessages_2eproto();  return *default_instance_;
}

AddBPMessageResponse* AddBPMessageResponse::default_instance_ = NULL;

AddBPMessageResponse* AddBPMessageResponse::New() const {
  return new AddBPMessageResponse;
}

void AddBPMessageResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    if (_has_bit(1)) {
      if (pmid_id_ != &_default_pmid_id_) {
        pmid_id_->clear();
      }
    }
    if (_has_bit(2)) {
      if (public_key_ != &_default_public_key_) {
        public_key_->clear();
      }
    }
    if (_has_bit(3)) {
      if (signed_public_key_ != &_default_signed_public_key_) {
        signed_public_key_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddBPMessageResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadUInt32(
              input, &result_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_pmid_id;
        break;
      }
      
      // optional bytes pmid_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_pmid_id:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_pmid_id()));
        if (input->ExpectTag(26)) goto parse_public_key;
        break;
      }
      
      // optional bytes public_key = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_public_key:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_public_key()));
        if (input->ExpectTag(34)) goto parse_signed_public_key;
        break;
      }
      
      // optional bytes signed_public_key = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_signed_public_key:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_signed_public_key()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddBPMessageResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    AddBPMessageResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteUInt32(1, this->result(), output);
  }
  
  // optional bytes pmid_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(2, this->pmid_id(), output);
  }
  
  // optional bytes public_key = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(3, this->public_key(), output);
  }
  
  // optional bytes signed_public_key = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteBytes(4, this->signed_public_key(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddBPMessageResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteUInt32ToArray(1, this->result(), target);
  }
  
  // optional bytes pmid_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(2, this->pmid_id(), target);
  }
  
  // optional bytes public_key = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(3, this->public_key(), target);
  }
  
  // optional bytes signed_public_key = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteBytesToArray(4, this->signed_public_key(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddBPMessageResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::UInt32Size(
          this->result());
    }
    
    // optional bytes pmid_id = 2;
    if (has_pmid_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->pmid_id());
    }
    
    // optional bytes public_key = 3;
    if (has_public_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->public_key());
    }
    
    // optional bytes signed_public_key = 4;
    if (has_signed_public_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->signed_public_key());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void AddBPMessageResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddBPMessageResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddBPMessageResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddBPMessageResponse::MergeFrom(const AddBPMessageResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_result(from.result());
    }
    if (from._has_bit(1)) {
      set_pmid_id(from.pmid_id());
    }
    if (from._has_bit(2)) {
      set_public_key(from.public_key());
    }
    if (from._has_bit(3)) {
      set_signed_public_key(from.signed_public_key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddBPMessageResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddBPMessageResponse::CopyFrom(const AddBPMessageResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddBPMessageResponse::Swap(AddBPMessageResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(pmid_id_, other->pmid_id_);
    std::swap(public_key_, other->public_key_);
    std::swap(signed_public_key_, other->signed_public_key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool AddBPMessageResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* AddBPMessageResponse::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* AddBPMessageResponse::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return AddBPMessageResponse_reflection_;
}

}  // namespace maidsafe
