// Account service requests and responses

import "maidsafe/common/maidsafe.proto";

package maidsafe.protobuf;

message AmendAccountRequest {
  enum Amendment {
    kSpaceOffered = 0;  // total (used & unused) vault space available to net
    kSpaceGivenInc = 1;  // called when vault stores a chunk for someone
    kSpaceGivenDec = 2;  // called when vault deletes a chunk
    kSpaceTakenInc = 3;  // called when client uploads a chunk to net
    kSpaceTakenDec = 4;  // called when client deletes a chunk he's previously
                         // uploaded
  }
  required Amendment amendment_type = 1;
  required bytes account_pmid = 2;  // PMID of account to be amended
  required SignedSize signed_size = 3;
  optional bytes chunkname = 4;  // required if type is not kSpaceOffered to
                                 // assert that sender is valid ChunkInfo holder
}

message AmendAccountResponse {
  required bool result = 1;
  optional bytes pmid = 2;  // account holder's PMID
}

message ExpectAmendmentRequest {
  required AmendAccountRequest.Amendment amendment_type = 1;
  required bytes chunkname = 2;
  required bytes account_pmid = 3;  // PMID of account owner (i.e. sender)
  required bytes public_key = 4;
  required bytes public_key_signature = 5;
  required bytes request_signature = 6;
  repeated bytes amender_pmids = 7;  // the K vaults to expect amendments from
}

message ExpectAmendmentResponse {
  required bool result = 1;
  optional bytes pmid = 2;
}

message AccountStatusRequest {
  required bytes account_pmid = 1;  // PMID of account being queried
  optional uint64 space_requested = 2;
  optional bytes public_key = 3;
  optional bytes public_key_signature = 4;
  optional bytes request_signature = 5;
}

message AccountStatusResponse {
  message AmendmentResult {
    required AmendAccountRequest.Amendment amendment_type = 1;
    required bytes chunkname = 2;
    required bool result = 3;
  }
  required bool result = 1;
  required bytes pmid = 2;
  optional uint64 space_offered = 3;
  optional uint64 space_given = 4;
  optional uint64 space_taken = 5;
  repeated AmendmentResult amendment_results = 6;
}