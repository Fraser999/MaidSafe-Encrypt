// Chunk service requests and responses
// In comments throughout, where a client is requesting a store to a vault, the
// requester provides the pmid of (one of) his vault(s) - known as "client's
// PMID" and the recipient's is known as "vault's PMID".

import "maidsafe/common/maidsafe.proto";

package maidsafe.protobuf;

message ArrangeStoreRequest {
  required bytes chunkname = 1;
  required SignedSize signed_size = 2;
  required bytes request_signature = 3;
}

message ArrangeStoreResponse {
  required StoreContract store_contract = 1;
  required bytes response_signature = 2;  // serialised store_contract signed
                                          // with vault's PMID
}

message StoreChunkRequest {
  required bytes chunkname = 1;
  required bytes data = 2;
  required bytes pmid = 3;  // client's PMID
  required bytes public_key = 4;
  required bytes public_key_signature = 5;
  required bytes request_signature = 6;
  required int32 data_type = 7;
  optional uint32 offset = 8;
  optional uint32 chunklet_size = 9;
}

message StoreChunkResponse {
  required bool result = 1;
  optional bytes pmid = 2;  // vault's PMID
}

message GetChunkRequest {
  required bytes chunkname = 1;
  optional bytes serialised_cacher_contact = 2;
}

message GetChunkResponse {
  required bool result = 1;
  optional bytes content = 2;
  optional bytes pmid = 3;
}

message HasChunkRequest {
  required bytes chunkname = 1;
}

message HasChunkResponse {
  required bool result = 1;
  required bytes pmid = 2;
}

message ValidateChunkRequest {
  required bytes chunkname = 1;
  required bytes random_data = 2;
}

message ValidateChunkResponse {
  required bool result = 1;
  optional bytes hash_content = 2;
  required bytes pmid = 3;
}

message DeleteChunkRequest {
  required bytes chunkname = 1;
  required SignedSize signed_size = 2;
  required bytes request_signature = 3;  // signed by Chunk Info holder's PMID
  required int32 data_type = 4;
}

message DeleteChunkResponse {
  required bool result = 1;
  optional bytes pmid = 2;
}

message DuplicateChunkRequest {
  required bytes chunkname = 1;
}

message DuplicateChunkResponse {
  required bool result = 1;
  required bytes pmid = 2;
}

message CacheChunkRequest {
  required bytes chunkname = 1;
  required bytes chunkcontent = 2;
  required bytes pmid = 3;
  required bytes public_key = 4;
  required bytes public_key_signature = 5;
  required bytes request_signature = 6;
}

message CacheChunkResponse {
  required bool result = 1;
}